<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno" version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870">
  <!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.-->
  <!--NOTES: super_speedy_syslog_searcher 0.6.69; git: 1ad432d; -freq 3000; created 20240321T224041-0700-->
  <defs>
    <linearGradient id="background" y1="0" y2="1" x1="0" x2="0">
      <stop stop-color="#eeeeee" offset="5%"/>
      <stop stop-color="#eeeeb0" offset="95%"/>
    </linearGradient>
  </defs>
  <style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames &gt; *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style>
  <script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    "use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script>
  <rect x="0" y="0" width="100%" height="870" fill="url(#background)"/>
  <text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph: super_speedy_syslog_searcher 0.6.69; git: 1ad432d; -freq 3000; created 20240321T224041-0700<br/>; s4 ./logs/programs/journal/Ubuntu22-user-1000x3.journal</text>
  <text id="details" fill="rgb(0,0,0)" x="10" y="853.00"> </text>
  <text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text>
  <text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text>
  <text id="matched" fill="rgb(0,0,0)" x="1190" y="853.00"> </text>
  <svg id="frames" x="10" width="1180" total_samples="24">
    <g>
      <title>_dl_start (1 samples, 4.17%)</title>
      <rect x="0.0000%" y="773" width="4.1667%" height="15" fill="rgb(214,13,30)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="783.50">_dl_s..</text>
    </g>
    <g>
      <title>_dl_start_final (1 samples, 4.17%)</title>
      <rect x="0.0000%" y="757" width="4.1667%" height="15" fill="rgb(222,52,46)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="767.50">_dl_s..</text>
    </g>
    <g>
      <title>_dl_sysdep_start (1 samples, 4.17%)</title>
      <rect x="0.0000%" y="741" width="4.1667%" height="15" fill="rgb(238,104,49)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="751.50">_dl_s..</text>
    </g>
    <g>
      <title>dl_main (1 samples, 4.17%)</title>
      <rect x="0.0000%" y="725" width="4.1667%" height="15" fill="rgb(253,59,10)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="735.50">dl_ma..</text>
    </g>
    <g>
      <title>_dl_relocate_object (1 samples, 4.17%)</title>
      <rect x="0.0000%" y="709" width="4.1667%" height="15" fill="rgb(244,75,35)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="719.50">_dl_r..</text>
    </g>
    <g>
      <title>elf_dynamic_do_Rela (1 samples, 4.17%)</title>
      <rect x="0.0000%" y="693" width="4.1667%" height="15" fill="rgb(234,90,53)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="703.50">elf_d..</text>
    </g>
    <g>
      <title>elf_machine_lazy_rel (1 samples, 4.17%)</title>
      <rect x="0.0000%" y="677" width="4.1667%" height="15" fill="rgb(215,191,7)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="687.50">elf_m..</text>
    </g>
    <g>
      <title>__strnlen_ifunc (1 samples, 4.17%)</title>
      <rect x="0.0000%" y="661" width="4.1667%" height="15" fill="rgb(250,208,27)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="671.50">__str..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="0.0000%" y="645" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="655.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="0.0000%" y="629" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="639.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="0.0000%" y="613" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="623.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="0.0000%" y="597" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="607.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="0.0000%" y="581" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="591.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="0.0000%" y="565" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="575.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="0.0000%" y="549" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="559.50">[[ker..</text>
    </g>
    <g>
      <title>std::rt::init (1 samples, 4.17%)</title>
      <rect x="4.1667%" y="645" width="4.1667%" height="15" fill="rgb(248,16,48)" fg:x="1" fg:w="1"/>
      <text x="4.4167%" y="655.50">std::..</text>
    </g>
    <g>
      <title>std::sys::unix::thread::guard::init (1 samples, 4.17%)</title>
      <rect x="4.1667%" y="629" width="4.1667%" height="15" fill="rgb(254,202,37)" fg:x="1" fg:w="1"/>
      <text x="4.4167%" y="639.50">std::..</text>
    </g>
    <g>
      <title>std::sys::unix::thread::guard::get_stack_start_aligned (1 samples, 4.17%)</title>
      <rect x="4.1667%" y="613" width="4.1667%" height="15" fill="rgb(212,120,22)" fg:x="1" fg:w="1"/>
      <text x="4.4167%" y="623.50">std::..</text>
    </g>
    <g>
      <title>std::sys::unix::thread::guard::get_stack_start (1 samples, 4.17%)</title>
      <rect x="4.1667%" y="597" width="4.1667%" height="15" fill="rgb(231,77,40)" fg:x="1" fg:w="1"/>
      <text x="4.4167%" y="607.50">std::..</text>
    </g>
    <g>
      <title>__pthread_getattr_np (1 samples, 4.17%)</title>
      <rect x="4.1667%" y="581" width="4.1667%" height="15" fill="rgb(220,69,37)" fg:x="1" fg:w="1"/>
      <text x="4.4167%" y="591.50">__pth..</text>
    </g>
    <g>
      <title>_IO_new_fopen (1 samples, 4.17%)</title>
      <rect x="4.1667%" y="565" width="4.1667%" height="15" fill="rgb(236,194,9)" fg:x="1" fg:w="1"/>
      <text x="4.4167%" y="575.50">_IO_n..</text>
    </g>
    <g>
      <title>__fopen_internal (1 samples, 4.17%)</title>
      <rect x="4.1667%" y="549" width="4.1667%" height="15" fill="rgb(220,73,20)" fg:x="1" fg:w="1"/>
      <text x="4.4167%" y="559.50">__fop..</text>
    </g>
    <g>
      <title>__GI___libc_malloc (1 samples, 4.17%)</title>
      <rect x="4.1667%" y="533" width="4.1667%" height="15" fill="rgb(206,112,53)" fg:x="1" fg:w="1"/>
      <text x="4.4167%" y="543.50">__GI_..</text>
    </g>
    <g>
      <title>tcache_init (1 samples, 4.17%)</title>
      <rect x="4.1667%" y="517" width="4.1667%" height="15" fill="rgb(245,6,4)" fg:x="1" fg:w="1"/>
      <text x="4.4167%" y="527.50">tcach..</text>
    </g>
    <g>
      <title>tcache_init (1 samples, 4.17%)</title>
      <rect x="4.1667%" y="501" width="4.1667%" height="15" fill="rgb(245,6,4)" fg:x="1" fg:w="1"/>
      <text x="4.4167%" y="511.50">tcach..</text>
    </g>
    <g>
      <title>_int_malloc (1 samples, 4.17%)</title>
      <rect x="4.1667%" y="485" width="4.1667%" height="15" fill="rgb(222,219,51)" fg:x="1" fg:w="1"/>
      <text x="4.4167%" y="495.50">_int_..</text>
    </g>
    <g>
      <title>sysmalloc (1 samples, 4.17%)</title>
      <rect x="4.1667%" y="469" width="4.1667%" height="15" fill="rgb(237,64,10)" fg:x="1" fg:w="1"/>
      <text x="4.4167%" y="479.50">sysma..</text>
    </g>
    <g>
      <title>__glibc_morecore (1 samples, 4.17%)</title>
      <rect x="4.1667%" y="453" width="4.1667%" height="15" fill="rgb(215,17,3)" fg:x="1" fg:w="1"/>
      <text x="4.4167%" y="463.50">__gli..</text>
    </g>
    <g>
      <title>__GI___sbrk (1 samples, 4.17%)</title>
      <rect x="4.1667%" y="437" width="4.1667%" height="15" fill="rgb(216,120,7)" fg:x="1" fg:w="1"/>
      <text x="4.4167%" y="447.50">__GI_..</text>
    </g>
    <g>
      <title>__GI___sbrk (1 samples, 4.17%)</title>
      <rect x="4.1667%" y="421" width="4.1667%" height="15" fill="rgb(216,120,7)" fg:x="1" fg:w="1"/>
      <text x="4.4167%" y="431.50">__GI_..</text>
    </g>
    <g>
      <title>__brk (1 samples, 4.17%)</title>
      <rect x="4.1667%" y="405" width="4.1667%" height="15" fill="rgb(216,153,15)" fg:x="1" fg:w="1"/>
      <text x="4.4167%" y="415.50">__brk</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="4.1667%" y="389" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="1" fg:w="1"/>
      <text x="4.4167%" y="399.50">[[ker..</text>
    </g>
    <g>
      <title>s4lib::libload::systemd_dlopen2::load_library_systemd (1 samples, 4.17%)</title>
      <rect x="8.3333%" y="501" width="4.1667%" height="15" fill="rgb(209,147,6)" fg:x="2" fg:w="1"/>
      <text x="8.5833%" y="511.50">s4lib..</text>
    </g>
    <g>
      <title>dlopen2::wrapper::container::Container&lt;T&gt;::load (1 samples, 4.17%)</title>
      <rect x="8.3333%" y="485" width="4.1667%" height="15" fill="rgb(205,124,22)" fg:x="2" fg:w="1"/>
      <text x="8.5833%" y="495.50">dlope..</text>
    </g>
    <g>
      <title>dlopen2::raw::common::Library::open (1 samples, 4.17%)</title>
      <rect x="8.3333%" y="469" width="4.1667%" height="15" fill="rgb(215,66,11)" fg:x="2" fg:w="1"/>
      <text x="8.5833%" y="479.50">dlope..</text>
    </g>
    <g>
      <title>dlopen2::raw::unix::open_lib (1 samples, 4.17%)</title>
      <rect x="8.3333%" y="453" width="4.1667%" height="15" fill="rgb(253,38,37)" fg:x="2" fg:w="1"/>
      <text x="8.5833%" y="463.50">dlope..</text>
    </g>
    <g>
      <title>___dlopen (1 samples, 4.17%)</title>
      <rect x="8.3333%" y="437" width="4.1667%" height="15" fill="rgb(233,57,20)" fg:x="2" fg:w="1"/>
      <text x="8.5833%" y="447.50">___dl..</text>
    </g>
    <g>
      <title>dlopen_implementation (1 samples, 4.17%)</title>
      <rect x="8.3333%" y="421" width="4.1667%" height="15" fill="rgb(205,110,16)" fg:x="2" fg:w="1"/>
      <text x="8.5833%" y="431.50">dlope..</text>
    </g>
    <g>
      <title>_dlerror_run (1 samples, 4.17%)</title>
      <rect x="8.3333%" y="405" width="4.1667%" height="15" fill="rgb(208,58,37)" fg:x="2" fg:w="1"/>
      <text x="8.5833%" y="415.50">_dler..</text>
    </g>
    <g>
      <title>__GI__dl_catch_error (1 samples, 4.17%)</title>
      <rect x="8.3333%" y="389" width="4.1667%" height="15" fill="rgb(216,170,53)" fg:x="2" fg:w="1"/>
      <text x="8.5833%" y="399.50">__GI_..</text>
    </g>
    <g>
      <title>__GI__dl_catch_exception (1 samples, 4.17%)</title>
      <rect x="8.3333%" y="373" width="4.1667%" height="15" fill="rgb(234,84,7)" fg:x="2" fg:w="1"/>
      <text x="8.5833%" y="383.50">__GI_..</text>
    </g>
    <g>
      <title>dlopen_doit (1 samples, 4.17%)</title>
      <rect x="8.3333%" y="357" width="4.1667%" height="15" fill="rgb(227,103,25)" fg:x="2" fg:w="1"/>
      <text x="8.5833%" y="367.50">dlope..</text>
    </g>
    <g>
      <title>_dl_open (1 samples, 4.17%)</title>
      <rect x="8.3333%" y="341" width="4.1667%" height="15" fill="rgb(246,203,24)" fg:x="2" fg:w="1"/>
      <text x="8.5833%" y="351.50">_dl_o..</text>
    </g>
    <g>
      <title>__GI__dl_catch_exception (1 samples, 4.17%)</title>
      <rect x="8.3333%" y="325" width="4.1667%" height="15" fill="rgb(234,84,7)" fg:x="2" fg:w="1"/>
      <text x="8.5833%" y="335.50">__GI_..</text>
    </g>
    <g>
      <title>dl_open_worker (1 samples, 4.17%)</title>
      <rect x="8.3333%" y="309" width="4.1667%" height="15" fill="rgb(248,64,50)" fg:x="2" fg:w="1"/>
      <text x="8.5833%" y="319.50">dl_op..</text>
    </g>
    <g>
      <title>__GI__dl_catch_exception (1 samples, 4.17%)</title>
      <rect x="8.3333%" y="293" width="4.1667%" height="15" fill="rgb(234,84,7)" fg:x="2" fg:w="1"/>
      <text x="8.5833%" y="303.50">__GI_..</text>
    </g>
    <g>
      <title>dl_open_worker_begin (1 samples, 4.17%)</title>
      <rect x="8.3333%" y="277" width="4.1667%" height="15" fill="rgb(243,153,31)" fg:x="2" fg:w="1"/>
      <text x="8.5833%" y="287.50">dl_op..</text>
    </g>
    <g>
      <title>_dl_map_object_deps (1 samples, 4.17%)</title>
      <rect x="8.3333%" y="261" width="4.1667%" height="15" fill="rgb(208,68,2)" fg:x="2" fg:w="1"/>
      <text x="8.5833%" y="271.50">_dl_m..</text>
    </g>
    <g>
      <title>__libc_start_main_impl (3 samples, 12.50%)</title>
      <rect x="4.1667%" y="773" width="12.5000%" height="15" fill="rgb(228,214,28)" fg:x="1" fg:w="3"/>
      <text x="4.4167%" y="783.50">__libc_start_main_i..</text>
    </g>
    <g>
      <title>__libc_start_call_main (3 samples, 12.50%)</title>
      <rect x="4.1667%" y="757" width="12.5000%" height="15" fill="rgb(249,173,1)" fg:x="1" fg:w="3"/>
      <text x="4.4167%" y="767.50">__libc_start_call_m..</text>
    </g>
    <g>
      <title>main (3 samples, 12.50%)</title>
      <rect x="4.1667%" y="741" width="12.5000%" height="15" fill="rgb(238,28,47)" fg:x="1" fg:w="3"/>
      <text x="4.4167%" y="751.50">main</text>
    </g>
    <g>
      <title>std::rt::lang_start_internal (3 samples, 12.50%)</title>
      <rect x="4.1667%" y="725" width="12.5000%" height="15" fill="rgb(240,177,54)" fg:x="1" fg:w="3"/>
      <text x="4.4167%" y="735.50">std::rt::lang_start..</text>
    </g>
    <g>
      <title>std::panic::catch_unwind (3 samples, 12.50%)</title>
      <rect x="4.1667%" y="709" width="12.5000%" height="15" fill="rgb(216,75,8)" fg:x="1" fg:w="3"/>
      <text x="4.4167%" y="719.50">std::panic::catch_u..</text>
    </g>
    <g>
      <title>std::panicking::try (3 samples, 12.50%)</title>
      <rect x="4.1667%" y="693" width="12.5000%" height="15" fill="rgb(212,61,29)" fg:x="1" fg:w="3"/>
      <text x="4.4167%" y="703.50">std::panicking::try</text>
    </g>
    <g>
      <title>std::panicking::try::do_call (3 samples, 12.50%)</title>
      <rect x="4.1667%" y="677" width="12.5000%" height="15" fill="rgb(232,162,46)" fg:x="1" fg:w="3"/>
      <text x="4.4167%" y="687.50">std::panicking::try..</text>
    </g>
    <g>
      <title>std::rt::lang_start_internal::{{closure}} (3 samples, 12.50%)</title>
      <rect x="4.1667%" y="661" width="12.5000%" height="15" fill="rgb(219,15,13)" fg:x="1" fg:w="3"/>
      <text x="4.4167%" y="671.50">std::rt::lang_start..</text>
    </g>
    <g>
      <title>std::panic::catch_unwind (2 samples, 8.33%)</title>
      <rect x="8.3333%" y="645" width="8.3333%" height="15" fill="rgb(216,75,8)" fg:x="2" fg:w="2"/>
      <text x="8.5833%" y="655.50">std::panic::..</text>
    </g>
    <g>
      <title>std::panicking::try (2 samples, 8.33%)</title>
      <rect x="8.3333%" y="629" width="8.3333%" height="15" fill="rgb(212,61,29)" fg:x="2" fg:w="2"/>
      <text x="8.5833%" y="639.50">std::panicki..</text>
    </g>
    <g>
      <title>std::panicking::try::do_call (2 samples, 8.33%)</title>
      <rect x="8.3333%" y="613" width="8.3333%" height="15" fill="rgb(232,162,46)" fg:x="2" fg:w="2"/>
      <text x="8.5833%" y="623.50">std::panicki..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2 samples, 8.33%)</title>
      <rect x="8.3333%" y="597" width="8.3333%" height="15" fill="rgb(212,73,0)" fg:x="2" fg:w="2"/>
      <text x="8.5833%" y="607.50">core::ops::f..</text>
    </g>
    <g>
      <title>std::rt::lang_start::{{closure}} (2 samples, 8.33%)</title>
      <rect x="8.3333%" y="581" width="8.3333%" height="15" fill="rgb(213,78,9)" fg:x="2" fg:w="2"/>
      <text x="8.5833%" y="591.50">std::rt::lan..</text>
    </g>
    <g>
      <title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 8.33%)</title>
      <rect x="8.3333%" y="565" width="8.3333%" height="15" fill="rgb(210,88,34)" fg:x="2" fg:w="2"/>
      <text x="8.5833%" y="575.50">std::sys_com..</text>
    </g>
    <g>
      <title>core::ops::function::FnOnce::call_once (2 samples, 8.33%)</title>
      <rect x="8.3333%" y="549" width="8.3333%" height="15" fill="rgb(210,80,10)" fg:x="2" fg:w="2"/>
      <text x="8.5833%" y="559.50">core::ops::f..</text>
    </g>
    <g>
      <title>s4::main (2 samples, 8.33%)</title>
      <rect x="8.3333%" y="533" width="8.3333%" height="15" fill="rgb(221,151,31)" fg:x="2" fg:w="2"/>
      <text x="8.5833%" y="543.50">s4::main</text>
    </g>
    <g>
      <title>s4::processing_loop (2 samples, 8.33%)</title>
      <rect x="8.3333%" y="517" width="8.3333%" height="15" fill="rgb(233,182,14)" fg:x="2" fg:w="2"/>
      <text x="8.5833%" y="527.50">s4::processi..</text>
    </g>
    <g>
      <title>s4::processing_loop::recv_many_chan (1 samples, 4.17%)</title>
      <rect x="12.5000%" y="501" width="4.1667%" height="15" fill="rgb(253,70,6)" fg:x="3" fg:w="1"/>
      <text x="12.7500%" y="511.50">s4::p..</text>
    </g>
    <g>
      <title>crossbeam_channel::select::Select::select (1 samples, 4.17%)</title>
      <rect x="12.5000%" y="485" width="4.1667%" height="15" fill="rgb(218,151,27)" fg:x="3" fg:w="1"/>
      <text x="12.7500%" y="495.50">cross..</text>
    </g>
    <g>
      <title>crossbeam_channel::select::select (1 samples, 4.17%)</title>
      <rect x="12.5000%" y="469" width="4.1667%" height="15" fill="rgb(210,225,20)" fg:x="3" fg:w="1"/>
      <text x="12.7500%" y="479.50">cross..</text>
    </g>
    <g>
      <title>crossbeam_channel::select::run_select (1 samples, 4.17%)</title>
      <rect x="12.5000%" y="453" width="4.1667%" height="15" fill="rgb(238,41,29)" fg:x="3" fg:w="1"/>
      <text x="12.7500%" y="463.50">cross..</text>
    </g>
    <g>
      <title>crossbeam_channel::context::Context::with (1 samples, 4.17%)</title>
      <rect x="12.5000%" y="437" width="4.1667%" height="15" fill="rgb(249,203,42)" fg:x="3" fg:w="1"/>
      <text x="12.7500%" y="447.50">cross..</text>
    </g>
    <g>
      <title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 4.17%)</title>
      <rect x="12.5000%" y="421" width="4.1667%" height="15" fill="rgb(235,136,14)" fg:x="3" fg:w="1"/>
      <text x="12.7500%" y="431.50">std::..</text>
    </g>
    <g>
      <title>crossbeam_channel::context::Context::with::{{closure}} (1 samples, 4.17%)</title>
      <rect x="12.5000%" y="405" width="4.1667%" height="15" fill="rgb(251,136,16)" fg:x="3" fg:w="1"/>
      <text x="12.7500%" y="415.50">cross..</text>
    </g>
    <g>
      <title>crossbeam_channel::context::Context::with::{{closure}} (1 samples, 4.17%)</title>
      <rect x="12.5000%" y="389" width="4.1667%" height="15" fill="rgb(251,136,16)" fg:x="3" fg:w="1"/>
      <text x="12.7500%" y="399.50">cross..</text>
    </g>
    <g>
      <title>crossbeam_channel::select::run_select::{{closure}} (1 samples, 4.17%)</title>
      <rect x="12.5000%" y="373" width="4.1667%" height="15" fill="rgb(241,20,29)" fg:x="3" fg:w="1"/>
      <text x="12.7500%" y="383.50">cross..</text>
    </g>
    <g>
      <title>crossbeam_channel::context::Context::wait_until (1 samples, 4.17%)</title>
      <rect x="12.5000%" y="357" width="4.1667%" height="15" fill="rgb(218,28,27)" fg:x="3" fg:w="1"/>
      <text x="12.7500%" y="367.50">cross..</text>
    </g>
    <g>
      <title>crossbeam_utils::backoff::Backoff::snooze (1 samples, 4.17%)</title>
      <rect x="12.5000%" y="341" width="4.1667%" height="15" fill="rgb(224,200,25)" fg:x="3" fg:w="1"/>
      <text x="12.7500%" y="351.50">cross..</text>
    </g>
    <g>
      <title>__GI___sched_yield (1 samples, 4.17%)</title>
      <rect x="12.5000%" y="325" width="4.1667%" height="15" fill="rgb(225,197,10)" fg:x="3" fg:w="1"/>
      <text x="12.7500%" y="335.50">__GI_..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="12.5000%" y="309" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="3" fg:w="1"/>
      <text x="12.7500%" y="319.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="12.5000%" y="293" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="3" fg:w="1"/>
      <text x="12.7500%" y="303.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="12.5000%" y="277" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="3" fg:w="1"/>
      <text x="12.7500%" y="287.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="12.5000%" y="261" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="3" fg:w="1"/>
      <text x="12.7500%" y="271.50">[[ker..</text>
    </g>
    <g>
      <title>_start (5 samples, 20.83%)</title>
      <rect x="0.0000%" y="789" width="20.8333%" height="15" fill="rgb(210,219,27)" fg:x="0" fg:w="5"/>
      <text x="0.2500%" y="799.50">_start</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="16.6667%" y="773" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="4" fg:w="1"/>
      <text x="16.9167%" y="783.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="16.6667%" y="757" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="4" fg:w="1"/>
      <text x="16.9167%" y="767.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="16.6667%" y="741" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="4" fg:w="1"/>
      <text x="16.9167%" y="751.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="16.6667%" y="725" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="4" fg:w="1"/>
      <text x="16.9167%" y="735.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="16.6667%" y="709" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="4" fg:w="1"/>
      <text x="16.9167%" y="719.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="16.6667%" y="693" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="4" fg:w="1"/>
      <text x="16.9167%" y="703.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="16.6667%" y="677" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="4" fg:w="1"/>
      <text x="16.9167%" y="687.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="16.6667%" y="661" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="4" fg:w="1"/>
      <text x="16.9167%" y="671.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="16.6667%" y="645" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="4" fg:w="1"/>
      <text x="16.9167%" y="655.50">[[ker..</text>
    </g>
    <g>
      <title>[unknown] (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="789" width="4.1667%" height="15" fill="rgb(227,28,50)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="799.50">[unkn..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="773" width="4.1667%" height="15" fill="rgb(212,33,22)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="783.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="757" width="4.1667%" height="15" fill="rgb(236,25,32)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="767.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many_from_hir (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="741" width="4.1667%" height="15" fill="rgb(250,142,30)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="751.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::meta::strategy::new (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="725" width="4.1667%" height="15" fill="rgb(243,171,22)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="735.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::meta::strategy::Core::new (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="709" width="4.1667%" height="15" fill="rgb(222,69,27)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="719.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="693" width="4.1667%" height="15" fill="rgb(226,42,16)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="703.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="677" width="4.1667%" height="15" fill="rgb(242,129,17)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="687.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="661" width="4.1667%" height="15" fill="rgb(247,137,3)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="671.50">regex..</text>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="645" width="4.1667%" height="15" fill="rgb(214,109,53)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="655.50">&lt;core..</text>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="629" width="4.1667%" height="15" fill="rgb(254,35,30)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="639.50">core:..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="613" width="4.1667%" height="15" fill="rgb(226,169,23)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="623.50">core:..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="597" width="4.1667%" height="15" fill="rgb(218,216,52)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="607.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="581" width="4.1667%" height="15" fill="rgb(235,200,16)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="591.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="565" width="4.1667%" height="15" fill="rgb(213,34,18)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="575.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="549" width="4.1667%" height="15" fill="rgb(210,105,37)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="559.50">regex..</text>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="533" width="4.1667%" height="15" fill="rgb(214,109,53)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="543.50">&lt;core..</text>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="517" width="4.1667%" height="15" fill="rgb(254,35,30)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="527.50">core:..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="501" width="4.1667%" height="15" fill="rgb(226,169,23)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="511.50">core:..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="485" width="4.1667%" height="15" fill="rgb(205,130,14)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="495.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="469" width="4.1667%" height="15" fill="rgb(238,57,7)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="479.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="453" width="4.1667%" height="15" fill="rgb(235,200,16)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="463.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="437" width="4.1667%" height="15" fill="rgb(213,34,18)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="447.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="421" width="4.1667%" height="15" fill="rgb(253,35,22)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="431.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="405" width="4.1667%" height="15" fill="rgb(247,137,3)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="415.50">regex..</text>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="389" width="4.1667%" height="15" fill="rgb(214,109,53)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="399.50">&lt;core..</text>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="373" width="4.1667%" height="15" fill="rgb(254,35,30)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="383.50">core:..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="357" width="4.1667%" height="15" fill="rgb(226,169,23)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="367.50">core:..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice::{{closure}} (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="341" width="4.1667%" height="15" fill="rgb(223,145,12)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="351.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="325" width="4.1667%" height="15" fill="rgb(235,200,16)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="335.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="309" width="4.1667%" height="15" fill="rgb(213,34,18)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="319.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="293" width="4.1667%" height="15" fill="rgb(210,105,37)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="303.50">regex..</text>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="277" width="4.1667%" height="15" fill="rgb(214,109,53)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="287.50">&lt;core..</text>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="261" width="4.1667%" height="15" fill="rgb(254,35,30)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="271.50">core:..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="245" width="4.1667%" height="15" fill="rgb(226,169,23)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="255.50">core:..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="229" width="4.1667%" height="15" fill="rgb(205,130,14)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="239.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="213" width="4.1667%" height="15" fill="rgb(238,57,7)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="223.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="197" width="4.1667%" height="15" fill="rgb(213,34,18)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="207.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="181" width="4.1667%" height="15" fill="rgb(246,38,12)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="191.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="165" width="4.1667%" height="15" fill="rgb(211,200,20)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="175.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Utf8State::clear (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="149" width="4.1667%" height="15" fill="rgb(241,127,0)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="159.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="133" width="4.1667%" height="15" fill="rgb(207,86,25)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="143.50">regex..</text>
    </g>
    <g>
      <title>alloc::vec::from_elem (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="117" width="4.1667%" height="15" fill="rgb(208,109,54)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="127.50">alloc..</text>
    </g>
    <g>
      <title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="101" width="4.1667%" height="15" fill="rgb(228,177,24)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="111.50">&lt;T as..</text>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="85" width="4.1667%" height="15" fill="rgb(216,52,5)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="95.50">alloc..</text>
    </g>
    <g>
      <title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="69" width="4.1667%" height="15" fill="rgb(246,165,53)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="79.50">core:..</text>
    </g>
    <g>
      <title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="53" width="4.1667%" height="15" fill="rgb(226,134,37)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="63.50">&lt;core..</text>
    </g>
    <g>
      <title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 4.17%)</title>
      <rect x="20.8333%" y="37" width="4.1667%" height="15" fill="rgb(232,29,30)" fg:x="5" fg:w="1"/>
      <text x="21.0833%" y="47.50">core:..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="25.0000%" y="725" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="6" fg:w="1"/>
      <text x="25.2500%" y="735.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="25.0000%" y="709" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="6" fg:w="1"/>
      <text x="25.2500%" y="719.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="25.0000%" y="693" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="6" fg:w="1"/>
      <text x="25.2500%" y="703.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="25.0000%" y="677" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="6" fg:w="1"/>
      <text x="25.2500%" y="687.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 33.33%)</title>
      <rect x="25.0000%" y="757" width="33.3333%" height="15" fill="rgb(210,204,4)" fg:x="6" fg:w="8"/>
      <text x="25.2500%" y="767.50">[[kernel.kallsyms]]</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 33.33%)</title>
      <rect x="25.0000%" y="741" width="33.3333%" height="15" fill="rgb(210,204,4)" fg:x="6" fg:w="8"/>
      <text x="25.2500%" y="751.50">[[kernel.kallsyms]]</text>
    </g>
    <g>
      <title>s4 (15 samples, 62.50%)</title>
      <rect x="0.0000%" y="805" width="62.5000%" height="15" fill="rgb(230,7,27)" fg:x="0" fg:w="15"/>
      <text x="0.2500%" y="815.50">s4</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (9 samples, 37.50%)</title>
      <rect x="25.0000%" y="789" width="37.5000%" height="15" fill="rgb(210,204,4)" fg:x="6" fg:w="9"/>
      <text x="25.2500%" y="799.50">[[kernel.kallsyms]]</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (9 samples, 37.50%)</title>
      <rect x="25.0000%" y="773" width="37.5000%" height="15" fill="rgb(210,204,4)" fg:x="6" fg:w="9"/>
      <text x="25.2500%" y="783.50">[[kernel.kallsyms]]</text>
    </g>
    <g>
      <title>perf-exec (8 samples, 33.33%)</title>
      <rect x="62.5000%" y="805" width="33.3333%" height="15" fill="rgb(250,111,27)" fg:x="15" fg:w="8"/>
      <text x="62.7500%" y="815.50">perf-exec</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 33.33%)</title>
      <rect x="62.5000%" y="789" width="33.3333%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="8"/>
      <text x="62.7500%" y="799.50">[[kernel.kallsyms]]</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 33.33%)</title>
      <rect x="62.5000%" y="773" width="33.3333%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="8"/>
      <text x="62.7500%" y="783.50">[[kernel.kallsyms]]</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 33.33%)</title>
      <rect x="62.5000%" y="757" width="33.3333%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="8"/>
      <text x="62.7500%" y="767.50">[[kernel.kallsyms]]</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 33.33%)</title>
      <rect x="62.5000%" y="741" width="33.3333%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="8"/>
      <text x="62.7500%" y="751.50">[[kernel.kallsyms]]</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 33.33%)</title>
      <rect x="62.5000%" y="725" width="33.3333%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="8"/>
      <text x="62.7500%" y="735.50">[[kernel.kallsyms]]</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 33.33%)</title>
      <rect x="62.5000%" y="709" width="33.3333%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="8"/>
      <text x="62.7500%" y="719.50">[[kernel.kallsyms]]</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 33.33%)</title>
      <rect x="62.5000%" y="693" width="33.3333%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="8"/>
      <text x="62.7500%" y="703.50">[[kernel.kallsyms]]</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 33.33%)</title>
      <rect x="62.5000%" y="677" width="33.3333%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="8"/>
      <text x="62.7500%" y="687.50">[[kernel.kallsyms]]</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 33.33%)</title>
      <rect x="62.5000%" y="661" width="33.3333%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="8"/>
      <text x="62.7500%" y="671.50">[[kernel.kallsyms]]</text>
    </g>
    <g>
      <title>all (24 samples, 100%)</title>
      <rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(206,183,37)" fg:x="0" fg:w="24"/>
      <text x="0.2500%" y="831.50"/>
    </g>
    <g>
      <title>Ubuntu22-user-1 (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="805" width="4.1667%" height="15" fill="rgb(240,44,18)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="815.50">Ubunt..</text>
    </g>
    <g>
      <title>__clone3 (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="789" width="4.1667%" height="15" fill="rgb(252,169,8)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="799.50">__clo..</text>
    </g>
    <g>
      <title>start_thread (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="773" width="4.1667%" height="15" fill="rgb(209,148,13)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="783.50">start..</text>
    </g>
    <g>
      <title>std::sys::unix::thread::Thread::new::thread_start (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="757" width="4.1667%" height="15" fill="rgb(215,36,0)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="767.50">std::..</text>
    </g>
    <g>
      <title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="741" width="4.1667%" height="15" fill="rgb(228,202,16)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="751.50">&lt;allo..</text>
    </g>
    <g>
      <title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="725" width="4.1667%" height="15" fill="rgb(228,202,16)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="735.50">&lt;allo..</text>
    </g>
    <g>
      <title>core::ops::function::FnOnce::call_once{{vtable.shim}} (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="709" width="4.1667%" height="15" fill="rgb(218,104,40)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="719.50">core:..</text>
    </g>
    <g>
      <title>std::thread::Builder::spawn_unchecked_::{{closure}} (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="693" width="4.1667%" height="15" fill="rgb(249,4,49)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="703.50">std::..</text>
    </g>
    <g>
      <title>std::panic::catch_unwind (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="677" width="4.1667%" height="15" fill="rgb(216,75,8)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="687.50">std::..</text>
    </g>
    <g>
      <title>std::panicking::try (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="661" width="4.1667%" height="15" fill="rgb(212,61,29)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="671.50">std::..</text>
    </g>
    <g>
      <title>std::panicking::try::do_call (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="645" width="4.1667%" height="15" fill="rgb(232,162,46)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="655.50">std::..</text>
    </g>
    <g>
      <title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="629" width="4.1667%" height="15" fill="rgb(230,83,13)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="639.50">&lt;core..</text>
    </g>
    <g>
      <title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="613" width="4.1667%" height="15" fill="rgb(214,132,49)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="623.50">std::..</text>
    </g>
    <g>
      <title>std::sys_common::backtrace::__rust_begin_short_backtrace (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="597" width="4.1667%" height="15" fill="rgb(210,88,34)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="607.50">std::..</text>
    </g>
    <g>
      <title>s4::processing_loop::{{closure}} (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="581" width="4.1667%" height="15" fill="rgb(245,19,23)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="591.50">s4::p..</text>
    </g>
    <g>
      <title>s4::exec_fileprocessor_thread (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="565" width="4.1667%" height="15" fill="rgb(245,49,27)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="575.50">s4::e..</text>
    </g>
    <g>
      <title>s4::exec_journalprocessor (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="549" width="4.1667%" height="15" fill="rgb(241,41,34)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="559.50">s4::e..</text>
    </g>
    <g>
      <title>s4lib::readers::journalreader::JournalReader::new (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="533" width="4.1667%" height="15" fill="rgb(241,172,36)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="543.50">s4lib..</text>
    </g>
    <g>
      <title>s4lib::libload::systemd_dlopen2::SdJournalHApi::sd_journal_open_files (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="517" width="4.1667%" height="15" fill="rgb(253,109,49)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="527.50">s4lib..</text>
    </g>
    <g>
      <title>sd_journal_open_files (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="501" width="4.1667%" height="15" fill="rgb(235,107,21)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="511.50">sd_jo..</text>
    </g>
    <g>
      <title>[libsystemd.so.0.32.0] (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="485" width="4.1667%" height="15" fill="rgb(211,164,11)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="495.50">[libs..</text>
    </g>
    <g>
      <title>[libsystemd.so.0.32.0] (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="469" width="4.1667%" height="15" fill="rgb(211,164,11)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="479.50">[libs..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="453" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="463.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="437" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="447.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="421" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="431.50">[[ker..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 4.17%)</title>
      <rect x="95.8333%" y="405" width="4.1667%" height="15" fill="rgb(210,204,4)" fg:x="23" fg:w="1"/>
      <text x="96.0833%" y="415.50">[[ker..</text>
    </g>
  </svg>
</svg>
