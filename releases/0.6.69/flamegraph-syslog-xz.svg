<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno" version="1.1" width="1200" height="1126" onload="init(evt)" viewBox="0 0 1200 1126">
  <!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.-->
  <!--NOTES: super_speedy_syslog_searcher 0.6.69; git: 1ad432d; -freq 3000; created 20240321T224448-0700-->
  <defs>
    <linearGradient id="background" y1="0" y2="1" x1="0" x2="0">
      <stop stop-color="#eeeeee" offset="5%"/>
      <stop stop-color="#eeeeb0" offset="95%"/>
    </linearGradient>
  </defs>
  <style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames &gt; *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style>
  <script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    "use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script>
  <rect x="0" y="0" width="100%" height="1126" fill="url(#background)"/>
  <text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph: super_speedy_syslog_searcher 0.6.69; git: 1ad432d; -freq 3000; created 20240321T224448-0700<br/>; s4 ./logs/other/tests/gen-1000-3-foobar.log.xz</text>
  <text id="details" fill="rgb(0,0,0)" x="10" y="1109.00"> </text>
  <text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text>
  <text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text>
  <text id="matched" fill="rgb(0,0,0)" x="1190" y="1109.00"> </text>
  <svg id="frames" x="10" width="1180" total_samples="200">
    <g>
      <title>_dl_start (1 samples, 0.50%)</title>
      <rect x="0.0000%" y="1029" width="0.5000%" height="15" fill="rgb(214,13,30)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="1039.50"/>
    </g>
    <g>
      <title>_dl_start_final (1 samples, 0.50%)</title>
      <rect x="0.0000%" y="1013" width="0.5000%" height="15" fill="rgb(222,52,46)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="1023.50"/>
    </g>
    <g>
      <title>_dl_sysdep_start (1 samples, 0.50%)</title>
      <rect x="0.0000%" y="997" width="0.5000%" height="15" fill="rgb(238,104,49)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="1007.50"/>
    </g>
    <g>
      <title>dl_platform_init (1 samples, 0.50%)</title>
      <rect x="0.0000%" y="981" width="0.5000%" height="15" fill="rgb(230,55,18)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="991.50"/>
    </g>
    <g>
      <title>init_cpu_features (1 samples, 0.50%)</title>
      <rect x="0.0000%" y="965" width="0.5000%" height="15" fill="rgb(226,52,3)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="975.50"/>
    </g>
    <g>
      <title>dl_init_cacheinfo (1 samples, 0.50%)</title>
      <rect x="0.0000%" y="949" width="0.5000%" height="15" fill="rgb(230,195,31)" fg:x="0" fg:w="1"/>
      <text x="0.2500%" y="959.50"/>
    </g>
    <g>
      <title>std::io::Write::write_all (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="725" width="0.5000%" height="15" fill="rgb(251,145,9)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="735.50"/>
    </g>
    <g>
      <title>&lt;termcolor::StandardStream as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="709" width="0.5000%" height="15" fill="rgb(250,180,25)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="719.50"/>
    </g>
    <g>
      <title>&lt;termcolor::LossyStandardStream&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="693" width="0.5000%" height="15" fill="rgb(232,195,18)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="703.50"/>
    </g>
    <g>
      <title>&lt;termcolor::WriterInner&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="677" width="0.5000%" height="15" fill="rgb(206,183,32)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="687.50"/>
    </g>
    <g>
      <title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="661" width="0.5000%" height="15" fill="rgb(215,142,33)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="671.50"/>
    </g>
    <g>
      <title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="645" width="0.5000%" height="15" fill="rgb(232,39,45)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="655.50"/>
    </g>
    <g>
      <title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="629" width="0.5000%" height="15" fill="rgb(216,85,2)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="639.50"/>
    </g>
    <g>
      <title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="613" width="0.5000%" height="15" fill="rgb(226,48,36)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="623.50"/>
    </g>
    <g>
      <title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="597" width="0.5000%" height="15" fill="rgb(237,90,14)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="607.50"/>
    </g>
    <g>
      <title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="581" width="0.5000%" height="15" fill="rgb(239,119,25)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="591.50"/>
    </g>
    <g>
      <title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="565" width="0.5000%" height="15" fill="rgb(236,163,16)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="575.50"/>
    </g>
    <g>
      <title>std::sys::unix::fd::FileDesc::write (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="549" width="0.5000%" height="15" fill="rgb(247,26,49)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="559.50"/>
    </g>
    <g>
      <title>__GI___libc_write (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="533" width="0.5000%" height="15" fill="rgb(232,197,30)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="543.50"/>
    </g>
    <g>
      <title>__GI___libc_write (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="517" width="0.5000%" height="15" fill="rgb(232,197,30)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="527.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="501" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="511.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="485" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="495.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="469" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="479.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="453" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="463.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="437" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="447.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="421" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="431.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="0.5000%" y="405" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="1" fg:w="1"/>
      <text x="0.7500%" y="415.50"/>
    </g>
    <g>
      <title>std::io::Write::write_all (1 samples, 0.50%)</title>
      <rect x="1.0000%" y="661" width="0.5000%" height="15" fill="rgb(251,145,9)" fg:x="2" fg:w="1"/>
      <text x="1.2500%" y="671.50"/>
    </g>
    <g>
      <title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="1.0000%" y="645" width="0.5000%" height="15" fill="rgb(207,158,40)" fg:x="2" fg:w="1"/>
      <text x="1.2500%" y="655.50"/>
    </g>
    <g>
      <title>&lt;termcolor::IoStandardStream as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="1.0000%" y="629" width="0.5000%" height="15" fill="rgb(227,89,5)" fg:x="2" fg:w="1"/>
      <text x="1.2500%" y="639.50"/>
    </g>
    <g>
      <title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="1.0000%" y="613" width="0.5000%" height="15" fill="rgb(215,142,33)" fg:x="2" fg:w="1"/>
      <text x="1.2500%" y="623.50"/>
    </g>
    <g>
      <title>core::slice::&lt;impl [T]&gt;::is_empty (1 samples, 0.50%)</title>
      <rect x="1.5000%" y="613" width="0.5000%" height="15" fill="rgb(217,58,11)" fg:x="3" fg:w="1"/>
      <text x="1.7500%" y="623.50"/>
    </g>
    <g>
      <title>&lt;termcolor::StandardStream as termcolor::WriteColor&gt;::set_color (3 samples, 1.50%)</title>
      <rect x="1.0000%" y="725" width="1.5000%" height="15" fill="rgb(217,221,27)" fg:x="2" fg:w="3"/>
      <text x="1.2500%" y="735.50"/>
    </g>
    <g>
      <title>&lt;termcolor::LossyStandardStream&lt;W&gt; as termcolor::WriteColor&gt;::set_color (3 samples, 1.50%)</title>
      <rect x="1.0000%" y="709" width="1.5000%" height="15" fill="rgb(244,124,31)" fg:x="2" fg:w="3"/>
      <text x="1.2500%" y="719.50"/>
    </g>
    <g>
      <title>&lt;termcolor::WriterInner&lt;W&gt; as termcolor::WriteColor&gt;::set_color (3 samples, 1.50%)</title>
      <rect x="1.0000%" y="693" width="1.5000%" height="15" fill="rgb(234,182,7)" fg:x="2" fg:w="3"/>
      <text x="1.2500%" y="703.50"/>
    </g>
    <g>
      <title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::set_color (3 samples, 1.50%)</title>
      <rect x="1.0000%" y="677" width="1.5000%" height="15" fill="rgb(208,123,3)" fg:x="2" fg:w="3"/>
      <text x="1.2500%" y="687.50"/>
    </g>
    <g>
      <title>&lt;termcolor::Ansi&lt;W&gt; as termcolor::WriteColor&gt;::reset (2 samples, 1.00%)</title>
      <rect x="1.5000%" y="661" width="1.0000%" height="15" fill="rgb(226,70,2)" fg:x="3" fg:w="2"/>
      <text x="1.7500%" y="671.50"/>
    </g>
    <g>
      <title>termcolor::Ansi&lt;W&gt;::write_str (2 samples, 1.00%)</title>
      <rect x="1.5000%" y="645" width="1.0000%" height="15" fill="rgb(232,27,51)" fg:x="3" fg:w="2"/>
      <text x="1.7500%" y="655.50"/>
    </g>
    <g>
      <title>std::io::Write::write_all (2 samples, 1.00%)</title>
      <rect x="1.5000%" y="629" width="1.0000%" height="15" fill="rgb(251,145,9)" fg:x="3" fg:w="2"/>
      <text x="1.7500%" y="639.50"/>
    </g>
    <g>
      <title>&lt;termcolor::Ansi&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="2.0000%" y="613" width="0.5000%" height="15" fill="rgb(207,158,40)" fg:x="4" fg:w="1"/>
      <text x="2.2500%" y="623.50"/>
    </g>
    <g>
      <title>&lt;termcolor::IoStandardStream as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="2.0000%" y="597" width="0.5000%" height="15" fill="rgb(227,89,5)" fg:x="4" fg:w="1"/>
      <text x="2.2500%" y="607.50"/>
    </g>
    <g>
      <title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="2.0000%" y="581" width="0.5000%" height="15" fill="rgb(215,142,33)" fg:x="4" fg:w="1"/>
      <text x="2.2500%" y="591.50"/>
    </g>
    <g>
      <title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="2.0000%" y="565" width="0.5000%" height="15" fill="rgb(232,39,45)" fg:x="4" fg:w="1"/>
      <text x="2.2500%" y="575.50"/>
    </g>
    <g>
      <title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="2.0000%" y="549" width="0.5000%" height="15" fill="rgb(216,85,2)" fg:x="4" fg:w="1"/>
      <text x="2.2500%" y="559.50"/>
    </g>
    <g>
      <title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="2.0000%" y="533" width="0.5000%" height="15" fill="rgb(226,48,36)" fg:x="4" fg:w="1"/>
      <text x="2.2500%" y="543.50"/>
    </g>
    <g>
      <title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="2.0000%" y="517" width="0.5000%" height="15" fill="rgb(237,90,14)" fg:x="4" fg:w="1"/>
      <text x="2.2500%" y="527.50"/>
    </g>
    <g>
      <title>std::sys_common::memchr::memrchr (1 samples, 0.50%)</title>
      <rect x="2.0000%" y="501" width="0.5000%" height="15" fill="rgb(232,88,32)" fg:x="4" fg:w="1"/>
      <text x="2.2500%" y="511.50"/>
    </g>
    <g>
      <title>std::sys::unix::memchr::memrchr (1 samples, 0.50%)</title>
      <rect x="2.0000%" y="485" width="0.5000%" height="15" fill="rgb(223,76,45)" fg:x="4" fg:w="1"/>
      <text x="2.2500%" y="495.50"/>
    </g>
    <g>
      <title>std::sys::unix::memchr::memrchr::memrchr_specific (1 samples, 0.50%)</title>
      <rect x="2.0000%" y="469" width="0.5000%" height="15" fill="rgb(241,110,16)" fg:x="4" fg:w="1"/>
      <text x="2.2500%" y="479.50"/>
    </g>
    <g>
      <title>__memrchr_evex (1 samples, 0.50%)</title>
      <rect x="2.0000%" y="453" width="0.5000%" height="15" fill="rgb(249,31,17)" fg:x="4" fg:w="1"/>
      <text x="2.2500%" y="463.50"/>
    </g>
    <g>
      <title>&lt;termcolor::StandardStream as std::io::Write&gt;::flush (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="725" width="0.5000%" height="15" fill="rgb(214,129,27)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="735.50"/>
    </g>
    <g>
      <title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::flush (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="709" width="0.5000%" height="15" fill="rgb(244,108,51)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="719.50"/>
    </g>
    <g>
      <title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::flush (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="693" width="0.5000%" height="15" fill="rgb(224,207,51)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="703.50"/>
    </g>
    <g>
      <title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::flush (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="677" width="0.5000%" height="15" fill="rgb(213,149,3)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="687.50"/>
    </g>
    <g>
      <title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::flush (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="661" width="0.5000%" height="15" fill="rgb(212,213,13)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="671.50"/>
    </g>
    <g>
      <title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::flush (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="645" width="0.5000%" height="15" fill="rgb(231,193,47)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="655.50"/>
    </g>
    <g>
      <title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="629" width="0.5000%" height="15" fill="rgb(240,178,54)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="639.50"/>
    </g>
    <g>
      <title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="613" width="0.5000%" height="15" fill="rgb(239,119,25)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="623.50"/>
    </g>
    <g>
      <title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="597" width="0.5000%" height="15" fill="rgb(236,163,16)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="607.50"/>
    </g>
    <g>
      <title>std::sys::unix::fd::FileDesc::write (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="581" width="0.5000%" height="15" fill="rgb(247,26,49)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="591.50"/>
    </g>
    <g>
      <title>__GI___libc_write (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="565" width="0.5000%" height="15" fill="rgb(232,197,30)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="575.50"/>
    </g>
    <g>
      <title>__GI___libc_write (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="549" width="0.5000%" height="15" fill="rgb(232,197,30)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="559.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="533" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="543.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="517" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="527.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="501" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="511.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="485" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="495.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="469" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="479.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="453" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="463.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="2.5000%" y="437" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="5" fg:w="1"/>
      <text x="2.7500%" y="447.50"/>
    </g>
    <g>
      <title>s4lib::printer::printers::PrinterLogMessage::print_sysline (6 samples, 3.00%)</title>
      <rect x="0.5000%" y="757" width="3.0000%" height="15" fill="rgb(244,86,43)" fg:x="1" fg:w="6"/>
      <text x="0.7500%" y="767.50">s4l..</text>
    </g>
    <g>
      <title>s4lib::printer::printers::PrinterLogMessage::print_sysline_color (6 samples, 3.00%)</title>
      <rect x="0.5000%" y="741" width="3.0000%" height="15" fill="rgb(253,154,21)" fg:x="1" fg:w="6"/>
      <text x="0.7500%" y="751.50">s4l..</text>
    </g>
    <g>
      <title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.50%)</title>
      <rect x="3.0000%" y="725" width="0.5000%" height="15" fill="rgb(236,210,2)" fg:x="6" fg:w="1"/>
      <text x="3.2500%" y="735.50"/>
    </g>
    <g>
      <title>core::sync::atomic::spin_loop_hint (4 samples, 2.00%)</title>
      <rect x="3.5000%" y="581" width="2.0000%" height="15" fill="rgb(242,61,0)" fg:x="7" fg:w="4"/>
      <text x="3.7500%" y="591.50">c..</text>
    </g>
    <g>
      <title>core::hint::spin_loop (4 samples, 2.00%)</title>
      <rect x="3.5000%" y="565" width="2.0000%" height="15" fill="rgb(241,144,6)" fg:x="7" fg:w="4"/>
      <text x="3.7500%" y="575.50">c..</text>
    </g>
    <g>
      <title>core::core_arch::x86::sse2::_mm_pause (4 samples, 2.00%)</title>
      <rect x="3.5000%" y="549" width="2.0000%" height="15" fill="rgb(213,129,2)" fg:x="7" fg:w="4"/>
      <text x="3.7500%" y="559.50">c..</text>
    </g>
    <g>
      <title>_start (13 samples, 6.50%)</title>
      <rect x="0.0000%" y="1045" width="6.5000%" height="15" fill="rgb(210,219,27)" fg:x="0" fg:w="13"/>
      <text x="0.2500%" y="1055.50">_start</text>
    </g>
    <g>
      <title>__libc_start_main_impl (12 samples, 6.00%)</title>
      <rect x="0.5000%" y="1029" width="6.0000%" height="15" fill="rgb(228,214,28)" fg:x="1" fg:w="12"/>
      <text x="0.7500%" y="1039.50">__libc_s..</text>
    </g>
    <g>
      <title>__libc_start_call_main (12 samples, 6.00%)</title>
      <rect x="0.5000%" y="1013" width="6.0000%" height="15" fill="rgb(249,173,1)" fg:x="1" fg:w="12"/>
      <text x="0.7500%" y="1023.50">__libc_s..</text>
    </g>
    <g>
      <title>main (12 samples, 6.00%)</title>
      <rect x="0.5000%" y="997" width="6.0000%" height="15" fill="rgb(238,28,47)" fg:x="1" fg:w="12"/>
      <text x="0.7500%" y="1007.50">main</text>
    </g>
    <g>
      <title>std::rt::lang_start_internal (12 samples, 6.00%)</title>
      <rect x="0.5000%" y="981" width="6.0000%" height="15" fill="rgb(240,177,54)" fg:x="1" fg:w="12"/>
      <text x="0.7500%" y="991.50">std::rt:..</text>
    </g>
    <g>
      <title>std::panic::catch_unwind (12 samples, 6.00%)</title>
      <rect x="0.5000%" y="965" width="6.0000%" height="15" fill="rgb(216,75,8)" fg:x="1" fg:w="12"/>
      <text x="0.7500%" y="975.50">std::pan..</text>
    </g>
    <g>
      <title>std::panicking::try (12 samples, 6.00%)</title>
      <rect x="0.5000%" y="949" width="6.0000%" height="15" fill="rgb(212,61,29)" fg:x="1" fg:w="12"/>
      <text x="0.7500%" y="959.50">std::pan..</text>
    </g>
    <g>
      <title>std::panicking::try::do_call (12 samples, 6.00%)</title>
      <rect x="0.5000%" y="933" width="6.0000%" height="15" fill="rgb(232,162,46)" fg:x="1" fg:w="12"/>
      <text x="0.7500%" y="943.50">std::pan..</text>
    </g>
    <g>
      <title>std::rt::lang_start_internal::{{closure}} (12 samples, 6.00%)</title>
      <rect x="0.5000%" y="917" width="6.0000%" height="15" fill="rgb(219,15,13)" fg:x="1" fg:w="12"/>
      <text x="0.7500%" y="927.50">std::rt:..</text>
    </g>
    <g>
      <title>std::panic::catch_unwind (12 samples, 6.00%)</title>
      <rect x="0.5000%" y="901" width="6.0000%" height="15" fill="rgb(216,75,8)" fg:x="1" fg:w="12"/>
      <text x="0.7500%" y="911.50">std::pan..</text>
    </g>
    <g>
      <title>std::panicking::try (12 samples, 6.00%)</title>
      <rect x="0.5000%" y="885" width="6.0000%" height="15" fill="rgb(212,61,29)" fg:x="1" fg:w="12"/>
      <text x="0.7500%" y="895.50">std::pan..</text>
    </g>
    <g>
      <title>std::panicking::try::do_call (12 samples, 6.00%)</title>
      <rect x="0.5000%" y="869" width="6.0000%" height="15" fill="rgb(232,162,46)" fg:x="1" fg:w="12"/>
      <text x="0.7500%" y="879.50">std::pan..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (12 samples, 6.00%)</title>
      <rect x="0.5000%" y="853" width="6.0000%" height="15" fill="rgb(212,73,0)" fg:x="1" fg:w="12"/>
      <text x="0.7500%" y="863.50">core::op..</text>
    </g>
    <g>
      <title>std::rt::lang_start::{{closure}} (12 samples, 6.00%)</title>
      <rect x="0.5000%" y="837" width="6.0000%" height="15" fill="rgb(213,78,9)" fg:x="1" fg:w="12"/>
      <text x="0.7500%" y="847.50">std::rt:..</text>
    </g>
    <g>
      <title>std::sys_common::backtrace::__rust_begin_short_backtrace (12 samples, 6.00%)</title>
      <rect x="0.5000%" y="821" width="6.0000%" height="15" fill="rgb(210,88,34)" fg:x="1" fg:w="12"/>
      <text x="0.7500%" y="831.50">std::sys..</text>
    </g>
    <g>
      <title>core::ops::function::FnOnce::call_once (12 samples, 6.00%)</title>
      <rect x="0.5000%" y="805" width="6.0000%" height="15" fill="rgb(210,80,10)" fg:x="1" fg:w="12"/>
      <text x="0.7500%" y="815.50">core::op..</text>
    </g>
    <g>
      <title>s4::main (12 samples, 6.00%)</title>
      <rect x="0.5000%" y="789" width="6.0000%" height="15" fill="rgb(221,151,31)" fg:x="1" fg:w="12"/>
      <text x="0.7500%" y="799.50">s4::main</text>
    </g>
    <g>
      <title>s4::processing_loop (12 samples, 6.00%)</title>
      <rect x="0.5000%" y="773" width="6.0000%" height="15" fill="rgb(233,182,14)" fg:x="1" fg:w="12"/>
      <text x="0.7500%" y="783.50">s4::proc..</text>
    </g>
    <g>
      <title>s4::processing_loop::recv_many_chan (6 samples, 3.00%)</title>
      <rect x="3.5000%" y="757" width="3.0000%" height="15" fill="rgb(253,70,6)" fg:x="7" fg:w="6"/>
      <text x="3.7500%" y="767.50">s4:..</text>
    </g>
    <g>
      <title>crossbeam_channel::select::Select::select (6 samples, 3.00%)</title>
      <rect x="3.5000%" y="741" width="3.0000%" height="15" fill="rgb(218,151,27)" fg:x="7" fg:w="6"/>
      <text x="3.7500%" y="751.50">cro..</text>
    </g>
    <g>
      <title>crossbeam_channel::select::select (6 samples, 3.00%)</title>
      <rect x="3.5000%" y="725" width="3.0000%" height="15" fill="rgb(210,225,20)" fg:x="7" fg:w="6"/>
      <text x="3.7500%" y="735.50">cro..</text>
    </g>
    <g>
      <title>crossbeam_channel::select::run_select (6 samples, 3.00%)</title>
      <rect x="3.5000%" y="709" width="3.0000%" height="15" fill="rgb(238,41,29)" fg:x="7" fg:w="6"/>
      <text x="3.7500%" y="719.50">cro..</text>
    </g>
    <g>
      <title>crossbeam_channel::context::Context::with (6 samples, 3.00%)</title>
      <rect x="3.5000%" y="693" width="3.0000%" height="15" fill="rgb(249,203,42)" fg:x="7" fg:w="6"/>
      <text x="3.7500%" y="703.50">cro..</text>
    </g>
    <g>
      <title>std::thread::local::LocalKey&lt;T&gt;::try_with (6 samples, 3.00%)</title>
      <rect x="3.5000%" y="677" width="3.0000%" height="15" fill="rgb(235,136,14)" fg:x="7" fg:w="6"/>
      <text x="3.7500%" y="687.50">std..</text>
    </g>
    <g>
      <title>crossbeam_channel::context::Context::with::{{closure}} (6 samples, 3.00%)</title>
      <rect x="3.5000%" y="661" width="3.0000%" height="15" fill="rgb(251,136,16)" fg:x="7" fg:w="6"/>
      <text x="3.7500%" y="671.50">cro..</text>
    </g>
    <g>
      <title>crossbeam_channel::context::Context::with::{{closure}} (6 samples, 3.00%)</title>
      <rect x="3.5000%" y="645" width="3.0000%" height="15" fill="rgb(251,136,16)" fg:x="7" fg:w="6"/>
      <text x="3.7500%" y="655.50">cro..</text>
    </g>
    <g>
      <title>crossbeam_channel::select::run_select::{{closure}} (6 samples, 3.00%)</title>
      <rect x="3.5000%" y="629" width="3.0000%" height="15" fill="rgb(241,20,29)" fg:x="7" fg:w="6"/>
      <text x="3.7500%" y="639.50">cro..</text>
    </g>
    <g>
      <title>crossbeam_channel::context::Context::wait_until (6 samples, 3.00%)</title>
      <rect x="3.5000%" y="613" width="3.0000%" height="15" fill="rgb(218,28,27)" fg:x="7" fg:w="6"/>
      <text x="3.7500%" y="623.50">cro..</text>
    </g>
    <g>
      <title>crossbeam_utils::backoff::Backoff::snooze (6 samples, 3.00%)</title>
      <rect x="3.5000%" y="597" width="3.0000%" height="15" fill="rgb(224,200,25)" fg:x="7" fg:w="6"/>
      <text x="3.7500%" y="607.50">cro..</text>
    </g>
    <g>
      <title>__GI___sched_yield (2 samples, 1.00%)</title>
      <rect x="5.5000%" y="581" width="1.0000%" height="15" fill="rgb(225,197,10)" fg:x="11" fg:w="2"/>
      <text x="5.7500%" y="591.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (2 samples, 1.00%)</title>
      <rect x="5.5000%" y="565" width="1.0000%" height="15" fill="rgb(210,204,4)" fg:x="11" fg:w="2"/>
      <text x="5.7500%" y="575.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (2 samples, 1.00%)</title>
      <rect x="5.5000%" y="549" width="1.0000%" height="15" fill="rgb(210,204,4)" fg:x="11" fg:w="2"/>
      <text x="5.7500%" y="559.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (2 samples, 1.00%)</title>
      <rect x="5.5000%" y="533" width="1.0000%" height="15" fill="rgb(210,204,4)" fg:x="11" fg:w="2"/>
      <text x="5.7500%" y="543.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (2 samples, 1.00%)</title>
      <rect x="5.5000%" y="517" width="1.0000%" height="15" fill="rgb(210,204,4)" fg:x="11" fg:w="2"/>
      <text x="5.7500%" y="527.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (2 samples, 1.00%)</title>
      <rect x="5.5000%" y="501" width="1.0000%" height="15" fill="rgb(210,204,4)" fg:x="11" fg:w="2"/>
      <text x="5.7500%" y="511.50"/>
    </g>
    <g>
      <title>__GI___libc_write (1 samples, 0.50%)</title>
      <rect x="6.5000%" y="1045" width="0.5000%" height="15" fill="rgb(232,197,30)" fg:x="13" fg:w="1"/>
      <text x="6.7500%" y="1055.50"/>
    </g>
    <g>
      <title>__GI___libc_write (1 samples, 0.50%)</title>
      <rect x="6.5000%" y="1029" width="0.5000%" height="15" fill="rgb(232,197,30)" fg:x="13" fg:w="1"/>
      <text x="6.7500%" y="1039.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="6.5000%" y="1013" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="13" fg:w="1"/>
      <text x="6.7500%" y="1023.50"/>
    </g>
    <g>
      <title>[unknown] (1 samples, 0.50%)</title>
      <rect x="7.0000%" y="1045" width="0.5000%" height="15" fill="rgb(227,28,50)" fg:x="14" fg:w="1"/>
      <text x="7.2500%" y="1055.50"/>
    </g>
    <g>
      <title>s4::cli_process_args (1 samples, 0.50%)</title>
      <rect x="7.0000%" y="1029" width="0.5000%" height="15" fill="rgb(217,50,44)" fg:x="14" fg:w="1"/>
      <text x="7.2500%" y="1039.50"/>
    </g>
    <g>
      <title>clap_builder::derive::Parser::parse (1 samples, 0.50%)</title>
      <rect x="7.0000%" y="1013" width="0.5000%" height="15" fill="rgb(252,59,20)" fg:x="14" fg:w="1"/>
      <text x="7.2500%" y="1023.50"/>
    </g>
    <g>
      <title>&lt;s4::CLI_Args as clap_builder::derive::CommandFactory&gt;::command (1 samples, 0.50%)</title>
      <rect x="7.0000%" y="997" width="0.5000%" height="15" fill="rgb(237,136,5)" fg:x="14" fg:w="1"/>
      <text x="7.2500%" y="1007.50"/>
    </g>
    <g>
      <title>&lt;s4::CLI_Args as clap_builder::derive::Args&gt;::augment_args (1 samples, 0.50%)</title>
      <rect x="7.0000%" y="981" width="0.5000%" height="15" fill="rgb(230,145,47)" fg:x="14" fg:w="1"/>
      <text x="7.2500%" y="991.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="7.0000%" y="965" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="14" fg:w="1"/>
      <text x="7.2500%" y="975.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="7.0000%" y="949" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="14" fg:w="1"/>
      <text x="7.2500%" y="959.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="7.0000%" y="933" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="14" fg:w="1"/>
      <text x="7.2500%" y="943.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="7.0000%" y="917" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="14" fg:w="1"/>
      <text x="7.2500%" y="927.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="7.0000%" y="901" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="14" fg:w="1"/>
      <text x="7.2500%" y="911.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="7.0000%" y="885" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="14" fg:w="1"/>
      <text x="7.2500%" y="895.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="7.0000%" y="869" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="14" fg:w="1"/>
      <text x="7.2500%" y="879.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="7.0000%" y="853" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="14" fg:w="1"/>
      <text x="7.2500%" y="863.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="7.0000%" y="837" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="14" fg:w="1"/>
      <text x="7.2500%" y="847.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="7.0000%" y="821" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="14" fg:w="1"/>
      <text x="7.2500%" y="831.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="7.5000%" y="853" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="1"/>
      <text x="7.7500%" y="863.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (3 samples, 1.50%)</title>
      <rect x="7.5000%" y="869" width="1.5000%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="3"/>
      <text x="7.7500%" y="879.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (4 samples, 2.00%)</title>
      <rect x="7.5000%" y="901" width="2.0000%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="4"/>
      <text x="7.7500%" y="911.50">[..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (4 samples, 2.00%)</title>
      <rect x="7.5000%" y="885" width="2.0000%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="4"/>
      <text x="7.7500%" y="895.50">[..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (5 samples, 2.50%)</title>
      <rect x="7.5000%" y="949" width="2.5000%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="5"/>
      <text x="7.7500%" y="959.50">[[..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (5 samples, 2.50%)</title>
      <rect x="7.5000%" y="933" width="2.5000%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="5"/>
      <text x="7.7500%" y="943.50">[[..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (5 samples, 2.50%)</title>
      <rect x="7.5000%" y="917" width="2.5000%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="5"/>
      <text x="7.7500%" y="927.50">[[..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (6 samples, 3.00%)</title>
      <rect x="7.5000%" y="981" width="3.0000%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="6"/>
      <text x="7.7500%" y="991.50">[[k..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (6 samples, 3.00%)</title>
      <rect x="7.5000%" y="965" width="3.0000%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="6"/>
      <text x="7.7500%" y="975.50">[[k..</text>
    </g>
    <g>
      <title>s4 (28 samples, 14.00%)</title>
      <rect x="0.0000%" y="1061" width="14.0000%" height="15" fill="rgb(230,7,27)" fg:x="0" fg:w="28"/>
      <text x="0.2500%" y="1071.50">s4</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (13 samples, 6.50%)</title>
      <rect x="7.5000%" y="1045" width="6.5000%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="13"/>
      <text x="7.7500%" y="1055.50">[[kernel...</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (13 samples, 6.50%)</title>
      <rect x="7.5000%" y="1029" width="6.5000%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="13"/>
      <text x="7.7500%" y="1039.50">[[kernel...</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (13 samples, 6.50%)</title>
      <rect x="7.5000%" y="1013" width="6.5000%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="13"/>
      <text x="7.7500%" y="1023.50">[[kernel...</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (13 samples, 6.50%)</title>
      <rect x="7.5000%" y="997" width="6.5000%" height="15" fill="rgb(210,204,4)" fg:x="15" fg:w="13"/>
      <text x="7.7500%" y="1007.50">[[kernel...</text>
    </g>
    <g>
      <title>perf-exec (8 samples, 4.00%)</title>
      <rect x="14.0000%" y="1061" width="4.0000%" height="15" fill="rgb(250,111,27)" fg:x="28" fg:w="8"/>
      <text x="14.2500%" y="1071.50">perf..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 4.00%)</title>
      <rect x="14.0000%" y="1045" width="4.0000%" height="15" fill="rgb(210,204,4)" fg:x="28" fg:w="8"/>
      <text x="14.2500%" y="1055.50">[[ke..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 4.00%)</title>
      <rect x="14.0000%" y="1029" width="4.0000%" height="15" fill="rgb(210,204,4)" fg:x="28" fg:w="8"/>
      <text x="14.2500%" y="1039.50">[[ke..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 4.00%)</title>
      <rect x="14.0000%" y="1013" width="4.0000%" height="15" fill="rgb(210,204,4)" fg:x="28" fg:w="8"/>
      <text x="14.2500%" y="1023.50">[[ke..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 4.00%)</title>
      <rect x="14.0000%" y="997" width="4.0000%" height="15" fill="rgb(210,204,4)" fg:x="28" fg:w="8"/>
      <text x="14.2500%" y="1007.50">[[ke..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 4.00%)</title>
      <rect x="14.0000%" y="981" width="4.0000%" height="15" fill="rgb(210,204,4)" fg:x="28" fg:w="8"/>
      <text x="14.2500%" y="991.50">[[ke..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 4.00%)</title>
      <rect x="14.0000%" y="965" width="4.0000%" height="15" fill="rgb(210,204,4)" fg:x="28" fg:w="8"/>
      <text x="14.2500%" y="975.50">[[ke..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 4.00%)</title>
      <rect x="14.0000%" y="949" width="4.0000%" height="15" fill="rgb(210,204,4)" fg:x="28" fg:w="8"/>
      <text x="14.2500%" y="959.50">[[ke..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 4.00%)</title>
      <rect x="14.0000%" y="933" width="4.0000%" height="15" fill="rgb(210,204,4)" fg:x="28" fg:w="8"/>
      <text x="14.2500%" y="943.50">[[ke..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (8 samples, 4.00%)</title>
      <rect x="14.0000%" y="917" width="4.0000%" height="15" fill="rgb(210,204,4)" fg:x="28" fg:w="8"/>
      <text x="14.2500%" y="927.50">[[ke..</text>
    </g>
    <g>
      <title>&lt;regex_automata::meta::strategy::ReverseInner as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="485" width="0.5000%" height="15" fill="rgb(245,40,36)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="495.50"/>
    </g>
    <g>
      <title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="469" width="0.5000%" height="15" fill="rgb(250,2,44)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="479.50"/>
    </g>
    <g>
      <title>regex_automata::meta::wrappers::PikeVM::create_cache (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="453" width="0.5000%" height="15" fill="rgb(217,147,1)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="463.50"/>
    </g>
    <g>
      <title>regex_automata::meta::wrappers::PikeVMCache::new (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="437" width="0.5000%" height="15" fill="rgb(211,6,33)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="447.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="421" width="0.5000%" height="15" fill="rgb(211,33,34)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="431.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::pikevm::Cache::new (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="405" width="0.5000%" height="15" fill="rgb(244,199,14)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="415.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="389" width="0.5000%" height="15" fill="rgb(220,13,3)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="399.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="373" width="0.5000%" height="15" fill="rgb(243,194,33)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="383.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::pikevm::SlotTable::reset (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="357" width="0.5000%" height="15" fill="rgb(226,221,20)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="367.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::resize (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="341" width="0.5000%" height="15" fill="rgb(249,199,35)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="351.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="325" width="0.5000%" height="15" fill="rgb(216,52,5)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="335.50"/>
    </g>
    <g>
      <title>core::ptr::write (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="309" width="0.5000%" height="15" fill="rgb(209,143,44)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="319.50"/>
    </g>
    <g>
      <title>__memset_avx512_unaligned_erms (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="293" width="0.5000%" height="15" fill="rgb(240,145,53)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="303.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="277" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="287.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="261" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="271.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="245" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="255.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="229" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="239.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="213" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="223.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="197" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="207.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="181" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="191.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="165" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="175.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="18.0000%" y="149" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="36" fg:w="1"/>
      <text x="18.2500%" y="159.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="18.5000%" y="293" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="37" fg:w="1"/>
      <text x="18.7500%" y="303.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="18.5000%" y="277" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="37" fg:w="1"/>
      <text x="18.7500%" y="287.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="18.5000%" y="261" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="37" fg:w="1"/>
      <text x="18.7500%" y="271.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="18.5000%" y="245" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="37" fg:w="1"/>
      <text x="18.7500%" y="255.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="18.5000%" y="229" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="37" fg:w="1"/>
      <text x="18.7500%" y="239.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="18.5000%" y="213" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="37" fg:w="1"/>
      <text x="18.7500%" y="223.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="18.5000%" y="197" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="37" fg:w="1"/>
      <text x="18.7500%" y="207.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="18.5000%" y="181" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="37" fg:w="1"/>
      <text x="18.7500%" y="191.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="18.5000%" y="165" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="37" fg:w="1"/>
      <text x="18.7500%" y="175.50"/>
    </g>
    <g>
      <title>regex_automata::util::pool::Pool&lt;T,F&gt;::get (3 samples, 1.50%)</title>
      <rect x="18.0000%" y="565" width="1.5000%" height="15" fill="rgb(210,26,34)" fg:x="36" fg:w="3"/>
      <text x="18.2500%" y="575.50"/>
    </g>
    <g>
      <title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get (3 samples, 1.50%)</title>
      <rect x="18.0000%" y="549" width="1.5000%" height="15" fill="rgb(245,192,35)" fg:x="36" fg:w="3"/>
      <text x="18.2500%" y="559.50"/>
    </g>
    <g>
      <title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 1.50%)</title>
      <rect x="18.0000%" y="533" width="1.5000%" height="15" fill="rgb(239,82,48)" fg:x="36" fg:w="3"/>
      <text x="18.2500%" y="543.50"/>
    </g>
    <g>
      <title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::Fn&lt;Args&gt;&gt;::call (3 samples, 1.50%)</title>
      <rect x="18.0000%" y="517" width="1.5000%" height="15" fill="rgb(249,36,21)" fg:x="36" fg:w="3"/>
      <text x="18.2500%" y="527.50"/>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 1.50%)</title>
      <rect x="18.0000%" y="501" width="1.5000%" height="15" fill="rgb(234,153,14)" fg:x="36" fg:w="3"/>
      <text x="18.2500%" y="511.50"/>
    </g>
    <g>
      <title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 1.00%)</title>
      <rect x="18.5000%" y="485" width="1.0000%" height="15" fill="rgb(250,2,44)" fg:x="37" fg:w="2"/>
      <text x="18.7500%" y="495.50"/>
    </g>
    <g>
      <title>regex_automata::meta::wrappers::PikeVM::create_cache (2 samples, 1.00%)</title>
      <rect x="18.5000%" y="469" width="1.0000%" height="15" fill="rgb(217,147,1)" fg:x="37" fg:w="2"/>
      <text x="18.7500%" y="479.50"/>
    </g>
    <g>
      <title>regex_automata::meta::wrappers::PikeVMCache::new (2 samples, 1.00%)</title>
      <rect x="18.5000%" y="453" width="1.0000%" height="15" fill="rgb(211,6,33)" fg:x="37" fg:w="2"/>
      <text x="18.7500%" y="463.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 1.00%)</title>
      <rect x="18.5000%" y="437" width="1.0000%" height="15" fill="rgb(211,33,34)" fg:x="37" fg:w="2"/>
      <text x="18.7500%" y="447.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::pikevm::Cache::new (2 samples, 1.00%)</title>
      <rect x="18.5000%" y="421" width="1.0000%" height="15" fill="rgb(244,199,14)" fg:x="37" fg:w="2"/>
      <text x="18.7500%" y="431.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (2 samples, 1.00%)</title>
      <rect x="18.5000%" y="405" width="1.0000%" height="15" fill="rgb(220,13,3)" fg:x="37" fg:w="2"/>
      <text x="18.7500%" y="415.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 1.00%)</title>
      <rect x="18.5000%" y="389" width="1.0000%" height="15" fill="rgb(243,194,33)" fg:x="37" fg:w="2"/>
      <text x="18.7500%" y="399.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::pikevm::SlotTable::reset (2 samples, 1.00%)</title>
      <rect x="18.5000%" y="373" width="1.0000%" height="15" fill="rgb(226,221,20)" fg:x="37" fg:w="2"/>
      <text x="18.7500%" y="383.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::resize (2 samples, 1.00%)</title>
      <rect x="18.5000%" y="357" width="1.0000%" height="15" fill="rgb(249,199,35)" fg:x="37" fg:w="2"/>
      <text x="18.7500%" y="367.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2 samples, 1.00%)</title>
      <rect x="18.5000%" y="341" width="1.0000%" height="15" fill="rgb(216,52,5)" fg:x="37" fg:w="2"/>
      <text x="18.7500%" y="351.50"/>
    </g>
    <g>
      <title>core::ptr::write (2 samples, 1.00%)</title>
      <rect x="18.5000%" y="325" width="1.0000%" height="15" fill="rgb(209,143,44)" fg:x="37" fg:w="2"/>
      <text x="18.7500%" y="335.50"/>
    </g>
    <g>
      <title>__memset_avx512_unaligned_erms (2 samples, 1.00%)</title>
      <rect x="18.5000%" y="309" width="1.0000%" height="15" fill="rgb(240,145,53)" fg:x="37" fg:w="2"/>
      <text x="18.7500%" y="319.50"/>
    </g>
    <g>
      <title>regex::regex::bytes::Regex::captures (4 samples, 2.00%)</title>
      <rect x="18.0000%" y="645" width="2.0000%" height="15" fill="rgb(233,29,12)" fg:x="36" fg:w="4"/>
      <text x="18.2500%" y="655.50">r..</text>
    </g>
    <g>
      <title>regex::regex::bytes::Regex::captures_at (4 samples, 2.00%)</title>
      <rect x="18.0000%" y="629" width="2.0000%" height="15" fill="rgb(207,96,18)" fg:x="36" fg:w="4"/>
      <text x="18.2500%" y="639.50">r..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Regex::captures (4 samples, 2.00%)</title>
      <rect x="18.0000%" y="613" width="2.0000%" height="15" fill="rgb(219,198,6)" fg:x="36" fg:w="4"/>
      <text x="18.2500%" y="623.50">r..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Regex::search_captures (4 samples, 2.00%)</title>
      <rect x="18.0000%" y="597" width="2.0000%" height="15" fill="rgb(212,211,21)" fg:x="36" fg:w="4"/>
      <text x="18.2500%" y="607.50">r..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Regex::search_slots (4 samples, 2.00%)</title>
      <rect x="18.0000%" y="581" width="2.0000%" height="15" fill="rgb(243,12,43)" fg:x="36" fg:w="4"/>
      <text x="18.2500%" y="591.50">r..</text>
    </g>
    <g>
      <title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="565" width="0.5000%" height="15" fill="rgb(221,222,32)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="575.50"/>
    </g>
    <g>
      <title>regex_automata::meta::strategy::Core::try_search_mayfail (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="549" width="0.5000%" height="15" fill="rgb(244,122,16)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="559.50"/>
    </g>
    <g>
      <title>regex_automata::meta::wrappers::HybridEngine::try_search (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="533" width="0.5000%" height="15" fill="rgb(216,227,19)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="543.50"/>
    </g>
    <g>
      <title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="517" width="0.5000%" height="15" fill="rgb(234,124,32)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="527.50"/>
    </g>
    <g>
      <title>regex_automata::hybrid::dfa::DFA::try_search_fwd (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="501" width="0.5000%" height="15" fill="rgb(209,194,30)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="511.50"/>
    </g>
    <g>
      <title>regex_automata::hybrid::search::find_fwd (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="485" width="0.5000%" height="15" fill="rgb(254,161,34)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="495.50"/>
    </g>
    <g>
      <title>regex_automata::hybrid::search::find_fwd_imp (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="469" width="0.5000%" height="15" fill="rgb(246,79,15)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="479.50"/>
    </g>
    <g>
      <title>regex_automata::hybrid::dfa::DFA::next_state (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="453" width="0.5000%" height="15" fill="rgb(223,122,32)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="463.50"/>
    </g>
    <g>
      <title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="437" width="0.5000%" height="15" fill="rgb(233,228,11)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="447.50"/>
    </g>
    <g>
      <title>regex_automata::hybrid::dfa::Lazy::add_builder_state (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="421" width="0.5000%" height="15" fill="rgb(235,83,32)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="431.50"/>
    </g>
    <g>
      <title>regex_automata::hybrid::dfa::Lazy::add_state (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="405" width="0.5000%" height="15" fill="rgb(237,112,10)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="415.50"/>
    </g>
    <g>
      <title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="389" width="0.5000%" height="15" fill="rgb(237,8,32)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="399.50"/>
    </g>
    <g>
      <title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="373" width="0.5000%" height="15" fill="rgb(228,156,5)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="383.50"/>
    </g>
    <g>
      <title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="357" width="0.5000%" height="15" fill="rgb(207,42,35)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="367.50"/>
    </g>
    <g>
      <title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="341" width="0.5000%" height="15" fill="rgb(224,220,10)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="351.50"/>
    </g>
    <g>
      <title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="325" width="0.5000%" height="15" fill="rgb(217,9,51)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="335.50"/>
    </g>
    <g>
      <title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="309" width="0.5000%" height="15" fill="rgb(234,23,10)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="319.50"/>
    </g>
    <g>
      <title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="293" width="0.5000%" height="15" fill="rgb(227,26,12)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="303.50"/>
    </g>
    <g>
      <title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="277" width="0.5000%" height="15" fill="rgb(210,50,30)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="287.50"/>
    </g>
    <g>
      <title>hashbrown::map::make_hasher::{{closure}} (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="261" width="0.5000%" height="15" fill="rgb(237,177,52)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="271.50"/>
    </g>
    <g>
      <title>hashbrown::map::make_hash (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="245" width="0.5000%" height="15" fill="rgb(241,1,29)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="255.50"/>
    </g>
    <g>
      <title>core::hash::BuildHasher::hash_one (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="229" width="0.5000%" height="15" fill="rgb(222,198,6)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="239.50"/>
    </g>
    <g>
      <title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="213" width="0.5000%" height="15" fill="rgb(212,33,36)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="223.50"/>
    </g>
    <g>
      <title>&lt;regex_automata::util::determinize::state::State as core::hash::Hash&gt;::hash (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="197" width="0.5000%" height="15" fill="rgb(216,130,26)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="207.50"/>
    </g>
    <g>
      <title>&lt;alloc::sync::Arc&lt;T&gt; as core::hash::Hash&gt;::hash (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="181" width="0.5000%" height="15" fill="rgb(222,28,54)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="191.50"/>
    </g>
    <g>
      <title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="165" width="0.5000%" height="15" fill="rgb(213,6,49)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="175.50"/>
    </g>
    <g>
      <title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="149" width="0.5000%" height="15" fill="rgb(245,225,13)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="159.50"/>
    </g>
    <g>
      <title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="133" width="0.5000%" height="15" fill="rgb(253,26,19)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="143.50"/>
    </g>
    <g>
      <title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="117" width="0.5000%" height="15" fill="rgb(206,186,51)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="127.50"/>
    </g>
    <g>
      <title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.50%)</title>
      <rect x="19.5000%" y="101" width="0.5000%" height="15" fill="rgb(236,225,40)" fg:x="39" fg:w="1"/>
      <text x="19.7500%" y="111.50"/>
    </g>
    <g>
      <title>regex_syntax::ast::visitor::HeapVisitor::induct (1 samples, 0.50%)</title>
      <rect x="20.0000%" y="373" width="0.5000%" height="15" fill="rgb(220,131,54)" fg:x="40" fg:w="1"/>
      <text x="20.2500%" y="383.50"/>
    </g>
    <g>
      <title>regex_syntax::ast::visitor::HeapVisitor::visit_class (1 samples, 0.50%)</title>
      <rect x="20.0000%" y="357" width="0.5000%" height="15" fill="rgb(253,26,45)" fg:x="40" fg:w="1"/>
      <text x="20.2500%" y="367.50"/>
    </g>
    <g>
      <title>regex_syntax::ast::visitor::HeapVisitor::visit_class_post (1 samples, 0.50%)</title>
      <rect x="20.0000%" y="341" width="0.5000%" height="15" fill="rgb(236,134,51)" fg:x="40" fg:w="1"/>
      <text x="20.2500%" y="351.50"/>
    </g>
    <g>
      <title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.50%)</title>
      <rect x="20.0000%" y="325" width="0.5000%" height="15" fill="rgb(209,145,6)" fg:x="40" fg:w="1"/>
      <text x="20.2500%" y="335.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.50%)</title>
      <rect x="20.0000%" y="309" width="0.5000%" height="15" fill="rgb(222,136,12)" fg:x="40" fg:w="1"/>
      <text x="20.2500%" y="319.50"/>
    </g>
    <g>
      <title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.50%)</title>
      <rect x="20.5000%" y="373" width="0.5000%" height="15" fill="rgb(210,165,12)" fg:x="41" fg:w="1"/>
      <text x="20.7500%" y="383.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::ClassUnicode::empty (1 samples, 0.50%)</title>
      <rect x="20.5000%" y="357" width="0.5000%" height="15" fill="rgb(225,192,14)" fg:x="41" fg:w="1"/>
      <text x="20.7500%" y="367.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::ClassUnicode::new (1 samples, 0.50%)</title>
      <rect x="20.5000%" y="341" width="0.5000%" height="15" fill="rgb(214,194,28)" fg:x="41" fg:w="1"/>
      <text x="20.7500%" y="351.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::translate::TranslatorI::push_char (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="357" width="0.5000%" height="15" fill="rgb(208,83,35)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="367.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="341" width="0.5000%" height="15" fill="rgb(241,229,15)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="351.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="325" width="0.5000%" height="15" fill="rgb(254,103,39)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="335.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="309" width="0.5000%" height="15" fill="rgb(254,53,35)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="319.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::finish_grow (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="293" width="0.5000%" height="15" fill="rgb(237,133,22)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="303.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="277" width="0.5000%" height="15" fill="rgb(237,156,49)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="287.50"/>
    </g>
    <g>
      <title>alloc::alloc::Global::grow_impl (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="261" width="0.5000%" height="15" fill="rgb(214,150,36)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="271.50"/>
    </g>
    <g>
      <title>alloc::alloc::realloc (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="245" width="0.5000%" height="15" fill="rgb(254,47,34)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="255.50"/>
    </g>
    <g>
      <title>__GI___libc_realloc (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="229" width="0.5000%" height="15" fill="rgb(254,73,4)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="239.50"/>
    </g>
    <g>
      <title>_int_realloc (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="213" width="0.5000%" height="15" fill="rgb(231,75,41)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="223.50"/>
    </g>
    <g>
      <title>_int_malloc (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="197" width="0.5000%" height="15" fill="rgb(222,219,51)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="207.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="181" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="191.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="165" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="175.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="149" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="159.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="133" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="143.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="117" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="127.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="101" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="111.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="85" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="95.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="69" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="79.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="21.0000%" y="53" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="42" fg:w="1"/>
      <text x="21.2500%" y="63.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.50%)</title>
      <rect x="21.5000%" y="357" width="0.5000%" height="15" fill="rgb(222,136,12)" fg:x="43" fg:w="1"/>
      <text x="21.7500%" y="367.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.50%)</title>
      <rect x="21.5000%" y="341" width="0.5000%" height="15" fill="rgb(241,229,15)" fg:x="43" fg:w="1"/>
      <text x="21.7500%" y="351.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::translate::TranslatorI::pop_concat_expr (1 samples, 0.50%)</title>
      <rect x="22.0000%" y="357" width="0.5000%" height="15" fill="rgb(213,98,0)" fg:x="44" fg:w="1"/>
      <text x="22.2500%" y="367.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::Hir::literal (1 samples, 0.50%)</title>
      <rect x="22.0000%" y="341" width="0.5000%" height="15" fill="rgb(248,43,17)" fg:x="44" fg:w="1"/>
      <text x="22.2500%" y="351.50"/>
    </g>
    <g>
      <title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (1 samples, 0.50%)</title>
      <rect x="22.0000%" y="325" width="0.5000%" height="15" fill="rgb(249,58,20)" fg:x="44" fg:w="1"/>
      <text x="22.2500%" y="335.50"/>
    </g>
    <g>
      <title>alloc::vec::&lt;impl core::convert::From&lt;alloc::vec::Vec&lt;T,A&gt;&gt; for alloc::boxed::Box&lt;[T],A&gt;&gt;::from (1 samples, 0.50%)</title>
      <rect x="22.0000%" y="309" width="0.5000%" height="15" fill="rgb(222,176,43)" fg:x="44" fg:w="1"/>
      <text x="22.2500%" y="319.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.50%)</title>
      <rect x="22.0000%" y="293" width="0.5000%" height="15" fill="rgb(241,79,3)" fg:x="44" fg:w="1"/>
      <text x="22.2500%" y="303.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::shrink_to_fit (1 samples, 0.50%)</title>
      <rect x="22.0000%" y="277" width="0.5000%" height="15" fill="rgb(242,210,14)" fg:x="44" fg:w="1"/>
      <text x="22.2500%" y="287.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink_to_fit (1 samples, 0.50%)</title>
      <rect x="22.0000%" y="261" width="0.5000%" height="15" fill="rgb(226,51,15)" fg:x="44" fg:w="1"/>
      <text x="22.2500%" y="271.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink (1 samples, 0.50%)</title>
      <rect x="22.0000%" y="245" width="0.5000%" height="15" fill="rgb(220,229,0)" fg:x="44" fg:w="1"/>
      <text x="22.2500%" y="255.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::shrink (1 samples, 0.50%)</title>
      <rect x="22.0000%" y="229" width="0.5000%" height="15" fill="rgb(225,20,48)" fg:x="44" fg:w="1"/>
      <text x="22.2500%" y="239.50"/>
    </g>
    <g>
      <title>alloc::alloc::realloc (1 samples, 0.50%)</title>
      <rect x="22.0000%" y="213" width="0.5000%" height="15" fill="rgb(254,47,34)" fg:x="44" fg:w="1"/>
      <text x="22.2500%" y="223.50"/>
    </g>
    <g>
      <title>__GI___libc_realloc (1 samples, 0.50%)</title>
      <rect x="22.0000%" y="197" width="0.5000%" height="15" fill="rgb(254,73,4)" fg:x="44" fg:w="1"/>
      <text x="22.2500%" y="207.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::translate::TranslatorI::hir_repetition (1 samples, 0.50%)</title>
      <rect x="22.5000%" y="357" width="0.5000%" height="15" fill="rgb(233,35,28)" fg:x="45" fg:w="1"/>
      <text x="22.7500%" y="367.50"/>
    </g>
    <g>
      <title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.50%)</title>
      <rect x="22.5000%" y="341" width="0.5000%" height="15" fill="rgb(209,114,30)" fg:x="45" fg:w="1"/>
      <text x="22.7500%" y="351.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::Hir::concat (1 samples, 0.50%)</title>
      <rect x="23.0000%" y="357" width="0.5000%" height="15" fill="rgb(228,76,42)" fg:x="46" fg:w="1"/>
      <text x="23.2500%" y="367.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.50%)</title>
      <rect x="23.0000%" y="341" width="0.5000%" height="15" fill="rgb(237,3,50)" fg:x="46" fg:w="1"/>
      <text x="23.2500%" y="351.50"/>
    </g>
    <g>
      <title>core::mem::manually_drop::ManuallyDrop&lt;T&gt;::new (1 samples, 0.50%)</title>
      <rect x="23.0000%" y="325" width="0.5000%" height="15" fill="rgb(243,112,13)" fg:x="46" fg:w="1"/>
      <text x="23.2500%" y="335.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::Hir::class (1 samples, 0.50%)</title>
      <rect x="23.5000%" y="357" width="0.5000%" height="15" fill="rgb(241,125,31)" fg:x="47" fg:w="1"/>
      <text x="23.7500%" y="367.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::Properties::class (1 samples, 0.50%)</title>
      <rect x="23.5000%" y="341" width="0.5000%" height="15" fill="rgb(210,77,6)" fg:x="47" fg:w="1"/>
      <text x="23.7500%" y="351.50"/>
    </g>
    <g>
      <title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.50%)</title>
      <rect x="23.5000%" y="325" width="0.5000%" height="15" fill="rgb(209,114,30)" fg:x="47" fg:w="1"/>
      <text x="23.7500%" y="335.50"/>
    </g>
    <g>
      <title>alloc::alloc::exchange_malloc (1 samples, 0.50%)</title>
      <rect x="23.5000%" y="309" width="0.5000%" height="15" fill="rgb(248,129,10)" fg:x="47" fg:w="1"/>
      <text x="23.7500%" y="319.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.50%)</title>
      <rect x="23.5000%" y="293" width="0.5000%" height="15" fill="rgb(231,114,21)" fg:x="47" fg:w="1"/>
      <text x="23.7500%" y="303.50"/>
    </g>
    <g>
      <title>alloc::alloc::Global::alloc_impl (1 samples, 0.50%)</title>
      <rect x="23.5000%" y="277" width="0.5000%" height="15" fill="rgb(238,209,2)" fg:x="47" fg:w="1"/>
      <text x="23.7500%" y="287.50"/>
    </g>
    <g>
      <title>alloc::alloc::alloc (1 samples, 0.50%)</title>
      <rect x="23.5000%" y="261" width="0.5000%" height="15" fill="rgb(253,135,41)" fg:x="47" fg:w="1"/>
      <text x="23.7500%" y="271.50"/>
    </g>
    <g>
      <title>__GI___libc_malloc (1 samples, 0.50%)</title>
      <rect x="23.5000%" y="245" width="0.5000%" height="15" fill="rgb(206,112,53)" fg:x="47" fg:w="1"/>
      <text x="23.7500%" y="255.50"/>
    </g>
    <g>
      <title>_int_malloc (1 samples, 0.50%)</title>
      <rect x="23.5000%" y="229" width="0.5000%" height="15" fill="rgb(222,219,51)" fg:x="47" fg:w="1"/>
      <text x="23.7500%" y="239.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::class_bytes (1 samples, 0.50%)</title>
      <rect x="24.0000%" y="341" width="0.5000%" height="15" fill="rgb(242,123,20)" fg:x="48" fg:w="1"/>
      <text x="24.2500%" y="351.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::ClassBytes::new (1 samples, 0.50%)</title>
      <rect x="24.0000%" y="325" width="0.5000%" height="15" fill="rgb(235,93,50)" fg:x="48" fg:w="1"/>
      <text x="24.2500%" y="335.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::new (1 samples, 0.50%)</title>
      <rect x="24.0000%" y="309" width="0.5000%" height="15" fill="rgb(226,60,27)" fg:x="48" fg:w="1"/>
      <text x="24.2500%" y="319.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.50%)</title>
      <rect x="24.0000%" y="293" width="0.5000%" height="15" fill="rgb(250,125,54)" fg:x="48" fg:w="1"/>
      <text x="24.2500%" y="303.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::Hir::into_parts (1 samples, 0.50%)</title>
      <rect x="24.5000%" y="341" width="0.5000%" height="15" fill="rgb(217,98,50)" fg:x="49" fg:w="1"/>
      <text x="24.7500%" y="351.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;regex_syntax::hir::Hir&gt; (1 samples, 0.50%)</title>
      <rect x="24.5000%" y="325" width="0.5000%" height="15" fill="rgb(244,216,7)" fg:x="49" fg:w="1"/>
      <text x="24.7500%" y="335.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::Hir::alternation (3 samples, 1.50%)</title>
      <rect x="24.0000%" y="357" width="1.5000%" height="15" fill="rgb(206,114,23)" fg:x="48" fg:w="3"/>
      <text x="24.2500%" y="367.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.50%)</title>
      <rect x="25.0000%" y="341" width="0.5000%" height="15" fill="rgb(241,229,15)" fg:x="50" fg:w="1"/>
      <text x="25.2500%" y="351.50"/>
    </g>
    <g>
      <title>core::ptr::write (1 samples, 0.50%)</title>
      <rect x="25.0000%" y="325" width="0.5000%" height="15" fill="rgb(209,143,44)" fg:x="50" fg:w="1"/>
      <text x="25.2500%" y="335.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.50%)</title>
      <rect x="25.5000%" y="357" width="0.5000%" height="15" fill="rgb(241,229,15)" fg:x="51" fg:w="1"/>
      <text x="25.7500%" y="367.50"/>
    </g>
    <g>
      <title>core::ptr::write (1 samples, 0.50%)</title>
      <rect x="25.5000%" y="341" width="0.5000%" height="15" fill="rgb(209,143,44)" fg:x="51" fg:w="1"/>
      <text x="25.7500%" y="351.50"/>
    </g>
    <g>
      <title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.50%)</title>
      <rect x="26.0000%" y="357" width="0.5000%" height="15" fill="rgb(245,132,34)" fg:x="52" fg:w="1"/>
      <text x="26.2500%" y="367.50"/>
    </g>
    <g>
      <title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (12 samples, 6.00%)</title>
      <rect x="21.0000%" y="373" width="6.0000%" height="15" fill="rgb(207,12,29)" fg:x="42" fg:w="12"/>
      <text x="21.2500%" y="383.50">&lt;regex_s..</text>
    </g>
    <g>
      <title>regex_syntax::hir::translate::Translator::translate (15 samples, 7.50%)</title>
      <rect x="20.0000%" y="421" width="7.5000%" height="15" fill="rgb(212,73,14)" fg:x="40" fg:w="15"/>
      <text x="20.2500%" y="431.50">regex_synt..</text>
    </g>
    <g>
      <title>regex_syntax::ast::visitor::visit (15 samples, 7.50%)</title>
      <rect x="20.0000%" y="405" width="7.5000%" height="15" fill="rgb(209,184,21)" fg:x="40" fg:w="15"/>
      <text x="20.2500%" y="415.50">regex_synt..</text>
    </g>
    <g>
      <title>regex_syntax::ast::visitor::HeapVisitor::visit (15 samples, 7.50%)</title>
      <rect x="20.0000%" y="389" width="7.5000%" height="15" fill="rgb(253,224,17)" fg:x="40" fg:w="15"/>
      <text x="20.2500%" y="399.50">regex_synt..</text>
    </g>
    <g>
      <title>regex_syntax::ast::visitor::HeapVisitor::induct (1 samples, 0.50%)</title>
      <rect x="27.5000%" y="341" width="0.5000%" height="15" fill="rgb(220,131,54)" fg:x="55" fg:w="1"/>
      <text x="27.7500%" y="351.50"/>
    </g>
    <g>
      <title>regex_syntax::ast::visitor::HeapVisitor::visit_class (1 samples, 0.50%)</title>
      <rect x="27.5000%" y="325" width="0.5000%" height="15" fill="rgb(253,26,45)" fg:x="55" fg:w="1"/>
      <text x="27.7500%" y="335.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::pop (1 samples, 0.50%)</title>
      <rect x="27.5000%" y="309" width="0.5000%" height="15" fill="rgb(216,0,40)" fg:x="55" fg:w="1"/>
      <text x="27.7500%" y="319.50"/>
    </g>
    <g>
      <title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.50%)</title>
      <rect x="28.0000%" y="341" width="0.5000%" height="15" fill="rgb(220,157,37)" fg:x="56" fg:w="1"/>
      <text x="28.2500%" y="351.50"/>
    </g>
    <g>
      <title>regex_syntax::ast::visitor::visit (3 samples, 1.50%)</title>
      <rect x="27.5000%" y="373" width="1.5000%" height="15" fill="rgb(209,184,21)" fg:x="55" fg:w="3"/>
      <text x="27.7500%" y="383.50"/>
    </g>
    <g>
      <title>regex_syntax::ast::visitor::HeapVisitor::visit (3 samples, 1.50%)</title>
      <rect x="27.5000%" y="357" width="1.5000%" height="15" fill="rgb(253,224,17)" fg:x="55" fg:w="3"/>
      <text x="27.7500%" y="367.50"/>
    </g>
    <g>
      <title>_int_malloc (2 samples, 1.00%)</title>
      <rect x="29.0000%" y="245" width="1.0000%" height="15" fill="rgb(222,219,51)" fg:x="58" fg:w="2"/>
      <text x="29.2500%" y="255.50"/>
    </g>
    <g>
      <title>regex_syntax::ast::Ast::literal (4 samples, 2.00%)</title>
      <rect x="29.0000%" y="357" width="2.0000%" height="15" fill="rgb(212,66,23)" fg:x="58" fg:w="4"/>
      <text x="29.2500%" y="367.50">r..</text>
    </g>
    <g>
      <title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 2.00%)</title>
      <rect x="29.0000%" y="341" width="2.0000%" height="15" fill="rgb(209,114,30)" fg:x="58" fg:w="4"/>
      <text x="29.2500%" y="351.50">a..</text>
    </g>
    <g>
      <title>alloc::alloc::exchange_malloc (4 samples, 2.00%)</title>
      <rect x="29.0000%" y="325" width="2.0000%" height="15" fill="rgb(248,129,10)" fg:x="58" fg:w="4"/>
      <text x="29.2500%" y="335.50">a..</text>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 2.00%)</title>
      <rect x="29.0000%" y="309" width="2.0000%" height="15" fill="rgb(231,114,21)" fg:x="58" fg:w="4"/>
      <text x="29.2500%" y="319.50">&lt;..</text>
    </g>
    <g>
      <title>alloc::alloc::Global::alloc_impl (4 samples, 2.00%)</title>
      <rect x="29.0000%" y="293" width="2.0000%" height="15" fill="rgb(238,209,2)" fg:x="58" fg:w="4"/>
      <text x="29.2500%" y="303.50">a..</text>
    </g>
    <g>
      <title>alloc::alloc::alloc (4 samples, 2.00%)</title>
      <rect x="29.0000%" y="277" width="2.0000%" height="15" fill="rgb(253,135,41)" fg:x="58" fg:w="4"/>
      <text x="29.2500%" y="287.50">a..</text>
    </g>
    <g>
      <title>__GI___libc_malloc (4 samples, 2.00%)</title>
      <rect x="29.0000%" y="261" width="2.0000%" height="15" fill="rgb(206,112,53)" fg:x="58" fg:w="4"/>
      <text x="29.2500%" y="271.50">_..</text>
    </g>
    <g>
      <title>regex_syntax::ast::parse::Primitive::into_ast (5 samples, 2.50%)</title>
      <rect x="29.0000%" y="373" width="2.5000%" height="15" fill="rgb(225,212,2)" fg:x="58" fg:w="5"/>
      <text x="29.2500%" y="383.50">re..</text>
    </g>
    <g>
      <title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span (1 samples, 0.50%)</title>
      <rect x="31.5000%" y="357" width="0.5000%" height="15" fill="rgb(249,58,28)" fg:x="63" fg:w="1"/>
      <text x="31.7500%" y="367.50"/>
    </g>
    <g>
      <title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pos (1 samples, 0.50%)</title>
      <rect x="31.5000%" y="341" width="0.5000%" height="15" fill="rgb(205,216,50)" fg:x="63" fg:w="1"/>
      <text x="31.7500%" y="351.50"/>
    </g>
    <g>
      <title>core::cell::Cell&lt;T&gt;::get (1 samples, 0.50%)</title>
      <rect x="31.5000%" y="325" width="0.5000%" height="15" fill="rgb(211,150,53)" fg:x="63" fg:w="1"/>
      <text x="31.7500%" y="335.50"/>
    </g>
    <g>
      <title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_alternate (2 samples, 1.00%)</title>
      <rect x="31.5000%" y="373" width="1.0000%" height="15" fill="rgb(224,168,6)" fg:x="63" fg:w="2"/>
      <text x="31.7500%" y="383.50"/>
    </g>
    <g>
      <title>regex_syntax::ast::parse::ParserI&lt;P&gt;::maybe_parse_ascii_class (1 samples, 0.50%)</title>
      <rect x="32.5000%" y="357" width="0.5000%" height="15" fill="rgb(215,29,15)" fg:x="65" fg:w="1"/>
      <text x="32.7500%" y="367.50"/>
    </g>
    <g>
      <title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_if (1 samples, 0.50%)</title>
      <rect x="32.5000%" y="341" width="0.5000%" height="15" fill="rgb(214,139,24)" fg:x="65" fg:w="1"/>
      <text x="32.7500%" y="351.50"/>
    </g>
    <g>
      <title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.50%)</title>
      <rect x="32.5000%" y="325" width="0.5000%" height="15" fill="rgb(207,165,29)" fg:x="65" fg:w="1"/>
      <text x="32.7500%" y="335.50"/>
    </g>
    <g>
      <title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char (1 samples, 0.50%)</title>
      <rect x="32.5000%" y="309" width="0.5000%" height="15" fill="rgb(206,73,47)" fg:x="65" fg:w="1"/>
      <text x="32.7500%" y="319.50"/>
    </g>
    <g>
      <title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 1.00%)</title>
      <rect x="32.5000%" y="373" width="1.0000%" height="15" fill="rgb(248,118,21)" fg:x="65" fg:w="2"/>
      <text x="32.7500%" y="383.50"/>
    </g>
    <g>
      <title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_primitive (4 samples, 2.00%)</title>
      <rect x="33.5000%" y="373" width="2.0000%" height="15" fill="rgb(214,58,42)" fg:x="67" fg:w="4"/>
      <text x="33.7500%" y="383.50">r..</text>
    </g>
    <g>
      <title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_counted_repetition (1 samples, 0.50%)</title>
      <rect x="35.5000%" y="373" width="0.5000%" height="15" fill="rgb(241,75,43)" fg:x="71" fg:w="1"/>
      <text x="35.7500%" y="383.50"/>
    </g>
    <g>
      <title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.50%)</title>
      <rect x="35.5000%" y="357" width="0.5000%" height="15" fill="rgb(245,132,34)" fg:x="71" fg:w="1"/>
      <text x="35.7500%" y="367.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.50%)</title>
      <rect x="36.0000%" y="373" width="0.5000%" height="15" fill="rgb(241,229,15)" fg:x="72" fg:w="1"/>
      <text x="36.2500%" y="383.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.50%)</title>
      <rect x="36.0000%" y="357" width="0.5000%" height="15" fill="rgb(254,103,39)" fg:x="72" fg:w="1"/>
      <text x="36.2500%" y="367.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.50%)</title>
      <rect x="36.0000%" y="341" width="0.5000%" height="15" fill="rgb(254,53,35)" fg:x="72" fg:w="1"/>
      <text x="36.2500%" y="351.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::finish_grow (1 samples, 0.50%)</title>
      <rect x="36.0000%" y="325" width="0.5000%" height="15" fill="rgb(237,133,22)" fg:x="72" fg:w="1"/>
      <text x="36.2500%" y="335.50"/>
    </g>
    <g>
      <title>__GI___libc_malloc (1 samples, 0.50%)</title>
      <rect x="36.0000%" y="309" width="0.5000%" height="15" fill="rgb(206,112,53)" fg:x="72" fg:w="1"/>
      <text x="36.2500%" y="319.50"/>
    </g>
    <g>
      <title>_int_malloc (1 samples, 0.50%)</title>
      <rect x="36.0000%" y="293" width="0.5000%" height="15" fill="rgb(222,219,51)" fg:x="72" fg:w="1"/>
      <text x="36.2500%" y="303.50"/>
    </g>
    <g>
      <title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.50%)</title>
      <rect x="36.5000%" y="373" width="0.5000%" height="15" fill="rgb(245,132,34)" fg:x="73" fg:w="1"/>
      <text x="36.7500%" y="383.50"/>
    </g>
    <g>
      <title>regex_syntax::ast::parse::Parser::parse (21 samples, 10.50%)</title>
      <rect x="27.5000%" y="421" width="10.5000%" height="15" fill="rgb(225,142,35)" fg:x="55" fg:w="21"/>
      <text x="27.7500%" y="431.50">regex_syntax::a..</text>
    </g>
    <g>
      <title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse (21 samples, 10.50%)</title>
      <rect x="27.5000%" y="405" width="10.5000%" height="15" fill="rgb(254,60,41)" fg:x="55" fg:w="21"/>
      <text x="27.7500%" y="415.50">regex_syntax::a..</text>
    </g>
    <g>
      <title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (21 samples, 10.50%)</title>
      <rect x="27.5000%" y="389" width="10.5000%" height="15" fill="rgb(223,9,23)" fg:x="55" fg:w="21"/>
      <text x="27.7500%" y="399.50">regex_syntax::a..</text>
    </g>
    <g>
      <title>__GI___libc_free (1 samples, 0.50%)</title>
      <rect x="38.0000%" y="325" width="0.5000%" height="15" fill="rgb(247,8,17)" fg:x="76" fg:w="1"/>
      <text x="38.2500%" y="335.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;regex_syntax::hir::Hir&gt; (2 samples, 1.00%)</title>
      <rect x="38.0000%" y="341" width="1.0000%" height="15" fill="rgb(244,216,7)" fg:x="76" fg:w="2"/>
      <text x="38.2500%" y="351.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="39.0000%" y="341" width="0.5000%" height="15" fill="rgb(206,118,12)" fg:x="78" fg:w="1"/>
      <text x="39.2500%" y="351.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="39.0000%" y="325" width="0.5000%" height="15" fill="rgb(244,42,48)" fg:x="78" fg:w="1"/>
      <text x="39.2500%" y="335.50"/>
    </g>
    <g>
      <title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.50%)</title>
      <rect x="39.0000%" y="309" width="0.5000%" height="15" fill="rgb(213,128,22)" fg:x="78" fg:w="1"/>
      <text x="39.2500%" y="319.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.50%)</title>
      <rect x="39.0000%" y="293" width="0.5000%" height="15" fill="rgb(238,77,31)" fg:x="78" fg:w="1"/>
      <text x="39.2500%" y="303.50"/>
    </g>
    <g>
      <title>alloc::alloc::dealloc (1 samples, 0.50%)</title>
      <rect x="39.0000%" y="277" width="0.5000%" height="15" fill="rgb(227,15,28)" fg:x="78" fg:w="1"/>
      <text x="39.2500%" y="287.50"/>
    </g>
    <g>
      <title>__GI___libc_free (1 samples, 0.50%)</title>
      <rect x="39.0000%" y="261" width="0.5000%" height="15" fill="rgb(247,8,17)" fg:x="78" fg:w="1"/>
      <text x="39.2500%" y="271.50"/>
    </g>
    <g>
      <title>_int_free (1 samples, 0.50%)</title>
      <rect x="39.0000%" y="245" width="0.5000%" height="15" fill="rgb(221,113,48)" fg:x="78" fg:w="1"/>
      <text x="39.2500%" y="255.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.50%)</title>
      <rect x="39.5000%" y="309" width="0.5000%" height="15" fill="rgb(214,146,48)" fg:x="79" fg:w="1"/>
      <text x="39.7500%" y="319.50"/>
    </g>
    <g>
      <title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.50%)</title>
      <rect x="39.5000%" y="293" width="0.5000%" height="15" fill="rgb(245,181,4)" fg:x="79" fg:w="1"/>
      <text x="39.7500%" y="303.50"/>
    </g>
    <g>
      <title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.50%)</title>
      <rect x="39.5000%" y="277" width="0.5000%" height="15" fill="rgb(214,12,39)" fg:x="79" fg:w="1"/>
      <text x="39.7500%" y="287.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::hir::Hir&gt;&gt; (5 samples, 2.50%)</title>
      <rect x="38.0000%" y="421" width="2.5000%" height="15" fill="rgb(206,118,12)" fg:x="76" fg:w="5"/>
      <text x="38.2500%" y="431.50">co..</text>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 2.50%)</title>
      <rect x="38.0000%" y="405" width="2.5000%" height="15" fill="rgb(249,14,2)" fg:x="76" fg:w="5"/>
      <text x="38.2500%" y="415.50">&lt;a..</text>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;[regex_syntax::hir::Hir]&gt; (5 samples, 2.50%)</title>
      <rect x="38.0000%" y="389" width="2.5000%" height="15" fill="rgb(240,58,42)" fg:x="76" fg:w="5"/>
      <text x="38.2500%" y="399.50">co..</text>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;regex_syntax::hir::Hir&gt; (5 samples, 2.50%)</title>
      <rect x="38.0000%" y="373" width="2.5000%" height="15" fill="rgb(244,216,7)" fg:x="76" fg:w="5"/>
      <text x="38.2500%" y="383.50">co..</text>
    </g>
    <g>
      <title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (5 samples, 2.50%)</title>
      <rect x="38.0000%" y="357" width="2.5000%" height="15" fill="rgb(251,195,49)" fg:x="76" fg:w="5"/>
      <text x="38.2500%" y="367.50">&lt;r..</text>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 1.00%)</title>
      <rect x="39.5000%" y="341" width="1.0000%" height="15" fill="rgb(205,186,49)" fg:x="79" fg:w="2"/>
      <text x="39.7500%" y="351.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 1.00%)</title>
      <rect x="39.5000%" y="325" width="1.0000%" height="15" fill="rgb(232,211,42)" fg:x="79" fg:w="2"/>
      <text x="39.7500%" y="335.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.50%)</title>
      <rect x="40.5000%" y="341" width="0.5000%" height="15" fill="rgb(216,180,24)" fg:x="81" fg:w="1"/>
      <text x="40.7500%" y="351.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::ast::ClassBracketed&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="341" width="0.5000%" height="15" fill="rgb(216,49,34)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="351.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassBracketed&gt; (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="325" width="0.5000%" height="15" fill="rgb(233,178,20)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="335.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="309" width="0.5000%" height="15" fill="rgb(218,161,37)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="319.50"/>
    </g>
    <g>
      <title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="293" width="0.5000%" height="15" fill="rgb(227,212,36)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="303.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="277" width="0.5000%" height="15" fill="rgb(205,186,49)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="287.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="261" width="0.5000%" height="15" fill="rgb(232,211,42)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="271.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="245" width="0.5000%" height="15" fill="rgb(214,146,48)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="255.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="229" width="0.5000%" height="15" fill="rgb(212,159,3)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="239.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="213" width="0.5000%" height="15" fill="rgb(231,142,39)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="223.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="197" width="0.5000%" height="15" fill="rgb(249,2,22)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="207.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="181" width="0.5000%" height="15" fill="rgb(254,53,35)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="191.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::finish_grow (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="165" width="0.5000%" height="15" fill="rgb(237,133,22)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="175.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="149" width="0.5000%" height="15" fill="rgb(237,156,49)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="159.50"/>
    </g>
    <g>
      <title>alloc::alloc::Global::grow_impl (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="133" width="0.5000%" height="15" fill="rgb(214,150,36)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="143.50"/>
    </g>
    <g>
      <title>alloc::alloc::realloc (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="117" width="0.5000%" height="15" fill="rgb(254,47,34)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="127.50"/>
    </g>
    <g>
      <title>__GI___libc_realloc (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="101" width="0.5000%" height="15" fill="rgb(254,73,4)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="111.50"/>
    </g>
    <g>
      <title>_int_realloc (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="85" width="0.5000%" height="15" fill="rgb(231,75,41)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="95.50"/>
    </g>
    <g>
      <title>_int_malloc (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="69" width="0.5000%" height="15" fill="rgb(222,219,51)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="79.50"/>
    </g>
    <g>
      <title>malloc_consolidate (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="53" width="0.5000%" height="15" fill="rgb(228,194,39)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="63.50"/>
    </g>
    <g>
      <title>unlink_chunk (1 samples, 0.50%)</title>
      <rect x="41.0000%" y="37" width="0.5000%" height="15" fill="rgb(223,20,30)" fg:x="82" fg:w="1"/>
      <text x="41.2500%" y="47.50"/>
    </g>
    <g>
      <title>__GI___libc_free (3 samples, 1.50%)</title>
      <rect x="41.5000%" y="341" width="1.5000%" height="15" fill="rgb(247,8,17)" fg:x="83" fg:w="3"/>
      <text x="41.7500%" y="351.50"/>
    </g>
    <g>
      <title>_int_free (3 samples, 1.50%)</title>
      <rect x="41.5000%" y="325" width="1.5000%" height="15" fill="rgb(221,113,48)" fg:x="83" fg:w="3"/>
      <text x="41.7500%" y="335.50"/>
    </g>
    <g>
      <title>s4lib::readers::syslogprocessor::SyslogProcessor::process_stage1_blockzero_analysis (51 samples, 25.50%)</title>
      <rect x="18.0000%" y="789" width="25.5000%" height="15" fill="rgb(214,107,3)" fg:x="36" fg:w="51"/>
      <text x="18.2500%" y="799.50">s4lib::readers::syslogprocessor::SyslogPr..</text>
    </g>
    <g>
      <title>s4lib::readers::syslogprocessor::SyslogProcessor::blockzero_analysis (51 samples, 25.50%)</title>
      <rect x="18.0000%" y="773" width="25.5000%" height="15" fill="rgb(228,176,28)" fg:x="36" fg:w="51"/>
      <text x="18.2500%" y="783.50">s4lib::readers::syslogprocessor::SyslogPr..</text>
    </g>
    <g>
      <title>s4lib::readers::syslogprocessor::SyslogProcessor::blockzero_analysis_syslines (51 samples, 25.50%)</title>
      <rect x="18.0000%" y="757" width="25.5000%" height="15" fill="rgb(208,15,47)" fg:x="36" fg:w="51"/>
      <text x="18.2500%" y="767.50">s4lib::readers::syslogprocessor::SyslogPr..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::find_sysline_in_block (51 samples, 25.50%)</title>
      <rect x="18.0000%" y="741" width="25.5000%" height="15" fill="rgb(243,65,52)" fg:x="36" fg:w="51"/>
      <text x="18.2500%" y="751.50">s4lib::readers::syslinereader::SyslineRea..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::find_sysline_in_block_year (51 samples, 25.50%)</title>
      <rect x="18.0000%" y="725" width="25.5000%" height="15" fill="rgb(253,177,51)" fg:x="36" fg:w="51"/>
      <text x="18.2500%" y="735.50">s4lib::readers::syslinereader::SyslineRea..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::parse_datetime_in_line_cached (51 samples, 25.50%)</title>
      <rect x="18.0000%" y="709" width="25.5000%" height="15" fill="rgb(231,75,50)" fg:x="36" fg:w="51"/>
      <text x="18.2500%" y="719.50">s4lib::readers::syslinereader::SyslineRea..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::parse_datetime_in_line (51 samples, 25.50%)</title>
      <rect x="18.0000%" y="693" width="25.5000%" height="15" fill="rgb(234,54,15)" fg:x="36" fg:w="51"/>
      <text x="18.2500%" y="703.50">s4lib::readers::syslinereader::SyslineRea..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::find_datetime_in_line (51 samples, 25.50%)</title>
      <rect x="18.0000%" y="677" width="25.5000%" height="15" fill="rgb(212,53,9)" fg:x="36" fg:w="51"/>
      <text x="18.2500%" y="687.50">s4lib::readers::syslinereader::SyslineRea..</text>
    </g>
    <g>
      <title>s4lib::data::datetime::bytes_to_regex_to_datetime (51 samples, 25.50%)</title>
      <rect x="18.0000%" y="661" width="25.5000%" height="15" fill="rgb(252,84,36)" fg:x="36" fg:w="51"/>
      <text x="18.2500%" y="671.50">s4lib::data::datetime::bytes_to_regex_to_..</text>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref (47 samples, 23.50%)</title>
      <rect x="20.0000%" y="645" width="23.5000%" height="15" fill="rgb(217,15,43)" fg:x="40" fg:w="47"/>
      <text x="20.2500%" y="655.50">&lt;s4lib::data::datetime::DATETIME_PARS..</text>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref::__stability (47 samples, 23.50%)</title>
      <rect x="20.0000%" y="629" width="23.5000%" height="15" fill="rgb(239,165,48)" fg:x="40" fg:w="47"/>
      <text x="20.2500%" y="639.50">&lt;s4lib::data::datetime::DATETIME_PARS..</text>
    </g>
    <g>
      <title>lazy_static::lazy::Lazy&lt;T&gt;::get (47 samples, 23.50%)</title>
      <rect x="20.0000%" y="613" width="23.5000%" height="15" fill="rgb(235,175,8)" fg:x="40" fg:w="47"/>
      <text x="20.2500%" y="623.50">lazy_static::lazy::Lazy&lt;T&gt;::get</text>
    </g>
    <g>
      <title>std::sync::once::Once::call_once (47 samples, 23.50%)</title>
      <rect x="20.0000%" y="597" width="23.5000%" height="15" fill="rgb(247,17,47)" fg:x="40" fg:w="47"/>
      <text x="20.2500%" y="607.50">std::sync::once::Once::call_once</text>
    </g>
    <g>
      <title>std::sys_common::once::futex::Once::call (47 samples, 23.50%)</title>
      <rect x="20.0000%" y="581" width="23.5000%" height="15" fill="rgb(246,168,49)" fg:x="40" fg:w="47"/>
      <text x="20.2500%" y="591.50">std::sys_common::once::futex::Once::c..</text>
    </g>
    <g>
      <title>std::sync::once::Once::call_once::{{closure}} (47 samples, 23.50%)</title>
      <rect x="20.0000%" y="565" width="23.5000%" height="15" fill="rgb(237,63,35)" fg:x="40" fg:w="47"/>
      <text x="20.2500%" y="575.50">std::sync::once::Once::call_once::{{c..</text>
    </g>
    <g>
      <title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (47 samples, 23.50%)</title>
      <rect x="20.0000%" y="549" width="23.5000%" height="15" fill="rgb(238,7,51)" fg:x="40" fg:w="47"/>
      <text x="20.2500%" y="559.50">lazy_static::lazy::Lazy&lt;T&gt;::get::{{cl..</text>
    </g>
    <g>
      <title>core::ops::function::FnOnce::call_once (47 samples, 23.50%)</title>
      <rect x="20.0000%" y="533" width="23.5000%" height="15" fill="rgb(210,80,10)" fg:x="40" fg:w="47"/>
      <text x="20.2500%" y="543.50">core::ops::function::FnOnce::call_once</text>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (47 samples, 23.50%)</title>
      <rect x="20.0000%" y="517" width="23.5000%" height="15" fill="rgb(205,24,29)" fg:x="40" fg:w="47"/>
      <text x="20.2500%" y="527.50">&lt;s4lib::data::datetime::DATETIME_PARS..</text>
    </g>
    <g>
      <title>regex::regex::bytes::Regex::new (47 samples, 23.50%)</title>
      <rect x="20.0000%" y="501" width="23.5000%" height="15" fill="rgb(246,224,25)" fg:x="40" fg:w="47"/>
      <text x="20.2500%" y="511.50">regex::regex::bytes::Regex::new</text>
    </g>
    <g>
      <title>regex::builders::bytes::RegexBuilder::build (47 samples, 23.50%)</title>
      <rect x="20.0000%" y="485" width="23.5000%" height="15" fill="rgb(236,76,51)" fg:x="40" fg:w="47"/>
      <text x="20.2500%" y="495.50">regex::builders::bytes::RegexBuilder:..</text>
    </g>
    <g>
      <title>regex::builders::Builder::build_one_bytes (47 samples, 23.50%)</title>
      <rect x="20.0000%" y="469" width="23.5000%" height="15" fill="rgb(233,102,7)" fg:x="40" fg:w="47"/>
      <text x="20.2500%" y="479.50">regex::builders::Builder::build_one_b..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build (47 samples, 23.50%)</title>
      <rect x="20.0000%" y="453" width="23.5000%" height="15" fill="rgb(212,33,22)" fg:x="40" fg:w="47"/>
      <text x="20.2500%" y="463.50">regex_automata::meta::regex::Builder:..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many (47 samples, 23.50%)</title>
      <rect x="20.0000%" y="437" width="23.5000%" height="15" fill="rgb(236,25,32)" fg:x="40" fg:w="47"/>
      <text x="20.2500%" y="447.50">regex_automata::meta::regex::Builder:..</text>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::ast::Ast&gt;&gt; (6 samples, 3.00%)</title>
      <rect x="40.5000%" y="421" width="3.0000%" height="15" fill="rgb(234,216,45)" fg:x="81" fg:w="6"/>
      <text x="40.7500%" y="431.50">cor..</text>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 3.00%)</title>
      <rect x="40.5000%" y="405" width="3.0000%" height="15" fill="rgb(249,14,2)" fg:x="81" fg:w="6"/>
      <text x="40.7500%" y="415.50">&lt;al..</text>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;[regex_syntax::ast::Ast]&gt; (6 samples, 3.00%)</title>
      <rect x="40.5000%" y="389" width="3.0000%" height="15" fill="rgb(216,112,18)" fg:x="81" fg:w="6"/>
      <text x="40.7500%" y="399.50">cor..</text>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (6 samples, 3.00%)</title>
      <rect x="40.5000%" y="373" width="3.0000%" height="15" fill="rgb(216,180,24)" fg:x="81" fg:w="6"/>
      <text x="40.7500%" y="383.50">cor..</text>
    </g>
    <g>
      <title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (6 samples, 3.00%)</title>
      <rect x="40.5000%" y="357" width="3.0000%" height="15" fill="rgb(238,18,15)" fg:x="81" fg:w="6"/>
      <text x="40.7500%" y="367.50">&lt;re..</text>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.50%)</title>
      <rect x="43.0000%" y="341" width="0.5000%" height="15" fill="rgb(205,186,49)" fg:x="86" fg:w="1"/>
      <text x="43.2500%" y="351.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.50%)</title>
      <rect x="43.0000%" y="325" width="0.5000%" height="15" fill="rgb(232,211,42)" fg:x="86" fg:w="1"/>
      <text x="43.2500%" y="335.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.50%)</title>
      <rect x="43.0000%" y="309" width="0.5000%" height="15" fill="rgb(214,146,48)" fg:x="86" fg:w="1"/>
      <text x="43.2500%" y="319.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.50%)</title>
      <rect x="43.0000%" y="293" width="0.5000%" height="15" fill="rgb(212,159,3)" fg:x="86" fg:w="1"/>
      <text x="43.2500%" y="303.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.50%)</title>
      <rect x="43.0000%" y="277" width="0.5000%" height="15" fill="rgb(231,142,39)" fg:x="86" fg:w="1"/>
      <text x="43.2500%" y="287.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.50%)</title>
      <rect x="43.0000%" y="261" width="0.5000%" height="15" fill="rgb(249,2,22)" fg:x="86" fg:w="1"/>
      <text x="43.2500%" y="271.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.50%)</title>
      <rect x="43.0000%" y="245" width="0.5000%" height="15" fill="rgb(254,53,35)" fg:x="86" fg:w="1"/>
      <text x="43.2500%" y="255.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::finish_grow (1 samples, 0.50%)</title>
      <rect x="43.0000%" y="229" width="0.5000%" height="15" fill="rgb(237,133,22)" fg:x="86" fg:w="1"/>
      <text x="43.2500%" y="239.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.50%)</title>
      <rect x="43.0000%" y="213" width="0.5000%" height="15" fill="rgb(237,156,49)" fg:x="86" fg:w="1"/>
      <text x="43.2500%" y="223.50"/>
    </g>
    <g>
      <title>alloc::alloc::Global::grow_impl (1 samples, 0.50%)</title>
      <rect x="43.0000%" y="197" width="0.5000%" height="15" fill="rgb(214,150,36)" fg:x="86" fg:w="1"/>
      <text x="43.2500%" y="207.50"/>
    </g>
    <g>
      <title>alloc::alloc::realloc (1 samples, 0.50%)</title>
      <rect x="43.0000%" y="181" width="0.5000%" height="15" fill="rgb(254,47,34)" fg:x="86" fg:w="1"/>
      <text x="43.2500%" y="191.50"/>
    </g>
    <g>
      <title>__GI___libc_realloc (1 samples, 0.50%)</title>
      <rect x="43.0000%" y="165" width="0.5000%" height="15" fill="rgb(254,73,4)" fg:x="86" fg:w="1"/>
      <text x="43.2500%" y="175.50"/>
    </g>
    <g>
      <title>_int_realloc (1 samples, 0.50%)</title>
      <rect x="43.0000%" y="149" width="0.5000%" height="15" fill="rgb(231,75,41)" fg:x="86" fg:w="1"/>
      <text x="43.2500%" y="159.50"/>
    </g>
    <g>
      <title>_int_malloc (1 samples, 0.50%)</title>
      <rect x="43.0000%" y="133" width="0.5000%" height="15" fill="rgb(222,219,51)" fg:x="86" fg:w="1"/>
      <text x="43.2500%" y="143.50"/>
    </g>
    <g>
      <title>malloc_consolidate (1 samples, 0.50%)</title>
      <rect x="43.0000%" y="117" width="0.5000%" height="15" fill="rgb(228,194,39)" fg:x="86" fg:w="1"/>
      <text x="43.2500%" y="127.50"/>
    </g>
    <g>
      <title>chrono::offset::TimeZone::from_local_datetime (1 samples, 0.50%)</title>
      <rect x="43.5000%" y="629" width="0.5000%" height="15" fill="rgb(244,75,24)" fg:x="87" fg:w="1"/>
      <text x="43.7500%" y="639.50"/>
    </g>
    <g>
      <title>chrono::offset::LocalResult&lt;T&gt;::map (1 samples, 0.50%)</title>
      <rect x="43.5000%" y="613" width="0.5000%" height="15" fill="rgb(224,169,52)" fg:x="87" fg:w="1"/>
      <text x="43.7500%" y="623.50"/>
    </g>
    <g>
      <title>chrono::offset::TimeZone::from_local_datetime::{{closure}} (1 samples, 0.50%)</title>
      <rect x="43.5000%" y="597" width="0.5000%" height="15" fill="rgb(212,118,1)" fg:x="87" fg:w="1"/>
      <text x="43.7500%" y="607.50"/>
    </g>
    <g>
      <title>chrono::offset::fixed::&lt;impl core::ops::arith::Sub&lt;chrono::offset::fixed::FixedOffset&gt; for chrono::naive::datetime::NaiveDateTime&gt;::sub (1 samples, 0.50%)</title>
      <rect x="43.5000%" y="581" width="0.5000%" height="15" fill="rgb(253,9,6)" fg:x="87" fg:w="1"/>
      <text x="43.7500%" y="591.50"/>
    </g>
    <g>
      <title>chrono::offset::fixed::add_with_leapsecond (1 samples, 0.50%)</title>
      <rect x="43.5000%" y="565" width="0.5000%" height="15" fill="rgb(232,33,4)" fg:x="87" fg:w="1"/>
      <text x="43.7500%" y="575.50"/>
    </g>
    <g>
      <title>&lt;chrono::naive::datetime::NaiveDateTime as core::ops::arith::Add&lt;chrono::duration::Duration&gt;&gt;::add (1 samples, 0.50%)</title>
      <rect x="43.5000%" y="549" width="0.5000%" height="15" fill="rgb(218,14,38)" fg:x="87" fg:w="1"/>
      <text x="43.7500%" y="559.50"/>
    </g>
    <g>
      <title>chrono::naive::datetime::NaiveDateTime::checked_add_signed (1 samples, 0.50%)</title>
      <rect x="43.5000%" y="533" width="0.5000%" height="15" fill="rgb(230,97,7)" fg:x="87" fg:w="1"/>
      <text x="43.7500%" y="543.50"/>
    </g>
    <g>
      <title>chrono::format::parse::parse (1 samples, 0.50%)</title>
      <rect x="44.0000%" y="613" width="0.5000%" height="15" fill="rgb(248,184,2)" fg:x="88" fg:w="1"/>
      <text x="44.2500%" y="623.50"/>
    </g>
    <g>
      <title>chrono::format::parse::parse_internal (1 samples, 0.50%)</title>
      <rect x="44.0000%" y="597" width="0.5000%" height="15" fill="rgb(254,10,23)" fg:x="88" fg:w="1"/>
      <text x="44.2500%" y="607.50"/>
    </g>
    <g>
      <title>s4lib::data::datetime::datetime_parse_from_str (3 samples, 1.50%)</title>
      <rect x="43.5000%" y="645" width="1.5000%" height="15" fill="rgb(242,206,13)" fg:x="87" fg:w="3"/>
      <text x="43.7500%" y="655.50"/>
    </g>
    <g>
      <title>chrono::naive::datetime::NaiveDateTime::parse_from_str (2 samples, 1.00%)</title>
      <rect x="44.0000%" y="629" width="1.0000%" height="15" fill="rgb(217,43,10)" fg:x="88" fg:w="2"/>
      <text x="44.2500%" y="639.50"/>
    </g>
    <g>
      <title>regex::regex::bytes::Regex::captures (1 samples, 0.50%)</title>
      <rect x="45.0000%" y="645" width="0.5000%" height="15" fill="rgb(233,29,12)" fg:x="90" fg:w="1"/>
      <text x="45.2500%" y="655.50"/>
    </g>
    <g>
      <title>regex::regex::bytes::Regex::captures_at (1 samples, 0.50%)</title>
      <rect x="45.0000%" y="629" width="0.5000%" height="15" fill="rgb(207,96,18)" fg:x="90" fg:w="1"/>
      <text x="45.2500%" y="639.50"/>
    </g>
    <g>
      <title>regex_automata::meta::regex::Regex::captures (1 samples, 0.50%)</title>
      <rect x="45.0000%" y="613" width="0.5000%" height="15" fill="rgb(219,198,6)" fg:x="90" fg:w="1"/>
      <text x="45.2500%" y="623.50"/>
    </g>
    <g>
      <title>regex_automata::meta::regex::Regex::search_captures (1 samples, 0.50%)</title>
      <rect x="45.0000%" y="597" width="0.5000%" height="15" fill="rgb(212,211,21)" fg:x="90" fg:w="1"/>
      <text x="45.2500%" y="607.50"/>
    </g>
    <g>
      <title>regex_automata::meta::regex::Regex::search_slots (1 samples, 0.50%)</title>
      <rect x="45.0000%" y="581" width="0.5000%" height="15" fill="rgb(243,12,43)" fg:x="90" fg:w="1"/>
      <text x="45.2500%" y="591.50"/>
    </g>
    <g>
      <title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_slots (1 samples, 0.50%)</title>
      <rect x="45.0000%" y="565" width="0.5000%" height="15" fill="rgb(221,222,32)" fg:x="90" fg:w="1"/>
      <text x="45.2500%" y="575.50"/>
    </g>
    <g>
      <title>regex_automata::meta::strategy::Core::try_search_mayfail (1 samples, 0.50%)</title>
      <rect x="45.0000%" y="549" width="0.5000%" height="15" fill="rgb(244,122,16)" fg:x="90" fg:w="1"/>
      <text x="45.2500%" y="559.50"/>
    </g>
    <g>
      <title>regex_automata::meta::wrappers::HybridEngine::try_search (1 samples, 0.50%)</title>
      <rect x="45.0000%" y="533" width="0.5000%" height="15" fill="rgb(216,227,19)" fg:x="90" fg:w="1"/>
      <text x="45.2500%" y="543.50"/>
    </g>
    <g>
      <title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.50%)</title>
      <rect x="45.0000%" y="517" width="0.5000%" height="15" fill="rgb(234,124,32)" fg:x="90" fg:w="1"/>
      <text x="45.2500%" y="527.50"/>
    </g>
    <g>
      <title>regex_automata::hybrid::dfa::DFA::try_search_fwd (1 samples, 0.50%)</title>
      <rect x="45.0000%" y="501" width="0.5000%" height="15" fill="rgb(209,194,30)" fg:x="90" fg:w="1"/>
      <text x="45.2500%" y="511.50"/>
    </g>
    <g>
      <title>regex_automata::hybrid::search::find_fwd (1 samples, 0.50%)</title>
      <rect x="45.0000%" y="485" width="0.5000%" height="15" fill="rgb(254,161,34)" fg:x="90" fg:w="1"/>
      <text x="45.2500%" y="495.50"/>
    </g>
    <g>
      <title>regex_automata::hybrid::search::find_fwd_imp (1 samples, 0.50%)</title>
      <rect x="45.0000%" y="469" width="0.5000%" height="15" fill="rgb(246,79,15)" fg:x="90" fg:w="1"/>
      <text x="45.2500%" y="479.50"/>
    </g>
    <g>
      <title>regex_automata::hybrid::dfa::DFA::next_state_untagged_unchecked (1 samples, 0.50%)</title>
      <rect x="45.0000%" y="453" width="0.5000%" height="15" fill="rgb(222,34,27)" fg:x="90" fg:w="1"/>
      <text x="45.2500%" y="463.50"/>
    </g>
    <g>
      <title>s4lib::data::datetime::bytes_to_regex_to_datetime (5 samples, 2.50%)</title>
      <rect x="43.5000%" y="661" width="2.5000%" height="15" fill="rgb(252,84,36)" fg:x="87" fg:w="5"/>
      <text x="43.7500%" y="671.50">s4..</text>
    </g>
    <g>
      <title>regex::regex::bytes::Captures::name (1 samples, 0.50%)</title>
      <rect x="45.5000%" y="645" width="0.5000%" height="15" fill="rgb(227,58,29)" fg:x="91" fg:w="1"/>
      <text x="45.7500%" y="655.50"/>
    </g>
    <g>
      <title>regex_automata::util::captures::Captures::get_group_by_name (1 samples, 0.50%)</title>
      <rect x="45.5000%" y="629" width="0.5000%" height="15" fill="rgb(243,115,33)" fg:x="91" fg:w="1"/>
      <text x="45.7500%" y="639.50"/>
    </g>
    <g>
      <title>regex_automata::util::captures::GroupInfo::to_index (1 samples, 0.50%)</title>
      <rect x="45.5000%" y="613" width="0.5000%" height="15" fill="rgb(250,225,43)" fg:x="91" fg:w="1"/>
      <text x="45.7500%" y="623.50"/>
    </g>
    <g>
      <title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.50%)</title>
      <rect x="45.5000%" y="597" width="0.5000%" height="15" fill="rgb(218,89,21)" fg:x="91" fg:w="1"/>
      <text x="45.7500%" y="607.50"/>
    </g>
    <g>
      <title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.50%)</title>
      <rect x="45.5000%" y="581" width="0.5000%" height="15" fill="rgb(207,60,33)" fg:x="91" fg:w="1"/>
      <text x="45.7500%" y="591.50"/>
    </g>
    <g>
      <title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.50%)</title>
      <rect x="45.5000%" y="565" width="0.5000%" height="15" fill="rgb(207,224,35)" fg:x="91" fg:w="1"/>
      <text x="45.7500%" y="575.50"/>
    </g>
    <g>
      <title>hashbrown::map::make_hash (1 samples, 0.50%)</title>
      <rect x="45.5000%" y="549" width="0.5000%" height="15" fill="rgb(241,1,29)" fg:x="91" fg:w="1"/>
      <text x="45.7500%" y="559.50"/>
    </g>
    <g>
      <title>core::hash::BuildHasher::hash_one (1 samples, 0.50%)</title>
      <rect x="45.5000%" y="533" width="0.5000%" height="15" fill="rgb(222,198,6)" fg:x="91" fg:w="1"/>
      <text x="45.7500%" y="543.50"/>
    </g>
    <g>
      <title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.50%)</title>
      <rect x="45.5000%" y="517" width="0.5000%" height="15" fill="rgb(212,33,36)" fg:x="91" fg:w="1"/>
      <text x="45.7500%" y="527.50"/>
    </g>
    <g>
      <title>core::hash::impls::&lt;impl core::hash::Hash for str&gt;::hash (1 samples, 0.50%)</title>
      <rect x="45.5000%" y="501" width="0.5000%" height="15" fill="rgb(250,187,26)" fg:x="91" fg:w="1"/>
      <text x="45.7500%" y="511.50"/>
    </g>
    <g>
      <title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write_str (1 samples, 0.50%)</title>
      <rect x="45.5000%" y="485" width="0.5000%" height="15" fill="rgb(208,211,8)" fg:x="91" fg:w="1"/>
      <text x="45.7500%" y="495.50"/>
    </g>
    <g>
      <title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write_str (1 samples, 0.50%)</title>
      <rect x="45.5000%" y="469" width="0.5000%" height="15" fill="rgb(206,132,37)" fg:x="91" fg:w="1"/>
      <text x="45.7500%" y="479.50"/>
    </g>
    <g>
      <title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write_str (1 samples, 0.50%)</title>
      <rect x="45.5000%" y="453" width="0.5000%" height="15" fill="rgb(243,187,24)" fg:x="91" fg:w="1"/>
      <text x="45.7500%" y="463.50"/>
    </g>
    <g>
      <title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.50%)</title>
      <rect x="45.5000%" y="437" width="0.5000%" height="15" fill="rgb(236,225,40)" fg:x="91" fg:w="1"/>
      <text x="45.7500%" y="447.50"/>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::find_datetime_in_line (6 samples, 3.00%)</title>
      <rect x="43.5000%" y="677" width="3.0000%" height="15" fill="rgb(212,53,9)" fg:x="87" fg:w="6"/>
      <text x="43.7500%" y="687.50">s4l..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::parse_datetime_in_line (7 samples, 3.50%)</title>
      <rect x="43.5000%" y="693" width="3.5000%" height="15" fill="rgb(234,54,15)" fg:x="87" fg:w="7"/>
      <text x="43.7500%" y="703.50">s4l..</text>
    </g>
    <g>
      <title>itertools::Itertools::sorted_by (1 samples, 0.50%)</title>
      <rect x="46.5000%" y="677" width="0.5000%" height="15" fill="rgb(225,164,23)" fg:x="93" fg:w="1"/>
      <text x="46.7500%" y="687.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.50%)</title>
      <rect x="46.5000%" y="661" width="0.5000%" height="15" fill="rgb(247,137,3)" fg:x="93" fg:w="1"/>
      <text x="46.7500%" y="671.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.50%)</title>
      <rect x="46.5000%" y="645" width="0.5000%" height="15" fill="rgb(227,158,43)" fg:x="93" fg:w="1"/>
      <text x="46.7500%" y="655.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.50%)</title>
      <rect x="46.5000%" y="629" width="0.5000%" height="15" fill="rgb(232,14,28)" fg:x="93" fg:w="1"/>
      <text x="46.7500%" y="639.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.50%)</title>
      <rect x="46.5000%" y="613" width="0.5000%" height="15" fill="rgb(253,154,22)" fg:x="93" fg:w="1"/>
      <text x="46.7500%" y="623.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.50%)</title>
      <rect x="46.5000%" y="597" width="0.5000%" height="15" fill="rgb(249,207,12)" fg:x="93" fg:w="1"/>
      <text x="46.7500%" y="607.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.50%)</title>
      <rect x="46.5000%" y="581" width="0.5000%" height="15" fill="rgb(224,194,14)" fg:x="93" fg:w="1"/>
      <text x="46.7500%" y="591.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.50%)</title>
      <rect x="46.5000%" y="565" width="0.5000%" height="15" fill="rgb(227,204,5)" fg:x="93" fg:w="1"/>
      <text x="46.7500%" y="575.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.50%)</title>
      <rect x="46.5000%" y="549" width="0.5000%" height="15" fill="rgb(231,114,21)" fg:x="93" fg:w="1"/>
      <text x="46.7500%" y="559.50"/>
    </g>
    <g>
      <title>alloc::alloc::Global::alloc_impl (1 samples, 0.50%)</title>
      <rect x="46.5000%" y="533" width="0.5000%" height="15" fill="rgb(238,209,2)" fg:x="93" fg:w="1"/>
      <text x="46.7500%" y="543.50"/>
    </g>
    <g>
      <title>alloc::alloc::alloc (1 samples, 0.50%)</title>
      <rect x="46.5000%" y="517" width="0.5000%" height="15" fill="rgb(253,135,41)" fg:x="93" fg:w="1"/>
      <text x="46.7500%" y="527.50"/>
    </g>
    <g>
      <title>__GI___libc_malloc (1 samples, 0.50%)</title>
      <rect x="46.5000%" y="501" width="0.5000%" height="15" fill="rgb(206,112,53)" fg:x="93" fg:w="1"/>
      <text x="46.7500%" y="511.50"/>
    </g>
    <g>
      <title>_int_malloc (1 samples, 0.50%)</title>
      <rect x="46.5000%" y="485" width="0.5000%" height="15" fill="rgb(222,219,51)" fg:x="93" fg:w="1"/>
      <text x="46.7500%" y="495.50"/>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::parse_datetime_in_line_cached (8 samples, 4.00%)</title>
      <rect x="43.5000%" y="709" width="4.0000%" height="15" fill="rgb(231,75,50)" fg:x="87" fg:w="8"/>
      <text x="43.7500%" y="719.50">s4li..</text>
    </g>
    <g>
      <title>lru::LruCache&lt;K,V,S&gt;::put (1 samples, 0.50%)</title>
      <rect x="47.0000%" y="693" width="0.5000%" height="15" fill="rgb(244,170,33)" fg:x="94" fg:w="1"/>
      <text x="47.2500%" y="703.50"/>
    </g>
    <g>
      <title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::range (2 samples, 1.00%)</title>
      <rect x="47.5000%" y="677" width="1.0000%" height="15" fill="rgb(253,189,7)" fg:x="95" fg:w="2"/>
      <text x="47.7500%" y="687.50"/>
    </g>
    <g>
      <title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::range_search (2 samples, 1.00%)</title>
      <rect x="47.5000%" y="661" width="1.0000%" height="15" fill="rgb(231,205,12)" fg:x="95" fg:w="2"/>
      <text x="47.7500%" y="671.50"/>
    </g>
    <g>
      <title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::find_leaf_edges_spanning_range (2 samples, 1.00%)</title>
      <rect x="47.5000%" y="645" width="1.0000%" height="15" fill="rgb(254,228,40)" fg:x="95" fg:w="2"/>
      <text x="47.7500%" y="655.50"/>
    </g>
    <g>
      <title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::find_upper_bound_edge (2 samples, 1.00%)</title>
      <rect x="47.5000%" y="629" width="1.0000%" height="15" fill="rgb(233,228,1)" fg:x="95" fg:w="2"/>
      <text x="47.7500%" y="639.50"/>
    </g>
    <g>
      <title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_upper_bound_index (2 samples, 1.00%)</title>
      <rect x="47.5000%" y="613" width="1.0000%" height="15" fill="rgb(221,199,33)" fg:x="95" fg:w="2"/>
      <text x="47.7500%" y="623.50"/>
    </g>
    <g>
      <title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (2 samples, 1.00%)</title>
      <rect x="47.5000%" y="597" width="1.0000%" height="15" fill="rgb(233,132,38)" fg:x="95" fg:w="2"/>
      <text x="47.7500%" y="607.50"/>
    </g>
    <g>
      <title>&lt;rangemap::range_wrapper::RangeStartWrapper&lt;T&gt; as core::cmp::Ord&gt;::cmp (2 samples, 1.00%)</title>
      <rect x="47.5000%" y="581" width="1.0000%" height="15" fill="rgb(213,83,29)" fg:x="95" fg:w="2"/>
      <text x="47.7500%" y="591.50"/>
    </g>
    <g>
      <title>core::cmp::impls::&lt;impl core::cmp::Ord for u64&gt;::cmp (2 samples, 1.00%)</title>
      <rect x="47.5000%" y="565" width="1.0000%" height="15" fill="rgb(231,0,6)" fg:x="95" fg:w="2"/>
      <text x="47.7500%" y="575.50"/>
    </g>
    <g>
      <title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (1 samples, 0.50%)</title>
      <rect x="48.5000%" y="661" width="0.5000%" height="15" fill="rgb(219,192,38)" fg:x="97" fg:w="1"/>
      <text x="48.7500%" y="671.50"/>
    </g>
    <g>
      <title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.50%)</title>
      <rect x="48.5000%" y="645" width="0.5000%" height="15" fill="rgb(217,165,36)" fg:x="97" fg:w="1"/>
      <text x="48.7500%" y="655.50"/>
    </g>
    <g>
      <title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1 samples, 0.50%)</title>
      <rect x="48.5000%" y="629" width="0.5000%" height="15" fill="rgb(220,202,26)" fg:x="97" fg:w="1"/>
      <text x="48.7500%" y="639.50"/>
    </g>
    <g>
      <title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1 samples, 0.50%)</title>
      <rect x="48.5000%" y="613" width="0.5000%" height="15" fill="rgb(233,132,38)" fg:x="97" fg:w="1"/>
      <text x="48.7500%" y="623.50"/>
    </g>
    <g>
      <title>rangemap::map::RangeMap&lt;K,V&gt;::insert (4 samples, 2.00%)</title>
      <rect x="47.5000%" y="693" width="2.0000%" height="15" fill="rgb(216,177,54)" fg:x="95" fg:w="4"/>
      <text x="47.7500%" y="703.50">r..</text>
    </g>
    <g>
      <title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 1.00%)</title>
      <rect x="48.5000%" y="677" width="1.0000%" height="15" fill="rgb(213,87,31)" fg:x="97" fg:w="2"/>
      <text x="48.7500%" y="687.50"/>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::insert_sysline (5 samples, 2.50%)</title>
      <rect x="47.5000%" y="709" width="2.5000%" height="15" fill="rgb(207,59,0)" fg:x="95" fg:w="5"/>
      <text x="47.7500%" y="719.50">s4..</text>
    </g>
    <g>
      <title>alloc::sync::Arc&lt;T&gt;::new (1 samples, 0.50%)</title>
      <rect x="49.5000%" y="693" width="0.5000%" height="15" fill="rgb(221,10,3)" fg:x="99" fg:w="1"/>
      <text x="49.7500%" y="703.50"/>
    </g>
    <g>
      <title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.50%)</title>
      <rect x="49.5000%" y="677" width="0.5000%" height="15" fill="rgb(209,114,30)" fg:x="99" fg:w="1"/>
      <text x="49.7500%" y="687.50"/>
    </g>
    <g>
      <title>alloc::alloc::exchange_malloc (1 samples, 0.50%)</title>
      <rect x="49.5000%" y="661" width="0.5000%" height="15" fill="rgb(248,129,10)" fg:x="99" fg:w="1"/>
      <text x="49.7500%" y="671.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.50%)</title>
      <rect x="49.5000%" y="645" width="0.5000%" height="15" fill="rgb(231,114,21)" fg:x="99" fg:w="1"/>
      <text x="49.7500%" y="655.50"/>
    </g>
    <g>
      <title>alloc::alloc::Global::alloc_impl (1 samples, 0.50%)</title>
      <rect x="49.5000%" y="629" width="0.5000%" height="15" fill="rgb(238,209,2)" fg:x="99" fg:w="1"/>
      <text x="49.7500%" y="639.50"/>
    </g>
    <g>
      <title>alloc::alloc::alloc (1 samples, 0.50%)</title>
      <rect x="49.5000%" y="613" width="0.5000%" height="15" fill="rgb(253,135,41)" fg:x="99" fg:w="1"/>
      <text x="49.7500%" y="623.50"/>
    </g>
    <g>
      <title>__GI___libc_malloc (1 samples, 0.50%)</title>
      <rect x="49.5000%" y="597" width="0.5000%" height="15" fill="rgb(206,112,53)" fg:x="99" fg:w="1"/>
      <text x="49.7500%" y="607.50"/>
    </g>
    <g>
      <title>s4lib::readers::linereader::LineReader::check_store_LRU (1 samples, 0.50%)</title>
      <rect x="50.0000%" y="693" width="0.5000%" height="15" fill="rgb(208,26,7)" fg:x="100" fg:w="1"/>
      <text x="50.2500%" y="703.50"/>
    </g>
    <g>
      <title>lru::LruCache&lt;K,V,S&gt;::get (1 samples, 0.50%)</title>
      <rect x="50.0000%" y="677" width="0.5000%" height="15" fill="rgb(207,105,41)" fg:x="100" fg:w="1"/>
      <text x="50.2500%" y="687.50"/>
    </g>
    <g>
      <title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.50%)</title>
      <rect x="50.0000%" y="661" width="0.5000%" height="15" fill="rgb(207,58,42)" fg:x="100" fg:w="1"/>
      <text x="50.2500%" y="671.50"/>
    </g>
    <g>
      <title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.50%)</title>
      <rect x="50.0000%" y="645" width="0.5000%" height="15" fill="rgb(243,133,17)" fg:x="100" fg:w="1"/>
      <text x="50.2500%" y="655.50"/>
    </g>
    <g>
      <title>hashbrown::map::make_hash (1 samples, 0.50%)</title>
      <rect x="50.0000%" y="629" width="0.5000%" height="15" fill="rgb(241,1,29)" fg:x="100" fg:w="1"/>
      <text x="50.2500%" y="639.50"/>
    </g>
    <g>
      <title>&lt;ahash::fallback_hash::AHasher as core::hash::Hasher&gt;::finish (1 samples, 0.50%)</title>
      <rect x="50.0000%" y="613" width="0.5000%" height="15" fill="rgb(233,144,3)" fg:x="100" fg:w="1"/>
      <text x="50.2500%" y="623.50"/>
    </g>
    <g>
      <title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.50%)</title>
      <rect x="50.0000%" y="597" width="0.5000%" height="15" fill="rgb(223,143,42)" fg:x="100" fg:w="1"/>
      <text x="50.2500%" y="607.50"/>
    </g>
    <g>
      <title>s4lib::data::line::Line::new (1 samples, 0.50%)</title>
      <rect x="50.5000%" y="693" width="0.5000%" height="15" fill="rgb(249,127,27)" fg:x="101" fg:w="1"/>
      <text x="50.7500%" y="703.50"/>
    </g>
    <g>
      <title>&lt;s4lib::data::line::Line as core::default::Default&gt;::default (1 samples, 0.50%)</title>
      <rect x="50.5000%" y="677" width="0.5000%" height="15" fill="rgb(214,47,30)" fg:x="101" fg:w="1"/>
      <text x="50.7500%" y="687.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.50%)</title>
      <rect x="50.5000%" y="661" width="0.5000%" height="15" fill="rgb(253,154,22)" fg:x="101" fg:w="1"/>
      <text x="50.7500%" y="671.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.50%)</title>
      <rect x="50.5000%" y="645" width="0.5000%" height="15" fill="rgb(249,207,12)" fg:x="101" fg:w="1"/>
      <text x="50.7500%" y="655.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.50%)</title>
      <rect x="50.5000%" y="629" width="0.5000%" height="15" fill="rgb(224,194,14)" fg:x="101" fg:w="1"/>
      <text x="50.7500%" y="639.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.50%)</title>
      <rect x="50.5000%" y="613" width="0.5000%" height="15" fill="rgb(227,204,5)" fg:x="101" fg:w="1"/>
      <text x="50.7500%" y="623.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.50%)</title>
      <rect x="50.5000%" y="597" width="0.5000%" height="15" fill="rgb(231,114,21)" fg:x="101" fg:w="1"/>
      <text x="50.7500%" y="607.50"/>
    </g>
    <g>
      <title>alloc::alloc::Global::alloc_impl (1 samples, 0.50%)</title>
      <rect x="50.5000%" y="581" width="0.5000%" height="15" fill="rgb(238,209,2)" fg:x="101" fg:w="1"/>
      <text x="50.7500%" y="591.50"/>
    </g>
    <g>
      <title>alloc::alloc::alloc (1 samples, 0.50%)</title>
      <rect x="50.5000%" y="565" width="0.5000%" height="15" fill="rgb(253,135,41)" fg:x="101" fg:w="1"/>
      <text x="50.7500%" y="575.50"/>
    </g>
    <g>
      <title>__GI___libc_malloc (1 samples, 0.50%)</title>
      <rect x="50.5000%" y="549" width="0.5000%" height="15" fill="rgb(206,112,53)" fg:x="101" fg:w="1"/>
      <text x="50.7500%" y="559.50"/>
    </g>
    <g>
      <title>checked_request2size (1 samples, 0.50%)</title>
      <rect x="50.5000%" y="533" width="0.5000%" height="15" fill="rgb(236,198,42)" fg:x="101" fg:w="1"/>
      <text x="50.7500%" y="543.50"/>
    </g>
    <g>
      <title>s4lib::readers::syslogprocessor::SyslogProcessor::find_sysline_between_datetime_filters (16 samples, 8.00%)</title>
      <rect x="43.5000%" y="789" width="8.0000%" height="15" fill="rgb(205,32,8)" fg:x="87" fg:w="16"/>
      <text x="43.7500%" y="799.50">s4lib::read..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::find_sysline_between_datetime_filters (16 samples, 8.00%)</title>
      <rect x="43.5000%" y="773" width="8.0000%" height="15" fill="rgb(241,74,20)" fg:x="87" fg:w="16"/>
      <text x="43.7500%" y="783.50">s4lib::read..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::find_sysline_at_datetime_filter_binary_search (16 samples, 8.00%)</title>
      <rect x="43.5000%" y="757" width="8.0000%" height="15" fill="rgb(206,70,45)" fg:x="87" fg:w="16"/>
      <text x="43.7500%" y="767.50">s4lib::read..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::find_sysline (16 samples, 8.00%)</title>
      <rect x="43.5000%" y="741" width="8.0000%" height="15" fill="rgb(223,164,31)" fg:x="87" fg:w="16"/>
      <text x="43.7500%" y="751.50">s4lib::read..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::find_sysline_year (16 samples, 8.00%)</title>
      <rect x="43.5000%" y="725" width="8.0000%" height="15" fill="rgb(234,169,18)" fg:x="87" fg:w="16"/>
      <text x="43.7500%" y="735.50">s4lib::read..</text>
    </g>
    <g>
      <title>s4lib::readers::linereader::LineReader::find_line (3 samples, 1.50%)</title>
      <rect x="50.0000%" y="709" width="1.5000%" height="15" fill="rgb(238,98,28)" fg:x="100" fg:w="3"/>
      <text x="50.2500%" y="719.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.50%)</title>
      <rect x="51.0000%" y="693" width="0.5000%" height="15" fill="rgb(215,149,39)" fg:x="102" fg:w="1"/>
      <text x="51.2500%" y="703.50"/>
    </g>
    <g>
      <title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.50%)</title>
      <rect x="51.0000%" y="677" width="0.5000%" height="15" fill="rgb(250,51,46)" fg:x="102" fg:w="1"/>
      <text x="51.2500%" y="687.50"/>
    </g>
    <g>
      <title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.50%)</title>
      <rect x="51.0000%" y="661" width="0.5000%" height="15" fill="rgb(254,116,45)" fg:x="102" fg:w="1"/>
      <text x="51.2500%" y="671.50"/>
    </g>
    <g>
      <title>s4lib::readers::syslogprocessor::SyslogProcessor::drop_data_try (1 samples, 0.50%)</title>
      <rect x="51.5000%" y="789" width="0.5000%" height="15" fill="rgb(244,39,16)" fg:x="103" fg:w="1"/>
      <text x="51.7500%" y="799.50"/>
    </g>
    <g>
      <title>s4lib::readers::syslogprocessor::SyslogProcessor::drop_data (1 samples, 0.50%)</title>
      <rect x="51.5000%" y="773" width="0.5000%" height="15" fill="rgb(215,155,30)" fg:x="103" fg:w="1"/>
      <text x="51.7500%" y="783.50"/>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::drop_data (1 samples, 0.50%)</title>
      <rect x="51.5000%" y="757" width="0.5000%" height="15" fill="rgb(244,67,10)" fg:x="103" fg:w="1"/>
      <text x="51.7500%" y="767.50"/>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::drop_sysline (1 samples, 0.50%)</title>
      <rect x="51.5000%" y="741" width="0.5000%" height="15" fill="rgb(224,6,32)" fg:x="103" fg:w="1"/>
      <text x="51.7500%" y="751.50"/>
    </g>
    <g>
      <title>alloc::sync::Arc&lt;T&gt;::try_unwrap (1 samples, 0.50%)</title>
      <rect x="51.5000%" y="725" width="0.5000%" height="15" fill="rgb(221,73,3)" fg:x="103" fg:w="1"/>
      <text x="51.7500%" y="735.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;s4lib::data::sysline::Sysline&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="51.5000%" y="709" width="0.5000%" height="15" fill="rgb(237,210,34)" fg:x="103" fg:w="1"/>
      <text x="51.7500%" y="719.50"/>
    </g>
    <g>
      <title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.50%)</title>
      <rect x="51.5000%" y="693" width="0.5000%" height="15" fill="rgb(205,138,54)" fg:x="103" fg:w="1"/>
      <text x="51.7500%" y="703.50"/>
    </g>
    <g>
      <title>crossbeam_channel::waker::SyncWaker::notify (1 samples, 0.50%)</title>
      <rect x="52.0000%" y="725" width="0.5000%" height="15" fill="rgb(222,105,38)" fg:x="104" fg:w="1"/>
      <text x="52.2500%" y="735.50"/>
    </g>
    <g>
      <title>crossbeam_channel::waker::Waker::try_select (1 samples, 0.50%)</title>
      <rect x="52.0000%" y="709" width="0.5000%" height="15" fill="rgb(226,5,34)" fg:x="104" fg:w="1"/>
      <text x="52.2500%" y="719.50"/>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (1 samples, 0.50%)</title>
      <rect x="52.0000%" y="693" width="0.5000%" height="15" fill="rgb(254,35,30)" fg:x="104" fg:w="1"/>
      <text x="52.2500%" y="703.50"/>
    </g>
    <g>
      <title>crossbeam_channel::waker::Waker::try_select::{{closure}} (1 samples, 0.50%)</title>
      <rect x="52.0000%" y="677" width="0.5000%" height="15" fill="rgb(213,3,5)" fg:x="104" fg:w="1"/>
      <text x="52.2500%" y="687.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::remove (1 samples, 0.50%)</title>
      <rect x="52.0000%" y="661" width="0.5000%" height="15" fill="rgb(251,147,16)" fg:x="104" fg:w="1"/>
      <text x="52.2500%" y="671.50"/>
    </g>
    <g>
      <title>core::intrinsics::copy (1 samples, 0.50%)</title>
      <rect x="52.0000%" y="645" width="0.5000%" height="15" fill="rgb(221,136,15)" fg:x="104" fg:w="1"/>
      <text x="52.2500%" y="655.50"/>
    </g>
    <g>
      <title>__memmove_avx512_unaligned_erms (1 samples, 0.50%)</title>
      <rect x="52.0000%" y="629" width="0.5000%" height="15" fill="rgb(217,126,36)" fg:x="104" fg:w="1"/>
      <text x="52.2500%" y="639.50"/>
    </g>
    <g>
      <title>s4::chan_send (2 samples, 1.00%)</title>
      <rect x="52.0000%" y="789" width="1.0000%" height="15" fill="rgb(244,11,25)" fg:x="104" fg:w="2"/>
      <text x="52.2500%" y="799.50"/>
    </g>
    <g>
      <title>crossbeam_channel::channel::Sender&lt;T&gt;::send (2 samples, 1.00%)</title>
      <rect x="52.0000%" y="773" width="1.0000%" height="15" fill="rgb(211,156,23)" fg:x="104" fg:w="2"/>
      <text x="52.2500%" y="783.50"/>
    </g>
    <g>
      <title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (2 samples, 1.00%)</title>
      <rect x="52.0000%" y="757" width="1.0000%" height="15" fill="rgb(239,129,18)" fg:x="104" fg:w="2"/>
      <text x="52.2500%" y="767.50"/>
    </g>
    <g>
      <title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::write (2 samples, 1.00%)</title>
      <rect x="52.0000%" y="741" width="1.0000%" height="15" fill="rgb(217,57,9)" fg:x="104" fg:w="2"/>
      <text x="52.2500%" y="751.50"/>
    </g>
    <g>
      <title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.50%)</title>
      <rect x="52.5000%" y="725" width="0.5000%" height="15" fill="rgb(205,52,49)" fg:x="105" fg:w="1"/>
      <text x="52.7500%" y="735.50"/>
    </g>
    <g>
      <title>core::ptr::write (1 samples, 0.50%)</title>
      <rect x="52.5000%" y="709" width="0.5000%" height="15" fill="rgb(209,143,44)" fg:x="105" fg:w="1"/>
      <text x="52.7500%" y="719.50"/>
    </g>
    <g>
      <title>__memmove_avx512_unaligned_erms (1 samples, 0.50%)</title>
      <rect x="52.5000%" y="693" width="0.5000%" height="15" fill="rgb(217,126,36)" fg:x="105" fg:w="1"/>
      <text x="52.7500%" y="703.50"/>
    </g>
    <g>
      <title>__clone3 (71 samples, 35.50%)</title>
      <rect x="18.0000%" y="1045" width="35.5000%" height="15" fill="rgb(252,169,8)" fg:x="36" fg:w="71"/>
      <text x="18.2500%" y="1055.50">__clone3</text>
    </g>
    <g>
      <title>start_thread (71 samples, 35.50%)</title>
      <rect x="18.0000%" y="1029" width="35.5000%" height="15" fill="rgb(209,148,13)" fg:x="36" fg:w="71"/>
      <text x="18.2500%" y="1039.50">start_thread</text>
    </g>
    <g>
      <title>std::sys::unix::thread::Thread::new::thread_start (71 samples, 35.50%)</title>
      <rect x="18.0000%" y="1013" width="35.5000%" height="15" fill="rgb(215,36,0)" fg:x="36" fg:w="71"/>
      <text x="18.2500%" y="1023.50">std::sys::unix::thread::Thread::new::thread_start</text>
    </g>
    <g>
      <title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (71 samples, 35.50%)</title>
      <rect x="18.0000%" y="997" width="35.5000%" height="15" fill="rgb(228,202,16)" fg:x="36" fg:w="71"/>
      <text x="18.2500%" y="1007.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Arg..</text>
    </g>
    <g>
      <title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (71 samples, 35.50%)</title>
      <rect x="18.0000%" y="981" width="35.5000%" height="15" fill="rgb(228,202,16)" fg:x="36" fg:w="71"/>
      <text x="18.2500%" y="991.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Arg..</text>
    </g>
    <g>
      <title>core::ops::function::FnOnce::call_once{{vtable.shim}} (71 samples, 35.50%)</title>
      <rect x="18.0000%" y="965" width="35.5000%" height="15" fill="rgb(218,104,40)" fg:x="36" fg:w="71"/>
      <text x="18.2500%" y="975.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text>
    </g>
    <g>
      <title>std::thread::Builder::spawn_unchecked_::{{closure}} (71 samples, 35.50%)</title>
      <rect x="18.0000%" y="949" width="35.5000%" height="15" fill="rgb(249,4,49)" fg:x="36" fg:w="71"/>
      <text x="18.2500%" y="959.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text>
    </g>
    <g>
      <title>std::panic::catch_unwind (71 samples, 35.50%)</title>
      <rect x="18.0000%" y="933" width="35.5000%" height="15" fill="rgb(216,75,8)" fg:x="36" fg:w="71"/>
      <text x="18.2500%" y="943.50">std::panic::catch_unwind</text>
    </g>
    <g>
      <title>std::panicking::try (71 samples, 35.50%)</title>
      <rect x="18.0000%" y="917" width="35.5000%" height="15" fill="rgb(212,61,29)" fg:x="36" fg:w="71"/>
      <text x="18.2500%" y="927.50">std::panicking::try</text>
    </g>
    <g>
      <title>std::panicking::try::do_call (71 samples, 35.50%)</title>
      <rect x="18.0000%" y="901" width="35.5000%" height="15" fill="rgb(232,162,46)" fg:x="36" fg:w="71"/>
      <text x="18.2500%" y="911.50">std::panicking::try::do_call</text>
    </g>
    <g>
      <title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (71 samples, 35.50%)</title>
      <rect x="18.0000%" y="885" width="35.5000%" height="15" fill="rgb(230,83,13)" fg:x="36" fg:w="71"/>
      <text x="18.2500%" y="895.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::op..</text>
    </g>
    <g>
      <title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (71 samples, 35.50%)</title>
      <rect x="18.0000%" y="869" width="35.5000%" height="15" fill="rgb(214,132,49)" fg:x="36" fg:w="71"/>
      <text x="18.2500%" y="879.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{clo..</text>
    </g>
    <g>
      <title>std::sys_common::backtrace::__rust_begin_short_backtrace (71 samples, 35.50%)</title>
      <rect x="18.0000%" y="853" width="35.5000%" height="15" fill="rgb(210,88,34)" fg:x="36" fg:w="71"/>
      <text x="18.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text>
    </g>
    <g>
      <title>s4::processing_loop::{{closure}} (71 samples, 35.50%)</title>
      <rect x="18.0000%" y="837" width="35.5000%" height="15" fill="rgb(245,19,23)" fg:x="36" fg:w="71"/>
      <text x="18.2500%" y="847.50">s4::processing_loop::{{closure}}</text>
    </g>
    <g>
      <title>s4::exec_fileprocessor_thread (71 samples, 35.50%)</title>
      <rect x="18.0000%" y="821" width="35.5000%" height="15" fill="rgb(245,49,27)" fg:x="36" fg:w="71"/>
      <text x="18.2500%" y="831.50">s4::exec_fileprocessor_thread</text>
    </g>
    <g>
      <title>s4::exec_syslogprocessor (71 samples, 35.50%)</title>
      <rect x="18.0000%" y="805" width="35.5000%" height="15" fill="rgb(229,116,34)" fg:x="36" fg:w="71"/>
      <text x="18.2500%" y="815.50">s4::exec_syslogprocessor</text>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;s4lib::readers::syslogprocessor::SyslogProcessor&gt; (1 samples, 0.50%)</title>
      <rect x="53.0000%" y="789" width="0.5000%" height="15" fill="rgb(237,27,11)" fg:x="106" fg:w="1"/>
      <text x="53.2500%" y="799.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;s4lib::readers::syslinereader::SyslineReader&gt; (1 samples, 0.50%)</title>
      <rect x="53.0000%" y="773" width="0.5000%" height="15" fill="rgb(234,157,11)" fg:x="106" fg:w="1"/>
      <text x="53.2500%" y="783.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;s4lib::readers::linereader::LineReader&gt; (1 samples, 0.50%)</title>
      <rect x="53.0000%" y="757" width="0.5000%" height="15" fill="rgb(244,46,42)" fg:x="106" fg:w="1"/>
      <text x="53.2500%" y="767.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;u64,u64&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="53.0000%" y="741" width="0.5000%" height="15" fill="rgb(247,127,3)" fg:x="106" fg:w="1"/>
      <text x="53.2500%" y="751.50"/>
    </g>
    <g>
      <title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.50%)</title>
      <rect x="53.0000%" y="725" width="0.5000%" height="15" fill="rgb(225,171,22)" fg:x="106" fg:w="1"/>
      <text x="53.2500%" y="735.50"/>
    </g>
    <g>
      <title>core::mem::drop (1 samples, 0.50%)</title>
      <rect x="53.0000%" y="709" width="0.5000%" height="15" fill="rgb(253,152,51)" fg:x="106" fg:w="1"/>
      <text x="53.2500%" y="719.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;u64,u64&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="53.0000%" y="693" width="0.5000%" height="15" fill="rgb(233,203,53)" fg:x="106" fg:w="1"/>
      <text x="53.2500%" y="703.50"/>
    </g>
    <g>
      <title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.50%)</title>
      <rect x="53.0000%" y="677" width="0.5000%" height="15" fill="rgb(240,72,17)" fg:x="106" fg:w="1"/>
      <text x="53.2500%" y="687.50"/>
    </g>
    <g>
      <title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.50%)</title>
      <rect x="53.0000%" y="661" width="0.5000%" height="15" fill="rgb(205,132,33)" fg:x="106" fg:w="1"/>
      <text x="53.2500%" y="671.50"/>
    </g>
    <g>
      <title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (1 samples, 0.50%)</title>
      <rect x="53.0000%" y="645" width="0.5000%" height="15" fill="rgb(238,93,36)" fg:x="106" fg:w="1"/>
      <text x="53.2500%" y="655.50"/>
    </g>
    <g>
      <title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (1 samples, 0.50%)</title>
      <rect x="53.0000%" y="629" width="0.5000%" height="15" fill="rgb(251,197,21)" fg:x="106" fg:w="1"/>
      <text x="53.2500%" y="639.50"/>
    </g>
    <g>
      <title>alloc::collections::btree::mem::replace (1 samples, 0.50%)</title>
      <rect x="53.0000%" y="613" width="0.5000%" height="15" fill="rgb(225,213,27)" fg:x="106" fg:w="1"/>
      <text x="53.2500%" y="623.50"/>
    </g>
    <g>
      <title>core::ptr::read (1 samples, 0.50%)</title>
      <rect x="53.0000%" y="597" width="0.5000%" height="15" fill="rgb(222,157,29)" fg:x="106" fg:w="1"/>
      <text x="53.2500%" y="607.50"/>
    </g>
    <g>
      <title>_int_malloc (1 samples, 0.50%)</title>
      <rect x="53.5000%" y="453" width="0.5000%" height="15" fill="rgb(222,219,51)" fg:x="107" fg:w="1"/>
      <text x="53.7500%" y="463.50"/>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 1.00%)</title>
      <rect x="53.5000%" y="661" width="1.0000%" height="15" fill="rgb(214,109,53)" fg:x="107" fg:w="2"/>
      <text x="53.7500%" y="671.50"/>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (2 samples, 1.00%)</title>
      <rect x="53.5000%" y="645" width="1.0000%" height="15" fill="rgb(254,35,30)" fg:x="107" fg:w="2"/>
      <text x="53.7500%" y="655.50"/>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 1.00%)</title>
      <rect x="53.5000%" y="629" width="1.0000%" height="15" fill="rgb(226,169,23)" fg:x="107" fg:w="2"/>
      <text x="53.7500%" y="639.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (2 samples, 1.00%)</title>
      <rect x="53.5000%" y="613" width="1.0000%" height="15" fill="rgb(205,130,14)" fg:x="107" fg:w="2"/>
      <text x="53.7500%" y="623.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 1.00%)</title>
      <rect x="53.5000%" y="597" width="1.0000%" height="15" fill="rgb(235,200,16)" fg:x="107" fg:w="2"/>
      <text x="53.7500%" y="607.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 1.00%)</title>
      <rect x="53.5000%" y="581" width="1.0000%" height="15" fill="rgb(213,34,18)" fg:x="107" fg:w="2"/>
      <text x="53.7500%" y="591.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (2 samples, 1.00%)</title>
      <rect x="53.5000%" y="565" width="1.0000%" height="15" fill="rgb(253,35,22)" fg:x="107" fg:w="2"/>
      <text x="53.7500%" y="575.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::literal_trie::LiteralTrie::compile (2 samples, 1.00%)</title>
      <rect x="53.5000%" y="549" width="1.0000%" height="15" fill="rgb(233,39,2)" fg:x="107" fg:w="2"/>
      <text x="53.7500%" y="559.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 1.00%)</title>
      <rect x="53.5000%" y="533" width="1.0000%" height="15" fill="rgb(241,229,15)" fg:x="107" fg:w="2"/>
      <text x="53.7500%" y="543.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 1.00%)</title>
      <rect x="53.5000%" y="517" width="1.0000%" height="15" fill="rgb(254,103,39)" fg:x="107" fg:w="2"/>
      <text x="53.7500%" y="527.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 1.00%)</title>
      <rect x="53.5000%" y="501" width="1.0000%" height="15" fill="rgb(254,53,35)" fg:x="107" fg:w="2"/>
      <text x="53.7500%" y="511.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::finish_grow (2 samples, 1.00%)</title>
      <rect x="53.5000%" y="485" width="1.0000%" height="15" fill="rgb(237,133,22)" fg:x="107" fg:w="2"/>
      <text x="53.7500%" y="495.50"/>
    </g>
    <g>
      <title>__GI___libc_malloc (2 samples, 1.00%)</title>
      <rect x="53.5000%" y="469" width="1.0000%" height="15" fill="rgb(206,112,53)" fg:x="107" fg:w="2"/>
      <text x="53.7500%" y="479.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="54.0000%" y="453" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="108" fg:w="1"/>
      <text x="54.2500%" y="463.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="54.0000%" y="437" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="108" fg:w="1"/>
      <text x="54.2500%" y="447.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="54.0000%" y="421" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="108" fg:w="1"/>
      <text x="54.2500%" y="431.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="54.0000%" y="405" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="108" fg:w="1"/>
      <text x="54.2500%" y="415.50"/>
    </g>
    <g>
      <title>std::sys_common::once::futex::Once::call (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="1029" width="1.5000%" height="15" fill="rgb(246,168,49)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="1039.50"/>
    </g>
    <g>
      <title>std::sync::once::Once::call_once::{{closure}} (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="1013" width="1.5000%" height="15" fill="rgb(237,63,35)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="1023.50"/>
    </g>
    <g>
      <title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="997" width="1.5000%" height="15" fill="rgb(238,7,51)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="1007.50"/>
    </g>
    <g>
      <title>core::ops::function::FnOnce::call_once (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="981" width="1.5000%" height="15" fill="rgb(210,80,10)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="991.50"/>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="965" width="1.5000%" height="15" fill="rgb(205,24,29)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="975.50"/>
    </g>
    <g>
      <title>regex::regex::bytes::Regex::new (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="949" width="1.5000%" height="15" fill="rgb(246,224,25)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="959.50"/>
    </g>
    <g>
      <title>regex::builders::bytes::RegexBuilder::build (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="933" width="1.5000%" height="15" fill="rgb(236,76,51)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="943.50"/>
    </g>
    <g>
      <title>regex::builders::Builder::build_one_bytes (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="917" width="1.5000%" height="15" fill="rgb(233,102,7)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="927.50"/>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="901" width="1.5000%" height="15" fill="rgb(212,33,22)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="911.50"/>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="885" width="1.5000%" height="15" fill="rgb(236,25,32)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="895.50"/>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many_from_hir (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="869" width="1.5000%" height="15" fill="rgb(250,142,30)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="879.50"/>
    </g>
    <g>
      <title>regex_automata::meta::strategy::new (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="853" width="1.5000%" height="15" fill="rgb(243,171,22)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="863.50"/>
    </g>
    <g>
      <title>regex_automata::meta::strategy::Core::new (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="837" width="1.5000%" height="15" fill="rgb(222,69,27)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="847.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="821" width="1.5000%" height="15" fill="rgb(226,42,16)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="831.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="805" width="1.5000%" height="15" fill="rgb(242,129,17)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="815.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="789" width="1.5000%" height="15" fill="rgb(247,137,3)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="799.50"/>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="773" width="1.5000%" height="15" fill="rgb(214,109,53)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="783.50"/>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="757" width="1.5000%" height="15" fill="rgb(254,35,30)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="767.50"/>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="741" width="1.5000%" height="15" fill="rgb(226,169,23)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="751.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="725" width="1.5000%" height="15" fill="rgb(218,216,52)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="735.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="709" width="1.5000%" height="15" fill="rgb(235,200,16)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="719.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="693" width="1.5000%" height="15" fill="rgb(213,34,18)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="703.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (3 samples, 1.50%)</title>
      <rect x="53.5000%" y="677" width="1.5000%" height="15" fill="rgb(210,105,37)" fg:x="107" fg:w="3"/>
      <text x="53.7500%" y="687.50"/>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.50%)</title>
      <rect x="54.5000%" y="661" width="0.5000%" height="15" fill="rgb(222,94,14)" fg:x="109" fg:w="1"/>
      <text x="54.7500%" y="671.50"/>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (1 samples, 0.50%)</title>
      <rect x="54.5000%" y="645" width="0.5000%" height="15" fill="rgb(254,35,30)" fg:x="109" fg:w="1"/>
      <text x="54.7500%" y="655.50"/>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.50%)</title>
      <rect x="54.5000%" y="629" width="0.5000%" height="15" fill="rgb(226,169,23)" fg:x="109" fg:w="1"/>
      <text x="54.7500%" y="639.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (1 samples, 0.50%)</title>
      <rect x="54.5000%" y="613" width="0.5000%" height="15" fill="rgb(205,130,14)" fg:x="109" fg:w="1"/>
      <text x="54.7500%" y="623.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.50%)</title>
      <rect x="54.5000%" y="597" width="0.5000%" height="15" fill="rgb(235,200,16)" fg:x="109" fg:w="1"/>
      <text x="54.7500%" y="607.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.50%)</title>
      <rect x="54.5000%" y="581" width="0.5000%" height="15" fill="rgb(213,34,18)" fg:x="109" fg:w="1"/>
      <text x="54.7500%" y="591.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (1 samples, 0.50%)</title>
      <rect x="54.5000%" y="565" width="0.5000%" height="15" fill="rgb(253,35,22)" fg:x="109" fg:w="1"/>
      <text x="54.7500%" y="575.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::literal_trie::LiteralTrie::compile (1 samples, 0.50%)</title>
      <rect x="54.5000%" y="549" width="0.5000%" height="15" fill="rgb(233,39,2)" fg:x="109" fg:w="1"/>
      <text x="54.7500%" y="559.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.50%)</title>
      <rect x="54.5000%" y="533" width="0.5000%" height="15" fill="rgb(241,229,15)" fg:x="109" fg:w="1"/>
      <text x="54.7500%" y="543.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.50%)</title>
      <rect x="54.5000%" y="517" width="0.5000%" height="15" fill="rgb(254,103,39)" fg:x="109" fg:w="1"/>
      <text x="54.7500%" y="527.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.50%)</title>
      <rect x="54.5000%" y="501" width="0.5000%" height="15" fill="rgb(254,53,35)" fg:x="109" fg:w="1"/>
      <text x="54.7500%" y="511.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::finish_grow (1 samples, 0.50%)</title>
      <rect x="54.5000%" y="485" width="0.5000%" height="15" fill="rgb(237,133,22)" fg:x="109" fg:w="1"/>
      <text x="54.7500%" y="495.50"/>
    </g>
    <g>
      <title>__GI___libc_malloc (1 samples, 0.50%)</title>
      <rect x="54.5000%" y="469" width="0.5000%" height="15" fill="rgb(206,112,53)" fg:x="109" fg:w="1"/>
      <text x="54.7500%" y="479.50"/>
    </g>
    <g>
      <title>regex_automata::util::prefilter::prefixes (1 samples, 0.50%)</title>
      <rect x="55.0000%" y="629" width="0.5000%" height="15" fill="rgb(209,67,19)" fg:x="110" fg:w="1"/>
      <text x="55.2500%" y="639.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.50%)</title>
      <rect x="55.0000%" y="613" width="0.5000%" height="15" fill="rgb(242,28,8)" fg:x="110" fg:w="1"/>
      <text x="55.2500%" y="623.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract_concat (1 samples, 0.50%)</title>
      <rect x="55.0000%" y="597" width="0.5000%" height="15" fill="rgb(215,217,42)" fg:x="110" fg:w="1"/>
      <text x="55.2500%" y="607.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.50%)</title>
      <rect x="55.0000%" y="581" width="0.5000%" height="15" fill="rgb(242,28,8)" fg:x="110" fg:w="1"/>
      <text x="55.2500%" y="591.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract_alternation (1 samples, 0.50%)</title>
      <rect x="55.0000%" y="565" width="0.5000%" height="15" fill="rgb(236,31,24)" fg:x="110" fg:w="1"/>
      <text x="55.2500%" y="575.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.50%)</title>
      <rect x="55.0000%" y="549" width="0.5000%" height="15" fill="rgb(242,28,8)" fg:x="110" fg:w="1"/>
      <text x="55.2500%" y="559.50"/>
    </g>
    <g>
      <title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.50%)</title>
      <rect x="55.0000%" y="533" width="0.5000%" height="15" fill="rgb(209,26,30)" fg:x="110" fg:w="1"/>
      <text x="55.2500%" y="543.50"/>
    </g>
    <g>
      <title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.50%)</title>
      <rect x="55.0000%" y="517" width="0.5000%" height="15" fill="rgb(229,121,46)" fg:x="110" fg:w="1"/>
      <text x="55.2500%" y="527.50"/>
    </g>
    <g>
      <title>alloc::slice::hack::to_vec (1 samples, 0.50%)</title>
      <rect x="55.0000%" y="501" width="0.5000%" height="15" fill="rgb(221,172,50)" fg:x="110" fg:w="1"/>
      <text x="55.2500%" y="511.50"/>
    </g>
    <g>
      <title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.50%)</title>
      <rect x="55.0000%" y="485" width="0.5000%" height="15" fill="rgb(216,42,52)" fg:x="110" fg:w="1"/>
      <text x="55.2500%" y="495.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.50%)</title>
      <rect x="55.0000%" y="469" width="0.5000%" height="15" fill="rgb(249,207,12)" fg:x="110" fg:w="1"/>
      <text x="55.2500%" y="479.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.50%)</title>
      <rect x="55.0000%" y="453" width="0.5000%" height="15" fill="rgb(224,194,14)" fg:x="110" fg:w="1"/>
      <text x="55.2500%" y="463.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.50%)</title>
      <rect x="55.0000%" y="437" width="0.5000%" height="15" fill="rgb(227,204,5)" fg:x="110" fg:w="1"/>
      <text x="55.2500%" y="447.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.50%)</title>
      <rect x="55.0000%" y="421" width="0.5000%" height="15" fill="rgb(231,114,21)" fg:x="110" fg:w="1"/>
      <text x="55.2500%" y="431.50"/>
    </g>
    <g>
      <title>alloc::alloc::Global::alloc_impl (1 samples, 0.50%)</title>
      <rect x="55.0000%" y="405" width="0.5000%" height="15" fill="rgb(238,209,2)" fg:x="110" fg:w="1"/>
      <text x="55.2500%" y="415.50"/>
    </g>
    <g>
      <title>alloc::alloc::alloc (1 samples, 0.50%)</title>
      <rect x="55.0000%" y="389" width="0.5000%" height="15" fill="rgb(253,135,41)" fg:x="110" fg:w="1"/>
      <text x="55.2500%" y="399.50"/>
    </g>
    <g>
      <title>__GI___libc_malloc (1 samples, 0.50%)</title>
      <rect x="55.0000%" y="373" width="0.5000%" height="15" fill="rgb(206,112,53)" fg:x="110" fg:w="1"/>
      <text x="55.2500%" y="383.50"/>
    </g>
    <g>
      <title>_int_malloc (1 samples, 0.50%)</title>
      <rect x="55.0000%" y="357" width="0.5000%" height="15" fill="rgb(222,219,51)" fg:x="110" fg:w="1"/>
      <text x="55.2500%" y="367.50"/>
    </g>
    <g>
      <title>regex_automata::meta::strategy::ReverseSuffix::new (1 samples, 0.50%)</title>
      <rect x="55.5000%" y="629" width="0.5000%" height="15" fill="rgb(210,64,50)" fg:x="111" fg:w="1"/>
      <text x="55.7500%" y="639.50"/>
    </g>
    <g>
      <title>regex_automata::util::prefilter::suffixes (1 samples, 0.50%)</title>
      <rect x="55.5000%" y="613" width="0.5000%" height="15" fill="rgb(229,215,53)" fg:x="111" fg:w="1"/>
      <text x="55.7500%" y="623.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.50%)</title>
      <rect x="55.5000%" y="597" width="0.5000%" height="15" fill="rgb(242,28,8)" fg:x="111" fg:w="1"/>
      <text x="55.7500%" y="607.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract_concat (1 samples, 0.50%)</title>
      <rect x="55.5000%" y="581" width="0.5000%" height="15" fill="rgb(215,217,42)" fg:x="111" fg:w="1"/>
      <text x="55.7500%" y="591.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.50%)</title>
      <rect x="55.5000%" y="565" width="0.5000%" height="15" fill="rgb(242,28,8)" fg:x="111" fg:w="1"/>
      <text x="55.7500%" y="575.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract_concat (1 samples, 0.50%)</title>
      <rect x="55.5000%" y="549" width="0.5000%" height="15" fill="rgb(215,217,42)" fg:x="111" fg:w="1"/>
      <text x="55.7500%" y="559.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.50%)</title>
      <rect x="55.5000%" y="533" width="0.5000%" height="15" fill="rgb(242,28,8)" fg:x="111" fg:w="1"/>
      <text x="55.7500%" y="543.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract_repetition (1 samples, 0.50%)</title>
      <rect x="55.5000%" y="517" width="0.5000%" height="15" fill="rgb(207,26,40)" fg:x="111" fg:w="1"/>
      <text x="55.7500%" y="527.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::cross (1 samples, 0.50%)</title>
      <rect x="55.5000%" y="501" width="0.5000%" height="15" fill="rgb(248,169,31)" fg:x="111" fg:w="1"/>
      <text x="55.7500%" y="511.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Seq::cross_reverse (1 samples, 0.50%)</title>
      <rect x="55.5000%" y="485" width="0.5000%" height="15" fill="rgb(231,193,12)" fg:x="111" fg:w="1"/>
      <text x="55.7500%" y="495.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Seq::dedup (1 samples, 0.50%)</title>
      <rect x="55.5000%" y="469" width="0.5000%" height="15" fill="rgb(244,184,3)" fg:x="111" fg:w="1"/>
      <text x="55.7500%" y="479.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::dedup_by (1 samples, 0.50%)</title>
      <rect x="55.5000%" y="453" width="0.5000%" height="15" fill="rgb(212,107,25)" fg:x="111" fg:w="1"/>
      <text x="55.7500%" y="463.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Seq::dedup::{{closure}} (1 samples, 0.50%)</title>
      <rect x="55.5000%" y="437" width="0.5000%" height="15" fill="rgb(224,159,7)" fg:x="111" fg:w="1"/>
      <text x="55.7500%" y="447.50"/>
    </g>
    <g>
      <title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (1 samples, 0.50%)</title>
      <rect x="55.5000%" y="421" width="0.5000%" height="15" fill="rgb(220,44,45)" fg:x="111" fg:w="1"/>
      <text x="55.7500%" y="431.50"/>
    </g>
    <g>
      <title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::ne (1 samples, 0.50%)</title>
      <rect x="55.5000%" y="405" width="0.5000%" height="15" fill="rgb(241,62,31)" fg:x="111" fg:w="1"/>
      <text x="55.7500%" y="415.50"/>
    </g>
    <g>
      <title>core::slice::cmp::SlicePartialEq::not_equal (1 samples, 0.50%)</title>
      <rect x="55.5000%" y="389" width="0.5000%" height="15" fill="rgb(226,12,20)" fg:x="111" fg:w="1"/>
      <text x="55.7500%" y="399.50"/>
    </g>
    <g>
      <title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.50%)</title>
      <rect x="55.5000%" y="373" width="0.5000%" height="15" fill="rgb(221,225,42)" fg:x="111" fg:w="1"/>
      <text x="55.7500%" y="383.50"/>
    </g>
    <g>
      <title>__memcmp_evex_movbe (1 samples, 0.50%)</title>
      <rect x="55.5000%" y="357" width="0.5000%" height="15" fill="rgb(253,103,40)" fg:x="111" fg:w="1"/>
      <text x="55.7500%" y="367.50"/>
    </g>
    <g>
      <title>regex_automata::util::primitives::&lt;impl core::ops::index::Index&lt;regex_automata::util::primitives::StateID&gt; for [T]&gt;::index (1 samples, 0.50%)</title>
      <rect x="56.0000%" y="533" width="0.5000%" height="15" fill="rgb(221,218,26)" fg:x="112" fg:w="1"/>
      <text x="56.2500%" y="543.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 1.00%)</title>
      <rect x="56.0000%" y="565" width="1.0000%" height="15" fill="rgb(232,176,30)" fg:x="112" fg:w="2"/>
      <text x="56.2500%" y="575.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::nfa::State::remap (2 samples, 1.00%)</title>
      <rect x="56.0000%" y="549" width="1.0000%" height="15" fill="rgb(206,94,36)" fg:x="112" fg:w="2"/>
      <text x="56.2500%" y="559.50"/>
    </g>
    <g>
      <title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.50%)</title>
      <rect x="56.5000%" y="533" width="0.5000%" height="15" fill="rgb(242,38,10)" fg:x="113" fg:w="1"/>
      <text x="56.7500%" y="543.50"/>
    </g>
    <g>
      <title>s4lib::readers::syslogprocessor::SyslogProcessor::process_stage1_blockzero_analysis (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="1029" width="2.5000%" height="15" fill="rgb(214,107,3)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="1039.50">s4..</text>
    </g>
    <g>
      <title>s4lib::readers::syslogprocessor::SyslogProcessor::blockzero_analysis (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="1013" width="2.5000%" height="15" fill="rgb(228,176,28)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="1023.50">s4..</text>
    </g>
    <g>
      <title>s4lib::readers::syslogprocessor::SyslogProcessor::blockzero_analysis_syslines (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="997" width="2.5000%" height="15" fill="rgb(208,15,47)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="1007.50">s4..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::find_sysline_in_block (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="981" width="2.5000%" height="15" fill="rgb(243,65,52)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="991.50">s4..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::find_sysline_in_block_year (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="965" width="2.5000%" height="15" fill="rgb(253,177,51)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="975.50">s4..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::parse_datetime_in_line_cached (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="949" width="2.5000%" height="15" fill="rgb(231,75,50)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="959.50">s4..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::parse_datetime_in_line (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="933" width="2.5000%" height="15" fill="rgb(234,54,15)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="943.50">s4..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::find_datetime_in_line (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="917" width="2.5000%" height="15" fill="rgb(212,53,9)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="927.50">s4..</text>
    </g>
    <g>
      <title>s4lib::data::datetime::bytes_to_regex_to_datetime (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="901" width="2.5000%" height="15" fill="rgb(252,84,36)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="911.50">s4..</text>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="885" width="2.5000%" height="15" fill="rgb(217,15,43)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="895.50">&lt;s..</text>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref::__stability (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="869" width="2.5000%" height="15" fill="rgb(239,165,48)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="879.50">&lt;s..</text>
    </g>
    <g>
      <title>lazy_static::lazy::Lazy&lt;T&gt;::get (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="853" width="2.5000%" height="15" fill="rgb(235,175,8)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="863.50">la..</text>
    </g>
    <g>
      <title>std::sync::once::Once::call_once (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="837" width="2.5000%" height="15" fill="rgb(247,17,47)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="847.50">st..</text>
    </g>
    <g>
      <title>std::sys_common::once::futex::Once::call (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="821" width="2.5000%" height="15" fill="rgb(246,168,49)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="831.50">st..</text>
    </g>
    <g>
      <title>std::sync::once::Once::call_once::{{closure}} (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="805" width="2.5000%" height="15" fill="rgb(237,63,35)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="815.50">st..</text>
    </g>
    <g>
      <title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="789" width="2.5000%" height="15" fill="rgb(238,7,51)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="799.50">la..</text>
    </g>
    <g>
      <title>core::ops::function::FnOnce::call_once (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="773" width="2.5000%" height="15" fill="rgb(210,80,10)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="783.50">co..</text>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="757" width="2.5000%" height="15" fill="rgb(205,24,29)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="767.50">&lt;s..</text>
    </g>
    <g>
      <title>regex::regex::bytes::Regex::new (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="741" width="2.5000%" height="15" fill="rgb(246,224,25)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="751.50">re..</text>
    </g>
    <g>
      <title>regex::builders::bytes::RegexBuilder::build (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="725" width="2.5000%" height="15" fill="rgb(236,76,51)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="735.50">re..</text>
    </g>
    <g>
      <title>regex::builders::Builder::build_one_bytes (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="709" width="2.5000%" height="15" fill="rgb(233,102,7)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="719.50">re..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="693" width="2.5000%" height="15" fill="rgb(212,33,22)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="703.50">re..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="677" width="2.5000%" height="15" fill="rgb(236,25,32)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="687.50">re..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many_from_hir (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="661" width="2.5000%" height="15" fill="rgb(250,142,30)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="671.50">re..</text>
    </g>
    <g>
      <title>regex_automata::meta::strategy::new (5 samples, 2.50%)</title>
      <rect x="55.0000%" y="645" width="2.5000%" height="15" fill="rgb(243,171,22)" fg:x="110" fg:w="5"/>
      <text x="55.2500%" y="655.50">re..</text>
    </g>
    <g>
      <title>regex_automata::meta::strategy::Core::new (3 samples, 1.50%)</title>
      <rect x="56.0000%" y="629" width="1.5000%" height="15" fill="rgb(222,69,27)" fg:x="112" fg:w="3"/>
      <text x="56.2500%" y="639.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (3 samples, 1.50%)</title>
      <rect x="56.0000%" y="613" width="1.5000%" height="15" fill="rgb(226,42,16)" fg:x="112" fg:w="3"/>
      <text x="56.2500%" y="623.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 1.50%)</title>
      <rect x="56.0000%" y="597" width="1.5000%" height="15" fill="rgb(242,129,17)" fg:x="112" fg:w="3"/>
      <text x="56.2500%" y="607.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 1.50%)</title>
      <rect x="56.0000%" y="581" width="1.5000%" height="15" fill="rgb(205,136,15)" fg:x="112" fg:w="3"/>
      <text x="56.2500%" y="591.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.50%)</title>
      <rect x="57.0000%" y="565" width="0.5000%" height="15" fill="rgb(212,0,0)" fg:x="114" fg:w="1"/>
      <text x="57.2500%" y="575.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;regex_syntax::hir::literal::PreferenceTrie&gt; (1 samples, 0.50%)</title>
      <rect x="57.5000%" y="613" width="0.5000%" height="15" fill="rgb(243,13,0)" fg:x="115" fg:w="1"/>
      <text x="57.7500%" y="623.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_syntax::hir::literal::State&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="57.5000%" y="597" width="0.5000%" height="15" fill="rgb(211,187,6)" fg:x="115" fg:w="1"/>
      <text x="57.7500%" y="607.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.50%)</title>
      <rect x="57.5000%" y="581" width="0.5000%" height="15" fill="rgb(249,14,2)" fg:x="115" fg:w="1"/>
      <text x="57.7500%" y="591.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;[regex_syntax::hir::literal::State]&gt; (1 samples, 0.50%)</title>
      <rect x="57.5000%" y="565" width="0.5000%" height="15" fill="rgb(239,118,26)" fg:x="115" fg:w="1"/>
      <text x="57.7500%" y="575.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;regex_syntax::hir::literal::State&gt; (1 samples, 0.50%)</title>
      <rect x="57.5000%" y="549" width="0.5000%" height="15" fill="rgb(242,57,11)" fg:x="115" fg:w="1"/>
      <text x="57.7500%" y="559.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(u8,usize)&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="57.5000%" y="533" width="0.5000%" height="15" fill="rgb(237,59,10)" fg:x="115" fg:w="1"/>
      <text x="57.7500%" y="543.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(u8,usize)&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="57.5000%" y="517" width="0.5000%" height="15" fill="rgb(231,76,38)" fg:x="115" fg:w="1"/>
      <text x="57.7500%" y="527.50"/>
    </g>
    <g>
      <title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.50%)</title>
      <rect x="57.5000%" y="501" width="0.5000%" height="15" fill="rgb(213,128,22)" fg:x="115" fg:w="1"/>
      <text x="57.7500%" y="511.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.50%)</title>
      <rect x="57.5000%" y="485" width="0.5000%" height="15" fill="rgb(238,77,31)" fg:x="115" fg:w="1"/>
      <text x="57.7500%" y="495.50"/>
    </g>
    <g>
      <title>alloc::alloc::dealloc (1 samples, 0.50%)</title>
      <rect x="57.5000%" y="469" width="0.5000%" height="15" fill="rgb(227,15,28)" fg:x="115" fg:w="1"/>
      <text x="57.7500%" y="479.50"/>
    </g>
    <g>
      <title>__GI___libc_free (1 samples, 0.50%)</title>
      <rect x="57.5000%" y="453" width="0.5000%" height="15" fill="rgb(247,8,17)" fg:x="115" fg:w="1"/>
      <text x="57.7500%" y="463.50"/>
    </g>
    <g>
      <title>_int_free (1 samples, 0.50%)</title>
      <rect x="57.5000%" y="437" width="0.5000%" height="15" fill="rgb(221,113,48)" fg:x="115" fg:w="1"/>
      <text x="57.7500%" y="447.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::PreferenceTrie::root (1 samples, 0.50%)</title>
      <rect x="58.0000%" y="549" width="0.5000%" height="15" fill="rgb(249,191,47)" fg:x="116" fg:w="1"/>
      <text x="58.2500%" y="559.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::is_empty (1 samples, 0.50%)</title>
      <rect x="58.0000%" y="533" width="0.5000%" height="15" fill="rgb(242,223,10)" fg:x="116" fg:w="1"/>
      <text x="58.2500%" y="543.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Seq::optimize_for_prefix_by_preference (4 samples, 2.00%)</title>
      <rect x="57.5000%" y="661" width="2.0000%" height="15" fill="rgb(206,179,34)" fg:x="115" fg:w="4"/>
      <text x="57.7500%" y="671.50">r..</text>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Seq::optimize_by_preference (4 samples, 2.00%)</title>
      <rect x="57.5000%" y="645" width="2.0000%" height="15" fill="rgb(208,121,1)" fg:x="115" fg:w="4"/>
      <text x="57.7500%" y="655.50">r..</text>
    </g>
    <g>
      <title>regex_syntax::hir::literal::PreferenceTrie::minimize (4 samples, 2.00%)</title>
      <rect x="57.5000%" y="629" width="2.0000%" height="15" fill="rgb(240,28,15)" fg:x="115" fg:w="4"/>
      <text x="57.7500%" y="639.50">r..</text>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (3 samples, 1.50%)</title>
      <rect x="58.0000%" y="613" width="1.5000%" height="15" fill="rgb(208,159,28)" fg:x="116" fg:w="3"/>
      <text x="58.2500%" y="623.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (3 samples, 1.50%)</title>
      <rect x="58.0000%" y="597" width="1.5000%" height="15" fill="rgb(227,228,3)" fg:x="116" fg:w="3"/>
      <text x="58.2500%" y="607.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::PreferenceTrie::minimize::{{closure}} (3 samples, 1.50%)</title>
      <rect x="58.0000%" y="581" width="1.5000%" height="15" fill="rgb(234,110,33)" fg:x="116" fg:w="3"/>
      <text x="58.2500%" y="591.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::PreferenceTrie::insert (3 samples, 1.50%)</title>
      <rect x="58.0000%" y="565" width="1.5000%" height="15" fill="rgb(208,38,45)" fg:x="116" fg:w="3"/>
      <text x="58.2500%" y="575.50"/>
    </g>
    <g>
      <title>regex_automata::meta::strategy::ReverseInner::new (5 samples, 2.50%)</title>
      <rect x="57.5000%" y="709" width="2.5000%" height="15" fill="rgb(225,146,32)" fg:x="115" fg:w="5"/>
      <text x="57.7500%" y="719.50">re..</text>
    </g>
    <g>
      <title>regex_automata::meta::reverse_inner::extract (5 samples, 2.50%)</title>
      <rect x="57.5000%" y="693" width="2.5000%" height="15" fill="rgb(209,78,45)" fg:x="115" fg:w="5"/>
      <text x="57.7500%" y="703.50">re..</text>
    </g>
    <g>
      <title>regex_automata::meta::reverse_inner::prefilter (5 samples, 2.50%)</title>
      <rect x="57.5000%" y="677" width="2.5000%" height="15" fill="rgb(221,50,42)" fg:x="115" fg:w="5"/>
      <text x="57.7500%" y="687.50">re..</text>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.50%)</title>
      <rect x="59.5000%" y="661" width="0.5000%" height="15" fill="rgb(242,28,8)" fg:x="119" fg:w="1"/>
      <text x="59.7500%" y="671.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract_concat (1 samples, 0.50%)</title>
      <rect x="59.5000%" y="645" width="0.5000%" height="15" fill="rgb(215,217,42)" fg:x="119" fg:w="1"/>
      <text x="59.7500%" y="655.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.50%)</title>
      <rect x="59.5000%" y="629" width="0.5000%" height="15" fill="rgb(242,28,8)" fg:x="119" fg:w="1"/>
      <text x="59.7500%" y="639.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract_alternation (1 samples, 0.50%)</title>
      <rect x="59.5000%" y="613" width="0.5000%" height="15" fill="rgb(236,31,24)" fg:x="119" fg:w="1"/>
      <text x="59.7500%" y="623.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::union (1 samples, 0.50%)</title>
      <rect x="59.5000%" y="597" width="0.5000%" height="15" fill="rgb(253,75,3)" fg:x="119" fg:w="1"/>
      <text x="59.7500%" y="607.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Seq::union (1 samples, 0.50%)</title>
      <rect x="59.5000%" y="581" width="0.5000%" height="15" fill="rgb(226,117,51)" fg:x="119" fg:w="1"/>
      <text x="59.7500%" y="591.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Seq::dedup (1 samples, 0.50%)</title>
      <rect x="59.5000%" y="565" width="0.5000%" height="15" fill="rgb(244,184,3)" fg:x="119" fg:w="1"/>
      <text x="59.7500%" y="575.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::dedup_by (1 samples, 0.50%)</title>
      <rect x="59.5000%" y="549" width="0.5000%" height="15" fill="rgb(212,107,25)" fg:x="119" fg:w="1"/>
      <text x="59.7500%" y="559.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Seq::dedup::{{closure}} (1 samples, 0.50%)</title>
      <rect x="59.5000%" y="533" width="0.5000%" height="15" fill="rgb(224,159,7)" fg:x="119" fg:w="1"/>
      <text x="59.7500%" y="543.50"/>
    </g>
    <g>
      <title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (1 samples, 0.50%)</title>
      <rect x="59.5000%" y="517" width="0.5000%" height="15" fill="rgb(220,44,45)" fg:x="119" fg:w="1"/>
      <text x="59.7500%" y="527.50"/>
    </g>
    <g>
      <title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::ne (1 samples, 0.50%)</title>
      <rect x="59.5000%" y="501" width="0.5000%" height="15" fill="rgb(241,62,31)" fg:x="119" fg:w="1"/>
      <text x="59.7500%" y="511.50"/>
    </g>
    <g>
      <title>core::slice::cmp::SlicePartialEq::not_equal (1 samples, 0.50%)</title>
      <rect x="59.5000%" y="485" width="0.5000%" height="15" fill="rgb(226,12,20)" fg:x="119" fg:w="1"/>
      <text x="59.7500%" y="495.50"/>
    </g>
    <g>
      <title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.50%)</title>
      <rect x="59.5000%" y="469" width="0.5000%" height="15" fill="rgb(221,225,42)" fg:x="119" fg:w="1"/>
      <text x="59.7500%" y="479.50"/>
    </g>
    <g>
      <title>__memcmp_evex_movbe (1 samples, 0.50%)</title>
      <rect x="59.5000%" y="453" width="0.5000%" height="15" fill="rgb(253,103,40)" fg:x="119" fg:w="1"/>
      <text x="59.7500%" y="463.50"/>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::parse_datetime_in_line_cached (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="1029" width="3.0000%" height="15" fill="rgb(231,75,50)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="1039.50">s4l..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::parse_datetime_in_line (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="1013" width="3.0000%" height="15" fill="rgb(234,54,15)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="1023.50">s4l..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::find_datetime_in_line (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="997" width="3.0000%" height="15" fill="rgb(212,53,9)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="1007.50">s4l..</text>
    </g>
    <g>
      <title>s4lib::data::datetime::bytes_to_regex_to_datetime (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="981" width="3.0000%" height="15" fill="rgb(252,84,36)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="991.50">s4l..</text>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="965" width="3.0000%" height="15" fill="rgb(217,15,43)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="975.50">&lt;s4..</text>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref::__stability (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="949" width="3.0000%" height="15" fill="rgb(239,165,48)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="959.50">&lt;s4..</text>
    </g>
    <g>
      <title>lazy_static::lazy::Lazy&lt;T&gt;::get (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="933" width="3.0000%" height="15" fill="rgb(235,175,8)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="943.50">laz..</text>
    </g>
    <g>
      <title>std::sync::once::Once::call_once (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="917" width="3.0000%" height="15" fill="rgb(247,17,47)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="927.50">std..</text>
    </g>
    <g>
      <title>std::sys_common::once::futex::Once::call (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="901" width="3.0000%" height="15" fill="rgb(246,168,49)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="911.50">std..</text>
    </g>
    <g>
      <title>std::sync::once::Once::call_once::{{closure}} (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="885" width="3.0000%" height="15" fill="rgb(237,63,35)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="895.50">std..</text>
    </g>
    <g>
      <title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="869" width="3.0000%" height="15" fill="rgb(238,7,51)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="879.50">laz..</text>
    </g>
    <g>
      <title>core::ops::function::FnOnce::call_once (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="853" width="3.0000%" height="15" fill="rgb(210,80,10)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="863.50">cor..</text>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="837" width="3.0000%" height="15" fill="rgb(205,24,29)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="847.50">&lt;s4..</text>
    </g>
    <g>
      <title>regex::regex::bytes::Regex::new (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="821" width="3.0000%" height="15" fill="rgb(246,224,25)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="831.50">reg..</text>
    </g>
    <g>
      <title>regex::builders::bytes::RegexBuilder::build (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="805" width="3.0000%" height="15" fill="rgb(236,76,51)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="815.50">reg..</text>
    </g>
    <g>
      <title>regex::builders::Builder::build_one_bytes (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="789" width="3.0000%" height="15" fill="rgb(233,102,7)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="799.50">reg..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="773" width="3.0000%" height="15" fill="rgb(212,33,22)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="783.50">reg..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="757" width="3.0000%" height="15" fill="rgb(236,25,32)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="767.50">reg..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many_from_hir (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="741" width="3.0000%" height="15" fill="rgb(250,142,30)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="751.50">reg..</text>
    </g>
    <g>
      <title>regex_automata::meta::strategy::new (6 samples, 3.00%)</title>
      <rect x="57.5000%" y="725" width="3.0000%" height="15" fill="rgb(243,171,22)" fg:x="115" fg:w="6"/>
      <text x="57.7500%" y="735.50">reg..</text>
    </g>
    <g>
      <title>regex_automata::meta::strategy::Core::new (1 samples, 0.50%)</title>
      <rect x="60.0000%" y="709" width="0.5000%" height="15" fill="rgb(222,69,27)" fg:x="120" fg:w="1"/>
      <text x="60.2500%" y="719.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1 samples, 0.50%)</title>
      <rect x="60.0000%" y="693" width="0.5000%" height="15" fill="rgb(226,42,16)" fg:x="120" fg:w="1"/>
      <text x="60.2500%" y="703.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.50%)</title>
      <rect x="60.0000%" y="677" width="0.5000%" height="15" fill="rgb(242,129,17)" fg:x="120" fg:w="1"/>
      <text x="60.2500%" y="687.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1 samples, 0.50%)</title>
      <rect x="60.0000%" y="661" width="0.5000%" height="15" fill="rgb(247,137,3)" fg:x="120" fg:w="1"/>
      <text x="60.2500%" y="671.50"/>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.50%)</title>
      <rect x="60.0000%" y="645" width="0.5000%" height="15" fill="rgb(214,109,53)" fg:x="120" fg:w="1"/>
      <text x="60.2500%" y="655.50"/>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (1 samples, 0.50%)</title>
      <rect x="60.0000%" y="629" width="0.5000%" height="15" fill="rgb(254,35,30)" fg:x="120" fg:w="1"/>
      <text x="60.2500%" y="639.50"/>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.50%)</title>
      <rect x="60.0000%" y="613" width="0.5000%" height="15" fill="rgb(226,169,23)" fg:x="120" fg:w="1"/>
      <text x="60.2500%" y="623.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (1 samples, 0.50%)</title>
      <rect x="60.0000%" y="597" width="0.5000%" height="15" fill="rgb(218,216,52)" fg:x="120" fg:w="1"/>
      <text x="60.2500%" y="607.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.50%)</title>
      <rect x="60.0000%" y="581" width="0.5000%" height="15" fill="rgb(235,200,16)" fg:x="120" fg:w="1"/>
      <text x="60.2500%" y="591.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.50%)</title>
      <rect x="60.0000%" y="565" width="0.5000%" height="15" fill="rgb(213,34,18)" fg:x="120" fg:w="1"/>
      <text x="60.2500%" y="575.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1 samples, 0.50%)</title>
      <rect x="60.0000%" y="549" width="0.5000%" height="15" fill="rgb(210,105,37)" fg:x="120" fg:w="1"/>
      <text x="60.2500%" y="559.50"/>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.50%)</title>
      <rect x="60.0000%" y="533" width="0.5000%" height="15" fill="rgb(214,109,53)" fg:x="120" fg:w="1"/>
      <text x="60.2500%" y="543.50"/>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (1 samples, 0.50%)</title>
      <rect x="60.0000%" y="517" width="0.5000%" height="15" fill="rgb(254,35,30)" fg:x="120" fg:w="1"/>
      <text x="60.2500%" y="527.50"/>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.50%)</title>
      <rect x="60.0000%" y="501" width="0.5000%" height="15" fill="rgb(226,169,23)" fg:x="120" fg:w="1"/>
      <text x="60.2500%" y="511.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (1 samples, 0.50%)</title>
      <rect x="60.0000%" y="485" width="0.5000%" height="15" fill="rgb(205,130,14)" fg:x="120" fg:w="1"/>
      <text x="60.2500%" y="495.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.50%)</title>
      <rect x="60.0000%" y="469" width="0.5000%" height="15" fill="rgb(213,34,18)" fg:x="120" fg:w="1"/>
      <text x="60.2500%" y="479.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::Hir::kind (1 samples, 0.50%)</title>
      <rect x="60.0000%" y="453" width="0.5000%" height="15" fill="rgb(249,53,10)" fg:x="120" fg:w="1"/>
      <text x="60.2500%" y="463.50"/>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::find_sysline_in_block_year (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="1029" width="0.5000%" height="15" fill="rgb(253,177,51)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="1039.50"/>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::parse_datetime_in_line_cached (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="1013" width="0.5000%" height="15" fill="rgb(231,75,50)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="1023.50"/>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::parse_datetime_in_line (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="997" width="0.5000%" height="15" fill="rgb(234,54,15)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="1007.50"/>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::find_datetime_in_line (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="981" width="0.5000%" height="15" fill="rgb(212,53,9)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="991.50"/>
    </g>
    <g>
      <title>s4lib::data::datetime::bytes_to_regex_to_datetime (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="965" width="0.5000%" height="15" fill="rgb(252,84,36)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="975.50"/>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="949" width="0.5000%" height="15" fill="rgb(217,15,43)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="959.50"/>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref::__stability (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="933" width="0.5000%" height="15" fill="rgb(239,165,48)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="943.50"/>
    </g>
    <g>
      <title>lazy_static::lazy::Lazy&lt;T&gt;::get (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="917" width="0.5000%" height="15" fill="rgb(235,175,8)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="927.50"/>
    </g>
    <g>
      <title>std::sync::once::Once::call_once (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="901" width="0.5000%" height="15" fill="rgb(247,17,47)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="911.50"/>
    </g>
    <g>
      <title>std::sys_common::once::futex::Once::call (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="885" width="0.5000%" height="15" fill="rgb(246,168,49)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="895.50"/>
    </g>
    <g>
      <title>std::sync::once::Once::call_once::{{closure}} (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="869" width="0.5000%" height="15" fill="rgb(237,63,35)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="879.50"/>
    </g>
    <g>
      <title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="853" width="0.5000%" height="15" fill="rgb(238,7,51)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="863.50"/>
    </g>
    <g>
      <title>core::ops::function::FnOnce::call_once (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="837" width="0.5000%" height="15" fill="rgb(210,80,10)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="847.50"/>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="821" width="0.5000%" height="15" fill="rgb(205,24,29)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="831.50"/>
    </g>
    <g>
      <title>regex::regex::bytes::Regex::new (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="805" width="0.5000%" height="15" fill="rgb(246,224,25)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="815.50"/>
    </g>
    <g>
      <title>regex::builders::bytes::RegexBuilder::build (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="789" width="0.5000%" height="15" fill="rgb(236,76,51)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="799.50"/>
    </g>
    <g>
      <title>regex::builders::Builder::build_one_bytes (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="773" width="0.5000%" height="15" fill="rgb(233,102,7)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="783.50"/>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="757" width="0.5000%" height="15" fill="rgb(212,33,22)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="767.50"/>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="741" width="0.5000%" height="15" fill="rgb(236,25,32)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="751.50"/>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many_from_hir (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="725" width="0.5000%" height="15" fill="rgb(250,142,30)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="735.50"/>
    </g>
    <g>
      <title>regex_automata::meta::strategy::new (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="709" width="0.5000%" height="15" fill="rgb(243,171,22)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="719.50"/>
    </g>
    <g>
      <title>regex_automata::meta::strategy::Core::new (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="693" width="0.5000%" height="15" fill="rgb(222,69,27)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="703.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="677" width="0.5000%" height="15" fill="rgb(226,42,16)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="687.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="661" width="0.5000%" height="15" fill="rgb(242,129,17)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="671.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::builder::Builder::build (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="645" width="0.5000%" height="15" fill="rgb(205,136,15)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="655.50"/>
    </g>
    <g>
      <title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="629" width="0.5000%" height="15" fill="rgb(209,26,30)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="639.50"/>
    </g>
    <g>
      <title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="613" width="0.5000%" height="15" fill="rgb(229,121,46)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="623.50"/>
    </g>
    <g>
      <title>alloc::slice::hack::to_vec (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="597" width="0.5000%" height="15" fill="rgb(221,172,50)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="607.50"/>
    </g>
    <g>
      <title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="581" width="0.5000%" height="15" fill="rgb(216,42,52)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="591.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="565" width="0.5000%" height="15" fill="rgb(249,207,12)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="575.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="549" width="0.5000%" height="15" fill="rgb(224,194,14)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="559.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="533" width="0.5000%" height="15" fill="rgb(227,204,5)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="543.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="517" width="0.5000%" height="15" fill="rgb(231,114,21)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="527.50"/>
    </g>
    <g>
      <title>alloc::alloc::Global::alloc_impl (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="501" width="0.5000%" height="15" fill="rgb(238,209,2)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="511.50"/>
    </g>
    <g>
      <title>alloc::alloc::alloc (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="485" width="0.5000%" height="15" fill="rgb(253,135,41)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="495.50"/>
    </g>
    <g>
      <title>__GI___libc_malloc (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="469" width="0.5000%" height="15" fill="rgb(206,112,53)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="479.50"/>
    </g>
    <g>
      <title>_int_malloc (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="453" width="0.5000%" height="15" fill="rgb(222,219,51)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="463.50"/>
    </g>
    <g>
      <title>tcache_put (1 samples, 0.50%)</title>
      <rect x="60.5000%" y="437" width="0.5000%" height="15" fill="rgb(227,177,28)" fg:x="121" fg:w="1"/>
      <text x="60.7500%" y="447.50"/>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.50%)</title>
      <rect x="61.0000%" y="565" width="0.5000%" height="15" fill="rgb(214,109,53)" fg:x="122" fg:w="1"/>
      <text x="61.2500%" y="575.50"/>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (1 samples, 0.50%)</title>
      <rect x="61.0000%" y="549" width="0.5000%" height="15" fill="rgb(254,35,30)" fg:x="122" fg:w="1"/>
      <text x="61.2500%" y="559.50"/>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.50%)</title>
      <rect x="61.0000%" y="533" width="0.5000%" height="15" fill="rgb(226,169,23)" fg:x="122" fg:w="1"/>
      <text x="61.2500%" y="543.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (1 samples, 0.50%)</title>
      <rect x="61.0000%" y="517" width="0.5000%" height="15" fill="rgb(205,130,14)" fg:x="122" fg:w="1"/>
      <text x="61.2500%" y="527.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.50%)</title>
      <rect x="61.0000%" y="501" width="0.5000%" height="15" fill="rgb(235,200,16)" fg:x="122" fg:w="1"/>
      <text x="61.2500%" y="511.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.50%)</title>
      <rect x="61.0000%" y="485" width="0.5000%" height="15" fill="rgb(213,34,18)" fg:x="122" fg:w="1"/>
      <text x="61.2500%" y="495.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (1 samples, 0.50%)</title>
      <rect x="61.0000%" y="469" width="0.5000%" height="15" fill="rgb(253,35,22)" fg:x="122" fg:w="1"/>
      <text x="61.2500%" y="479.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::literal_trie::LiteralTrie::add (1 samples, 0.50%)</title>
      <rect x="61.0000%" y="453" width="0.5000%" height="15" fill="rgb(247,201,32)" fg:x="122" fg:w="1"/>
      <text x="61.2500%" y="463.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::literal_trie::LiteralTrie::get_or_add_state (1 samples, 0.50%)</title>
      <rect x="61.0000%" y="437" width="0.5000%" height="15" fill="rgb(249,22,31)" fg:x="122" fg:w="1"/>
      <text x="61.2500%" y="447.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.50%)</title>
      <rect x="61.0000%" y="421" width="0.5000%" height="15" fill="rgb(241,229,15)" fg:x="122" fg:w="1"/>
      <text x="61.2500%" y="431.50"/>
    </g>
    <g>
      <title>core::ptr::write (1 samples, 0.50%)</title>
      <rect x="61.0000%" y="405" width="0.5000%" height="15" fill="rgb(209,143,44)" fg:x="122" fg:w="1"/>
      <text x="61.2500%" y="415.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::literal_trie::State::active_chunk_start (1 samples, 0.50%)</title>
      <rect x="61.5000%" y="421" width="0.5000%" height="15" fill="rgb(220,128,13)" fg:x="123" fg:w="1"/>
      <text x="61.7500%" y="431.50"/>
    </g>
    <g>
      <title>core::slice::&lt;impl [T]&gt;::last (1 samples, 0.50%)</title>
      <rect x="61.5000%" y="405" width="0.5000%" height="15" fill="rgb(242,207,46)" fg:x="123" fg:w="1"/>
      <text x="61.7500%" y="415.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.50%)</title>
      <rect x="62.0000%" y="421" width="0.5000%" height="15" fill="rgb(241,229,15)" fg:x="124" fg:w="1"/>
      <text x="62.2500%" y="431.50"/>
    </g>
    <g>
      <title>core::ptr::write (1 samples, 0.50%)</title>
      <rect x="62.0000%" y="405" width="0.5000%" height="15" fill="rgb(209,143,44)" fg:x="124" fg:w="1"/>
      <text x="62.2500%" y="415.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::insert (1 samples, 0.50%)</title>
      <rect x="62.5000%" y="421" width="0.5000%" height="15" fill="rgb(222,129,7)" fg:x="125" fg:w="1"/>
      <text x="62.7500%" y="431.50"/>
    </g>
    <g>
      <title>core::intrinsics::copy (1 samples, 0.50%)</title>
      <rect x="62.5000%" y="405" width="0.5000%" height="15" fill="rgb(221,136,15)" fg:x="125" fg:w="1"/>
      <text x="62.7500%" y="415.50"/>
    </g>
    <g>
      <title>__memmove_avx512_unaligned_erms (1 samples, 0.50%)</title>
      <rect x="62.5000%" y="389" width="0.5000%" height="15" fill="rgb(217,126,36)" fg:x="125" fg:w="1"/>
      <text x="62.7500%" y="399.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::literal_trie::LiteralTrie::add (4 samples, 2.00%)</title>
      <rect x="61.5000%" y="453" width="2.0000%" height="15" fill="rgb(247,201,32)" fg:x="123" fg:w="4"/>
      <text x="61.7500%" y="463.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::literal_trie::LiteralTrie::get_or_add_state (4 samples, 2.00%)</title>
      <rect x="61.5000%" y="437" width="2.0000%" height="15" fill="rgb(249,22,31)" fg:x="123" fg:w="4"/>
      <text x="61.7500%" y="447.50">r..</text>
    </g>
    <g>
      <title>&lt;regex_automata::nfa::thompson::literal_trie::State as core::default::Default&gt;::default (1 samples, 0.50%)</title>
      <rect x="63.0000%" y="421" width="0.5000%" height="15" fill="rgb(208,73,9)" fg:x="126" fg:w="1"/>
      <text x="63.2500%" y="431.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (6 samples, 3.00%)</title>
      <rect x="61.0000%" y="725" width="3.0000%" height="15" fill="rgb(226,42,16)" fg:x="122" fg:w="6"/>
      <text x="61.2500%" y="735.50">reg..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::compile (6 samples, 3.00%)</title>
      <rect x="61.0000%" y="709" width="3.0000%" height="15" fill="rgb(242,129,17)" fg:x="122" fg:w="6"/>
      <text x="61.2500%" y="719.50">reg..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (6 samples, 3.00%)</title>
      <rect x="61.0000%" y="693" width="3.0000%" height="15" fill="rgb(247,137,3)" fg:x="122" fg:w="6"/>
      <text x="61.2500%" y="703.50">reg..</text>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 3.00%)</title>
      <rect x="61.0000%" y="677" width="3.0000%" height="15" fill="rgb(214,109,53)" fg:x="122" fg:w="6"/>
      <text x="61.2500%" y="687.50">&lt;co..</text>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (6 samples, 3.00%)</title>
      <rect x="61.0000%" y="661" width="3.0000%" height="15" fill="rgb(254,35,30)" fg:x="122" fg:w="6"/>
      <text x="61.2500%" y="671.50">cor..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (6 samples, 3.00%)</title>
      <rect x="61.0000%" y="645" width="3.0000%" height="15" fill="rgb(226,169,23)" fg:x="122" fg:w="6"/>
      <text x="61.2500%" y="655.50">cor..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (6 samples, 3.00%)</title>
      <rect x="61.0000%" y="629" width="3.0000%" height="15" fill="rgb(218,216,52)" fg:x="122" fg:w="6"/>
      <text x="61.2500%" y="639.50">reg..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (6 samples, 3.00%)</title>
      <rect x="61.0000%" y="613" width="3.0000%" height="15" fill="rgb(235,200,16)" fg:x="122" fg:w="6"/>
      <text x="61.2500%" y="623.50">reg..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (6 samples, 3.00%)</title>
      <rect x="61.0000%" y="597" width="3.0000%" height="15" fill="rgb(213,34,18)" fg:x="122" fg:w="6"/>
      <text x="61.2500%" y="607.50">reg..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (6 samples, 3.00%)</title>
      <rect x="61.0000%" y="581" width="3.0000%" height="15" fill="rgb(210,105,37)" fg:x="122" fg:w="6"/>
      <text x="61.2500%" y="591.50">reg..</text>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (5 samples, 2.50%)</title>
      <rect x="61.5000%" y="565" width="2.5000%" height="15" fill="rgb(222,94,14)" fg:x="123" fg:w="5"/>
      <text x="61.7500%" y="575.50">&lt;c..</text>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (5 samples, 2.50%)</title>
      <rect x="61.5000%" y="549" width="2.5000%" height="15" fill="rgb(254,35,30)" fg:x="123" fg:w="5"/>
      <text x="61.7500%" y="559.50">co..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5 samples, 2.50%)</title>
      <rect x="61.5000%" y="533" width="2.5000%" height="15" fill="rgb(226,169,23)" fg:x="123" fg:w="5"/>
      <text x="61.7500%" y="543.50">co..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (5 samples, 2.50%)</title>
      <rect x="61.5000%" y="517" width="2.5000%" height="15" fill="rgb(205,130,14)" fg:x="123" fg:w="5"/>
      <text x="61.7500%" y="527.50">re..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (5 samples, 2.50%)</title>
      <rect x="61.5000%" y="501" width="2.5000%" height="15" fill="rgb(235,200,16)" fg:x="123" fg:w="5"/>
      <text x="61.7500%" y="511.50">re..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (5 samples, 2.50%)</title>
      <rect x="61.5000%" y="485" width="2.5000%" height="15" fill="rgb(213,34,18)" fg:x="123" fg:w="5"/>
      <text x="61.7500%" y="495.50">re..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (5 samples, 2.50%)</title>
      <rect x="61.5000%" y="469" width="2.5000%" height="15" fill="rgb(253,35,22)" fg:x="123" fg:w="5"/>
      <text x="61.7500%" y="479.50">re..</text>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::literal_trie::LiteralTrie&gt; (1 samples, 0.50%)</title>
      <rect x="63.5000%" y="453" width="0.5000%" height="15" fill="rgb(244,70,29)" fg:x="127" fg:w="1"/>
      <text x="63.7500%" y="463.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::literal_trie::State&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="63.5000%" y="437" width="0.5000%" height="15" fill="rgb(227,19,7)" fg:x="127" fg:w="1"/>
      <text x="63.7500%" y="447.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.50%)</title>
      <rect x="63.5000%" y="421" width="0.5000%" height="15" fill="rgb(249,14,2)" fg:x="127" fg:w="1"/>
      <text x="63.7500%" y="431.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::literal_trie::State]&gt; (1 samples, 0.50%)</title>
      <rect x="63.5000%" y="405" width="0.5000%" height="15" fill="rgb(241,61,51)" fg:x="127" fg:w="1"/>
      <text x="63.7500%" y="415.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::literal_trie::State&gt; (1 samples, 0.50%)</title>
      <rect x="63.5000%" y="389" width="0.5000%" height="15" fill="rgb(245,189,53)" fg:x="127" fg:w="1"/>
      <text x="63.7500%" y="399.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(usize,usize)&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="63.5000%" y="373" width="0.5000%" height="15" fill="rgb(213,102,40)" fg:x="127" fg:w="1"/>
      <text x="63.7500%" y="383.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(usize,usize)&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="63.5000%" y="357" width="0.5000%" height="15" fill="rgb(243,139,46)" fg:x="127" fg:w="1"/>
      <text x="63.7500%" y="367.50"/>
    </g>
    <g>
      <title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.50%)</title>
      <rect x="63.5000%" y="341" width="0.5000%" height="15" fill="rgb(213,128,22)" fg:x="127" fg:w="1"/>
      <text x="63.7500%" y="351.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.50%)</title>
      <rect x="63.5000%" y="325" width="0.5000%" height="15" fill="rgb(238,77,31)" fg:x="127" fg:w="1"/>
      <text x="63.7500%" y="335.50"/>
    </g>
    <g>
      <title>alloc::alloc::dealloc (1 samples, 0.50%)</title>
      <rect x="63.5000%" y="309" width="0.5000%" height="15" fill="rgb(227,15,28)" fg:x="127" fg:w="1"/>
      <text x="63.7500%" y="319.50"/>
    </g>
    <g>
      <title>__GI___libc_free (1 samples, 0.50%)</title>
      <rect x="63.5000%" y="293" width="0.5000%" height="15" fill="rgb(247,8,17)" fg:x="127" fg:w="1"/>
      <text x="63.7500%" y="303.50"/>
    </g>
    <g>
      <title>_int_free (1 samples, 0.50%)</title>
      <rect x="63.5000%" y="277" width="0.5000%" height="15" fill="rgb(221,113,48)" fg:x="127" fg:w="1"/>
      <text x="63.7500%" y="287.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="64.0000%" y="341" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="128" fg:w="1"/>
      <text x="64.2500%" y="351.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (2 samples, 1.00%)</title>
      <rect x="64.0000%" y="373" width="1.0000%" height="15" fill="rgb(210,204,4)" fg:x="128" fg:w="2"/>
      <text x="64.2500%" y="383.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (2 samples, 1.00%)</title>
      <rect x="64.0000%" y="357" width="1.0000%" height="15" fill="rgb(210,204,4)" fg:x="128" fg:w="2"/>
      <text x="64.2500%" y="367.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (3 samples, 1.50%)</title>
      <rect x="64.0000%" y="437" width="1.5000%" height="15" fill="rgb(210,204,4)" fg:x="128" fg:w="3"/>
      <text x="64.2500%" y="447.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (3 samples, 1.50%)</title>
      <rect x="64.0000%" y="421" width="1.5000%" height="15" fill="rgb(210,204,4)" fg:x="128" fg:w="3"/>
      <text x="64.2500%" y="431.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (3 samples, 1.50%)</title>
      <rect x="64.0000%" y="405" width="1.5000%" height="15" fill="rgb(210,204,4)" fg:x="128" fg:w="3"/>
      <text x="64.2500%" y="415.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (3 samples, 1.50%)</title>
      <rect x="64.0000%" y="389" width="1.5000%" height="15" fill="rgb(210,204,4)" fg:x="128" fg:w="3"/>
      <text x="64.2500%" y="399.50"/>
    </g>
    <g>
      <title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (4 samples, 2.00%)</title>
      <rect x="64.0000%" y="661" width="2.0000%" height="15" fill="rgb(230,62,50)" fg:x="128" fg:w="4"/>
      <text x="64.2500%" y="671.50">r..</text>
    </g>
    <g>
      <title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 2.00%)</title>
      <rect x="64.0000%" y="645" width="2.0000%" height="15" fill="rgb(226,222,5)" fg:x="128" fg:w="4"/>
      <text x="64.2500%" y="655.50">r..</text>
    </g>
    <g>
      <title>regex_automata::dfa::onepass::InternalBuilder::add_empty_state (4 samples, 2.00%)</title>
      <rect x="64.0000%" y="629" width="2.0000%" height="15" fill="rgb(249,155,54)" fg:x="128" fg:w="4"/>
      <text x="64.2500%" y="639.50">r..</text>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (4 samples, 2.00%)</title>
      <rect x="64.0000%" y="613" width="2.0000%" height="15" fill="rgb(205,186,49)" fg:x="128" fg:w="4"/>
      <text x="64.2500%" y="623.50">&lt;..</text>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 2.00%)</title>
      <rect x="64.0000%" y="597" width="2.0000%" height="15" fill="rgb(232,211,42)" fg:x="128" fg:w="4"/>
      <text x="64.2500%" y="607.50">&lt;..</text>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (4 samples, 2.00%)</title>
      <rect x="64.0000%" y="581" width="2.0000%" height="15" fill="rgb(214,146,48)" fg:x="128" fg:w="4"/>
      <text x="64.2500%" y="591.50">a..</text>
    </g>
    <g>
      <title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (4 samples, 2.00%)</title>
      <rect x="64.0000%" y="565" width="2.0000%" height="15" fill="rgb(242,133,26)" fg:x="128" fg:w="4"/>
      <text x="64.2500%" y="575.50">&lt;..</text>
    </g>
    <g>
      <title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 2.00%)</title>
      <rect x="64.0000%" y="549" width="2.0000%" height="15" fill="rgb(223,137,46)" fg:x="128" fg:w="4"/>
      <text x="64.2500%" y="559.50">c..</text>
    </g>
    <g>
      <title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each::check::{{closure}} (4 samples, 2.00%)</title>
      <rect x="64.0000%" y="533" width="2.0000%" height="15" fill="rgb(234,154,36)" fg:x="128" fg:w="4"/>
      <text x="64.2500%" y="543.50">&lt;..</text>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (4 samples, 2.00%)</title>
      <rect x="64.0000%" y="517" width="2.0000%" height="15" fill="rgb(221,227,48)" fg:x="128" fg:w="4"/>
      <text x="64.2500%" y="527.50">a..</text>
    </g>
    <g>
      <title>core::ptr::write (4 samples, 2.00%)</title>
      <rect x="64.0000%" y="501" width="2.0000%" height="15" fill="rgb(209,143,44)" fg:x="128" fg:w="4"/>
      <text x="64.2500%" y="511.50">c..</text>
    </g>
    <g>
      <title>__memset_avx512_unaligned_erms (4 samples, 2.00%)</title>
      <rect x="64.0000%" y="485" width="2.0000%" height="15" fill="rgb(240,145,53)" fg:x="128" fg:w="4"/>
      <text x="64.2500%" y="495.50">_..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (4 samples, 2.00%)</title>
      <rect x="64.0000%" y="469" width="2.0000%" height="15" fill="rgb(210,204,4)" fg:x="128" fg:w="4"/>
      <text x="64.2500%" y="479.50">[..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (4 samples, 2.00%)</title>
      <rect x="64.0000%" y="453" width="2.0000%" height="15" fill="rgb(210,204,4)" fg:x="128" fg:w="4"/>
      <text x="64.2500%" y="463.50">[..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::find_datetime_in_line (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="1029" width="5.5000%" height="15" fill="rgb(212,53,9)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="1039.50">s4lib::..</text>
    </g>
    <g>
      <title>s4lib::data::datetime::bytes_to_regex_to_datetime (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="1013" width="5.5000%" height="15" fill="rgb(252,84,36)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="1023.50">s4lib::..</text>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="997" width="5.5000%" height="15" fill="rgb(217,15,43)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="1007.50">&lt;s4lib:..</text>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref::__stability (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="981" width="5.5000%" height="15" fill="rgb(239,165,48)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="991.50">&lt;s4lib:..</text>
    </g>
    <g>
      <title>lazy_static::lazy::Lazy&lt;T&gt;::get (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="965" width="5.5000%" height="15" fill="rgb(235,175,8)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="975.50">lazy_st..</text>
    </g>
    <g>
      <title>std::sync::once::Once::call_once (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="949" width="5.5000%" height="15" fill="rgb(247,17,47)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="959.50">std::sy..</text>
    </g>
    <g>
      <title>std::sys_common::once::futex::Once::call (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="933" width="5.5000%" height="15" fill="rgb(246,168,49)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="943.50">std::sy..</text>
    </g>
    <g>
      <title>std::sync::once::Once::call_once::{{closure}} (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="917" width="5.5000%" height="15" fill="rgb(237,63,35)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="927.50">std::sy..</text>
    </g>
    <g>
      <title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="901" width="5.5000%" height="15" fill="rgb(238,7,51)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="911.50">lazy_st..</text>
    </g>
    <g>
      <title>core::ops::function::FnOnce::call_once (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="885" width="5.5000%" height="15" fill="rgb(210,80,10)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="895.50">core::o..</text>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="869" width="5.5000%" height="15" fill="rgb(205,24,29)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="879.50">&lt;s4lib:..</text>
    </g>
    <g>
      <title>regex::regex::bytes::Regex::new (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="853" width="5.5000%" height="15" fill="rgb(246,224,25)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="863.50">regex::..</text>
    </g>
    <g>
      <title>regex::builders::bytes::RegexBuilder::build (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="837" width="5.5000%" height="15" fill="rgb(236,76,51)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="847.50">regex::..</text>
    </g>
    <g>
      <title>regex::builders::Builder::build_one_bytes (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="821" width="5.5000%" height="15" fill="rgb(233,102,7)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="831.50">regex::..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="805" width="5.5000%" height="15" fill="rgb(212,33,22)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="815.50">regex_a..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="789" width="5.5000%" height="15" fill="rgb(236,25,32)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="799.50">regex_a..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many_from_hir (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="773" width="5.5000%" height="15" fill="rgb(250,142,30)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="783.50">regex_a..</text>
    </g>
    <g>
      <title>regex_automata::meta::strategy::new (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="757" width="5.5000%" height="15" fill="rgb(243,171,22)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="767.50">regex_a..</text>
    </g>
    <g>
      <title>regex_automata::meta::strategy::Core::new (11 samples, 5.50%)</title>
      <rect x="61.0000%" y="741" width="5.5000%" height="15" fill="rgb(222,69,27)" fg:x="122" fg:w="11"/>
      <text x="61.2500%" y="751.50">regex_a..</text>
    </g>
    <g>
      <title>regex_automata::meta::wrappers::OnePass::new (5 samples, 2.50%)</title>
      <rect x="64.0000%" y="725" width="2.5000%" height="15" fill="rgb(235,224,47)" fg:x="128" fg:w="5"/>
      <text x="64.2500%" y="735.50">re..</text>
    </g>
    <g>
      <title>regex_automata::meta::wrappers::OnePassEngine::new (5 samples, 2.50%)</title>
      <rect x="64.0000%" y="709" width="2.5000%" height="15" fill="rgb(247,185,25)" fg:x="128" fg:w="5"/>
      <text x="64.2500%" y="719.50">re..</text>
    </g>
    <g>
      <title>regex_automata::dfa::onepass::Builder::build_from_nfa (5 samples, 2.50%)</title>
      <rect x="64.0000%" y="693" width="2.5000%" height="15" fill="rgb(209,62,19)" fg:x="128" fg:w="5"/>
      <text x="64.2500%" y="703.50">re..</text>
    </g>
    <g>
      <title>regex_automata::dfa::onepass::InternalBuilder::build (5 samples, 2.50%)</title>
      <rect x="64.0000%" y="677" width="2.5000%" height="15" fill="rgb(206,107,24)" fg:x="128" fg:w="5"/>
      <text x="64.2500%" y="687.50">re..</text>
    </g>
    <g>
      <title>regex_automata::meta::strategy::ReverseInner::new (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="757" width="0.5000%" height="15" fill="rgb(225,146,32)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="767.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::build_from_hir (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="741" width="0.5000%" height="15" fill="rgb(210,66,46)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="751.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="725" width="0.5000%" height="15" fill="rgb(226,42,16)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="735.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::compile (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="709" width="0.5000%" height="15" fill="rgb(242,129,17)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="719.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="693" width="0.5000%" height="15" fill="rgb(247,137,3)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="703.50"/>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="677" width="0.5000%" height="15" fill="rgb(214,109,53)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="687.50"/>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="661" width="0.5000%" height="15" fill="rgb(254,35,30)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="671.50"/>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="645" width="0.5000%" height="15" fill="rgb(226,169,23)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="655.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="629" width="0.5000%" height="15" fill="rgb(218,216,52)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="639.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="613" width="0.5000%" height="15" fill="rgb(235,200,16)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="623.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="597" width="0.5000%" height="15" fill="rgb(213,34,18)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="607.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="581" width="0.5000%" height="15" fill="rgb(210,105,37)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="591.50"/>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="565" width="0.5000%" height="15" fill="rgb(222,94,14)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="575.50"/>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="549" width="0.5000%" height="15" fill="rgb(254,35,30)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="559.50"/>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="533" width="0.5000%" height="15" fill="rgb(226,169,23)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="543.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="517" width="0.5000%" height="15" fill="rgb(205,130,14)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="527.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="501" width="0.5000%" height="15" fill="rgb(213,34,18)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="511.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="485" width="0.5000%" height="15" fill="rgb(253,35,22)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="495.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::literal_trie::LiteralTrie::add (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="469" width="0.5000%" height="15" fill="rgb(247,201,32)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="479.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::literal_trie::LiteralTrie::get_or_add_state (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="453" width="0.5000%" height="15" fill="rgb(249,22,31)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="463.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="437" width="0.5000%" height="15" fill="rgb(241,229,15)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="447.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="421" width="0.5000%" height="15" fill="rgb(254,103,39)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="431.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="405" width="0.5000%" height="15" fill="rgb(254,53,35)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="415.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::finish_grow (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="389" width="0.5000%" height="15" fill="rgb(237,133,22)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="399.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="373" width="0.5000%" height="15" fill="rgb(237,156,49)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="383.50"/>
    </g>
    <g>
      <title>alloc::alloc::Global::grow_impl (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="357" width="0.5000%" height="15" fill="rgb(214,150,36)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="367.50"/>
    </g>
    <g>
      <title>alloc::alloc::realloc (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="341" width="0.5000%" height="15" fill="rgb(254,47,34)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="351.50"/>
    </g>
    <g>
      <title>__GI___libc_realloc (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="325" width="0.5000%" height="15" fill="rgb(254,73,4)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="335.50"/>
    </g>
    <g>
      <title>_int_realloc (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="309" width="0.5000%" height="15" fill="rgb(231,75,41)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="319.50"/>
    </g>
    <g>
      <title>_int_malloc (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="293" width="0.5000%" height="15" fill="rgb(222,219,51)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="303.50"/>
    </g>
    <g>
      <title>malloc_consolidate (1 samples, 0.50%)</title>
      <rect x="66.5000%" y="277" width="0.5000%" height="15" fill="rgb(228,194,39)" fg:x="133" fg:w="1"/>
      <text x="66.7500%" y="287.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::builder::Builder::add_union (1 samples, 0.50%)</title>
      <rect x="67.0000%" y="453" width="0.5000%" height="15" fill="rgb(247,38,8)" fg:x="134" fg:w="1"/>
      <text x="67.2500%" y="463.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::builder::Builder::add_range (1 samples, 0.50%)</title>
      <rect x="67.5000%" y="453" width="0.5000%" height="15" fill="rgb(245,83,34)" fg:x="135" fg:w="1"/>
      <text x="67.7500%" y="463.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.50%)</title>
      <rect x="67.5000%" y="437" width="0.5000%" height="15" fill="rgb(253,91,29)" fg:x="135" fg:w="1"/>
      <text x="67.7500%" y="447.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::literal_trie::LiteralTrie::compile (3 samples, 1.50%)</title>
      <rect x="67.0000%" y="469" width="1.5000%" height="15" fill="rgb(233,39,2)" fg:x="134" fg:w="3"/>
      <text x="67.2500%" y="479.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.50%)</title>
      <rect x="68.0000%" y="453" width="0.5000%" height="15" fill="rgb(241,229,15)" fg:x="136" fg:w="1"/>
      <text x="68.2500%" y="463.50"/>
    </g>
    <g>
      <title>core::ptr::write (1 samples, 0.50%)</title>
      <rect x="68.0000%" y="437" width="0.5000%" height="15" fill="rgb(209,143,44)" fg:x="136" fg:w="1"/>
      <text x="68.2500%" y="447.50"/>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 2.00%)</title>
      <rect x="67.0000%" y="581" width="2.0000%" height="15" fill="rgb(214,109,53)" fg:x="134" fg:w="4"/>
      <text x="67.2500%" y="591.50">&lt;..</text>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (4 samples, 2.00%)</title>
      <rect x="67.0000%" y="565" width="2.0000%" height="15" fill="rgb(254,35,30)" fg:x="134" fg:w="4"/>
      <text x="67.2500%" y="575.50">c..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4 samples, 2.00%)</title>
      <rect x="67.0000%" y="549" width="2.0000%" height="15" fill="rgb(226,169,23)" fg:x="134" fg:w="4"/>
      <text x="67.2500%" y="559.50">c..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (4 samples, 2.00%)</title>
      <rect x="67.0000%" y="533" width="2.0000%" height="15" fill="rgb(205,130,14)" fg:x="134" fg:w="4"/>
      <text x="67.2500%" y="543.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (4 samples, 2.00%)</title>
      <rect x="67.0000%" y="517" width="2.0000%" height="15" fill="rgb(235,200,16)" fg:x="134" fg:w="4"/>
      <text x="67.2500%" y="527.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 2.00%)</title>
      <rect x="67.0000%" y="501" width="2.0000%" height="15" fill="rgb(213,34,18)" fg:x="134" fg:w="4"/>
      <text x="67.2500%" y="511.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (4 samples, 2.00%)</title>
      <rect x="67.0000%" y="485" width="2.0000%" height="15" fill="rgb(253,35,22)" fg:x="134" fg:w="4"/>
      <text x="67.2500%" y="495.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::literal_trie::LiteralTrie::add (1 samples, 0.50%)</title>
      <rect x="68.5000%" y="469" width="0.5000%" height="15" fill="rgb(247,201,32)" fg:x="137" fg:w="1"/>
      <text x="68.7500%" y="479.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::literal_trie::LiteralTrie::get_or_add_state (1 samples, 0.50%)</title>
      <rect x="68.5000%" y="453" width="0.5000%" height="15" fill="rgb(249,22,31)" fg:x="137" fg:w="1"/>
      <text x="68.7500%" y="463.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::insert (1 samples, 0.50%)</title>
      <rect x="68.5000%" y="437" width="0.5000%" height="15" fill="rgb(222,129,7)" fg:x="137" fg:w="1"/>
      <text x="68.7500%" y="447.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.50%)</title>
      <rect x="68.5000%" y="421" width="0.5000%" height="15" fill="rgb(212,159,3)" fg:x="137" fg:w="1"/>
      <text x="68.7500%" y="431.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.50%)</title>
      <rect x="68.5000%" y="405" width="0.5000%" height="15" fill="rgb(231,142,39)" fg:x="137" fg:w="1"/>
      <text x="68.7500%" y="415.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.50%)</title>
      <rect x="68.5000%" y="389" width="0.5000%" height="15" fill="rgb(249,2,22)" fg:x="137" fg:w="1"/>
      <text x="68.7500%" y="399.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.50%)</title>
      <rect x="68.5000%" y="373" width="0.5000%" height="15" fill="rgb(254,53,35)" fg:x="137" fg:w="1"/>
      <text x="68.7500%" y="383.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::finish_grow (1 samples, 0.50%)</title>
      <rect x="68.5000%" y="357" width="0.5000%" height="15" fill="rgb(237,133,22)" fg:x="137" fg:w="1"/>
      <text x="68.7500%" y="367.50"/>
    </g>
    <g>
      <title>__GI___libc_malloc (1 samples, 0.50%)</title>
      <rect x="68.5000%" y="341" width="0.5000%" height="15" fill="rgb(206,112,53)" fg:x="137" fg:w="1"/>
      <text x="68.7500%" y="351.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::finish_grow (1 samples, 0.50%)</title>
      <rect x="69.0000%" y="405" width="0.5000%" height="15" fill="rgb(237,133,22)" fg:x="138" fg:w="1"/>
      <text x="69.2500%" y="415.50"/>
    </g>
    <g>
      <title>__rust_alloc (1 samples, 0.50%)</title>
      <rect x="69.0000%" y="389" width="0.5000%" height="15" fill="rgb(243,191,43)" fg:x="138" fg:w="1"/>
      <text x="69.2500%" y="399.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 1.00%)</title>
      <rect x="69.0000%" y="453" width="1.0000%" height="15" fill="rgb(241,229,15)" fg:x="138" fg:w="2"/>
      <text x="69.2500%" y="463.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 1.00%)</title>
      <rect x="69.0000%" y="437" width="1.0000%" height="15" fill="rgb(254,103,39)" fg:x="138" fg:w="2"/>
      <text x="69.2500%" y="447.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 1.00%)</title>
      <rect x="69.0000%" y="421" width="1.0000%" height="15" fill="rgb(254,53,35)" fg:x="138" fg:w="2"/>
      <text x="69.2500%" y="431.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.50%)</title>
      <rect x="69.5000%" y="405" width="0.5000%" height="15" fill="rgb(253,185,17)" fg:x="139" fg:w="1"/>
      <text x="69.7500%" y="415.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::literal_trie::LiteralTrie::compile (5 samples, 2.50%)</title>
      <rect x="69.0000%" y="469" width="2.5000%" height="15" fill="rgb(233,39,2)" fg:x="138" fg:w="5"/>
      <text x="69.2500%" y="479.50">re..</text>
    </g>
    <g>
      <title>_int_malloc (2 samples, 1.00%)</title>
      <rect x="71.5000%" y="357" width="1.0000%" height="15" fill="rgb(222,219,51)" fg:x="143" fg:w="2"/>
      <text x="71.7500%" y="367.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::literal_trie::State::add_match (3 samples, 1.50%)</title>
      <rect x="71.5000%" y="453" width="1.5000%" height="15" fill="rgb(206,206,41)" fg:x="143" fg:w="3"/>
      <text x="71.7500%" y="463.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 1.50%)</title>
      <rect x="71.5000%" y="437" width="1.5000%" height="15" fill="rgb(241,229,15)" fg:x="143" fg:w="3"/>
      <text x="71.7500%" y="447.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 1.50%)</title>
      <rect x="71.5000%" y="421" width="1.5000%" height="15" fill="rgb(254,103,39)" fg:x="143" fg:w="3"/>
      <text x="71.7500%" y="431.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 1.50%)</title>
      <rect x="71.5000%" y="405" width="1.5000%" height="15" fill="rgb(254,53,35)" fg:x="143" fg:w="3"/>
      <text x="71.7500%" y="415.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::finish_grow (3 samples, 1.50%)</title>
      <rect x="71.5000%" y="389" width="1.5000%" height="15" fill="rgb(237,133,22)" fg:x="143" fg:w="3"/>
      <text x="71.7500%" y="399.50"/>
    </g>
    <g>
      <title>__GI___libc_malloc (3 samples, 1.50%)</title>
      <rect x="71.5000%" y="373" width="1.5000%" height="15" fill="rgb(206,112,53)" fg:x="143" fg:w="3"/>
      <text x="71.7500%" y="383.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::literal_trie::LiteralTrie::add (4 samples, 2.00%)</title>
      <rect x="71.5000%" y="469" width="2.0000%" height="15" fill="rgb(247,201,32)" fg:x="143" fg:w="4"/>
      <text x="71.7500%" y="479.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::literal_trie::LiteralTrie::get_or_add_state (1 samples, 0.50%)</title>
      <rect x="73.0000%" y="453" width="0.5000%" height="15" fill="rgb(249,22,31)" fg:x="146" fg:w="1"/>
      <text x="73.2500%" y="463.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::insert (1 samples, 0.50%)</title>
      <rect x="73.0000%" y="437" width="0.5000%" height="15" fill="rgb(222,129,7)" fg:x="146" fg:w="1"/>
      <text x="73.2500%" y="447.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.50%)</title>
      <rect x="73.0000%" y="421" width="0.5000%" height="15" fill="rgb(212,159,3)" fg:x="146" fg:w="1"/>
      <text x="73.2500%" y="431.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.50%)</title>
      <rect x="73.0000%" y="405" width="0.5000%" height="15" fill="rgb(231,142,39)" fg:x="146" fg:w="1"/>
      <text x="73.2500%" y="415.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.50%)</title>
      <rect x="73.0000%" y="389" width="0.5000%" height="15" fill="rgb(249,2,22)" fg:x="146" fg:w="1"/>
      <text x="73.2500%" y="399.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.50%)</title>
      <rect x="73.0000%" y="373" width="0.5000%" height="15" fill="rgb(254,53,35)" fg:x="146" fg:w="1"/>
      <text x="73.2500%" y="383.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::finish_grow (1 samples, 0.50%)</title>
      <rect x="73.0000%" y="357" width="0.5000%" height="15" fill="rgb(237,133,22)" fg:x="146" fg:w="1"/>
      <text x="73.2500%" y="367.50"/>
    </g>
    <g>
      <title>__GI___libc_malloc (1 samples, 0.50%)</title>
      <rect x="73.0000%" y="341" width="0.5000%" height="15" fill="rgb(206,112,53)" fg:x="146" fg:w="1"/>
      <text x="73.2500%" y="351.50"/>
    </g>
    <g>
      <title>_int_malloc (1 samples, 0.50%)</title>
      <rect x="73.0000%" y="325" width="0.5000%" height="15" fill="rgb(222,219,51)" fg:x="146" fg:w="1"/>
      <text x="73.2500%" y="335.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (10 samples, 5.00%)</title>
      <rect x="69.0000%" y="517" width="5.0000%" height="15" fill="rgb(235,200,16)" fg:x="138" fg:w="10"/>
      <text x="69.2500%" y="527.50">regex_..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (10 samples, 5.00%)</title>
      <rect x="69.0000%" y="501" width="5.0000%" height="15" fill="rgb(213,34,18)" fg:x="138" fg:w="10"/>
      <text x="69.2500%" y="511.50">regex_..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (10 samples, 5.00%)</title>
      <rect x="69.0000%" y="485" width="5.0000%" height="15" fill="rgb(253,35,22)" fg:x="138" fg:w="10"/>
      <text x="69.2500%" y="495.50">regex_..</text>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::literal_trie::LiteralTrie&gt; (1 samples, 0.50%)</title>
      <rect x="73.5000%" y="469" width="0.5000%" height="15" fill="rgb(244,70,29)" fg:x="147" fg:w="1"/>
      <text x="73.7500%" y="479.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::literal_trie::State&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="73.5000%" y="453" width="0.5000%" height="15" fill="rgb(227,19,7)" fg:x="147" fg:w="1"/>
      <text x="73.7500%" y="463.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::literal_trie::State&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="73.5000%" y="437" width="0.5000%" height="15" fill="rgb(227,72,15)" fg:x="147" fg:w="1"/>
      <text x="73.7500%" y="447.50"/>
    </g>
    <g>
      <title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.50%)</title>
      <rect x="73.5000%" y="421" width="0.5000%" height="15" fill="rgb(213,128,22)" fg:x="147" fg:w="1"/>
      <text x="73.7500%" y="431.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.50%)</title>
      <rect x="73.5000%" y="405" width="0.5000%" height="15" fill="rgb(238,77,31)" fg:x="147" fg:w="1"/>
      <text x="73.7500%" y="415.50"/>
    </g>
    <g>
      <title>alloc::alloc::dealloc (1 samples, 0.50%)</title>
      <rect x="73.5000%" y="389" width="0.5000%" height="15" fill="rgb(227,15,28)" fg:x="147" fg:w="1"/>
      <text x="73.7500%" y="399.50"/>
    </g>
    <g>
      <title>__GI___libc_free (1 samples, 0.50%)</title>
      <rect x="73.5000%" y="373" width="0.5000%" height="15" fill="rgb(247,8,17)" fg:x="147" fg:w="1"/>
      <text x="73.7500%" y="383.50"/>
    </g>
    <g>
      <title>_int_free (1 samples, 0.50%)</title>
      <rect x="73.5000%" y="357" width="0.5000%" height="15" fill="rgb(221,113,48)" fg:x="147" fg:w="1"/>
      <text x="73.7500%" y="367.50"/>
    </g>
    <g>
      <title>malloc_consolidate (1 samples, 0.50%)</title>
      <rect x="73.5000%" y="341" width="0.5000%" height="15" fill="rgb(228,194,39)" fg:x="147" fg:w="1"/>
      <text x="73.7500%" y="351.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (15 samples, 7.50%)</title>
      <rect x="67.0000%" y="741" width="7.5000%" height="15" fill="rgb(226,42,16)" fg:x="134" fg:w="15"/>
      <text x="67.2500%" y="751.50">regex_auto..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::compile (15 samples, 7.50%)</title>
      <rect x="67.0000%" y="725" width="7.5000%" height="15" fill="rgb(242,129,17)" fg:x="134" fg:w="15"/>
      <text x="67.2500%" y="735.50">regex_auto..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (15 samples, 7.50%)</title>
      <rect x="67.0000%" y="709" width="7.5000%" height="15" fill="rgb(247,137,3)" fg:x="134" fg:w="15"/>
      <text x="67.2500%" y="719.50">regex_auto..</text>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 7.50%)</title>
      <rect x="67.0000%" y="693" width="7.5000%" height="15" fill="rgb(214,109,53)" fg:x="134" fg:w="15"/>
      <text x="67.2500%" y="703.50">&lt;core::ite..</text>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (15 samples, 7.50%)</title>
      <rect x="67.0000%" y="677" width="7.5000%" height="15" fill="rgb(254,35,30)" fg:x="134" fg:w="15"/>
      <text x="67.2500%" y="687.50">core::opti..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (15 samples, 7.50%)</title>
      <rect x="67.0000%" y="661" width="7.5000%" height="15" fill="rgb(226,169,23)" fg:x="134" fg:w="15"/>
      <text x="67.2500%" y="671.50">core::ops:..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (15 samples, 7.50%)</title>
      <rect x="67.0000%" y="645" width="7.5000%" height="15" fill="rgb(218,216,52)" fg:x="134" fg:w="15"/>
      <text x="67.2500%" y="655.50">regex_auto..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (15 samples, 7.50%)</title>
      <rect x="67.0000%" y="629" width="7.5000%" height="15" fill="rgb(235,200,16)" fg:x="134" fg:w="15"/>
      <text x="67.2500%" y="639.50">regex_auto..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (15 samples, 7.50%)</title>
      <rect x="67.0000%" y="613" width="7.5000%" height="15" fill="rgb(213,34,18)" fg:x="134" fg:w="15"/>
      <text x="67.2500%" y="623.50">regex_auto..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (15 samples, 7.50%)</title>
      <rect x="67.0000%" y="597" width="7.5000%" height="15" fill="rgb(210,105,37)" fg:x="134" fg:w="15"/>
      <text x="67.2500%" y="607.50">regex_auto..</text>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (11 samples, 5.50%)</title>
      <rect x="69.0000%" y="581" width="5.5000%" height="15" fill="rgb(222,94,14)" fg:x="138" fg:w="11"/>
      <text x="69.2500%" y="591.50">&lt;core::..</text>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (11 samples, 5.50%)</title>
      <rect x="69.0000%" y="565" width="5.5000%" height="15" fill="rgb(254,35,30)" fg:x="138" fg:w="11"/>
      <text x="69.2500%" y="575.50">core::o..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (11 samples, 5.50%)</title>
      <rect x="69.0000%" y="549" width="5.5000%" height="15" fill="rgb(226,169,23)" fg:x="138" fg:w="11"/>
      <text x="69.2500%" y="559.50">core::o..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (11 samples, 5.50%)</title>
      <rect x="69.0000%" y="533" width="5.5000%" height="15" fill="rgb(205,130,14)" fg:x="138" fg:w="11"/>
      <text x="69.2500%" y="543.50">regex_a..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.50%)</title>
      <rect x="74.0000%" y="517" width="0.5000%" height="15" fill="rgb(213,34,18)" fg:x="148" fg:w="1"/>
      <text x="74.2500%" y="527.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_repetition (1 samples, 0.50%)</title>
      <rect x="74.0000%" y="501" width="0.5000%" height="15" fill="rgb(205,23,25)" fg:x="148" fg:w="1"/>
      <text x="74.2500%" y="511.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_zero_or_one (1 samples, 0.50%)</title>
      <rect x="74.0000%" y="485" width="0.5000%" height="15" fill="rgb(240,227,44)" fg:x="148" fg:w="1"/>
      <text x="74.2500%" y="495.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.50%)</title>
      <rect x="74.0000%" y="469" width="0.5000%" height="15" fill="rgb(213,34,18)" fg:x="148" fg:w="1"/>
      <text x="74.2500%" y="479.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1 samples, 0.50%)</title>
      <rect x="74.0000%" y="453" width="0.5000%" height="15" fill="rgb(246,38,12)" fg:x="148" fg:w="1"/>
      <text x="74.2500%" y="463.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.50%)</title>
      <rect x="74.0000%" y="437" width="0.5000%" height="15" fill="rgb(239,11,32)" fg:x="148" fg:w="1"/>
      <text x="74.2500%" y="447.50"/>
    </g>
    <g>
      <title>__memmove_avx512_unaligned_erms (1 samples, 0.50%)</title>
      <rect x="74.5000%" y="421" width="0.5000%" height="15" fill="rgb(217,126,36)" fg:x="149" fg:w="1"/>
      <text x="74.7500%" y="431.50"/>
    </g>
    <g>
      <title>s4lib::data::datetime::bytes_to_regex_to_datetime (18 samples, 9.00%)</title>
      <rect x="66.5000%" y="1029" width="9.0000%" height="15" fill="rgb(252,84,36)" fg:x="133" fg:w="18"/>
      <text x="66.7500%" y="1039.50">s4lib::data::..</text>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref (18 samples, 9.00%)</title>
      <rect x="66.5000%" y="1013" width="9.0000%" height="15" fill="rgb(217,15,43)" fg:x="133" fg:w="18"/>
      <text x="66.7500%" y="1023.50">&lt;s4lib::data:..</text>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref::__stability (18 samples, 9.00%)</title>
      <rect x="66.5000%" y="997" width="9.0000%" height="15" fill="rgb(239,165,48)" fg:x="133" fg:w="18"/>
      <text x="66.7500%" y="1007.50">&lt;s4lib::data:..</text>
    </g>
    <g>
      <title>lazy_static::lazy::Lazy&lt;T&gt;::get (18 samples, 9.00%)</title>
      <rect x="66.5000%" y="981" width="9.0000%" height="15" fill="rgb(235,175,8)" fg:x="133" fg:w="18"/>
      <text x="66.7500%" y="991.50">lazy_static::..</text>
    </g>
    <g>
      <title>std::sync::once::Once::call_once (18 samples, 9.00%)</title>
      <rect x="66.5000%" y="965" width="9.0000%" height="15" fill="rgb(247,17,47)" fg:x="133" fg:w="18"/>
      <text x="66.7500%" y="975.50">std::sync::on..</text>
    </g>
    <g>
      <title>std::sys_common::once::futex::Once::call (18 samples, 9.00%)</title>
      <rect x="66.5000%" y="949" width="9.0000%" height="15" fill="rgb(246,168,49)" fg:x="133" fg:w="18"/>
      <text x="66.7500%" y="959.50">std::sys_comm..</text>
    </g>
    <g>
      <title>std::sync::once::Once::call_once::{{closure}} (18 samples, 9.00%)</title>
      <rect x="66.5000%" y="933" width="9.0000%" height="15" fill="rgb(237,63,35)" fg:x="133" fg:w="18"/>
      <text x="66.7500%" y="943.50">std::sync::on..</text>
    </g>
    <g>
      <title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (18 samples, 9.00%)</title>
      <rect x="66.5000%" y="917" width="9.0000%" height="15" fill="rgb(238,7,51)" fg:x="133" fg:w="18"/>
      <text x="66.7500%" y="927.50">lazy_static::..</text>
    </g>
    <g>
      <title>core::ops::function::FnOnce::call_once (18 samples, 9.00%)</title>
      <rect x="66.5000%" y="901" width="9.0000%" height="15" fill="rgb(210,80,10)" fg:x="133" fg:w="18"/>
      <text x="66.7500%" y="911.50">core::ops::fu..</text>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (18 samples, 9.00%)</title>
      <rect x="66.5000%" y="885" width="9.0000%" height="15" fill="rgb(205,24,29)" fg:x="133" fg:w="18"/>
      <text x="66.7500%" y="895.50">&lt;s4lib::data:..</text>
    </g>
    <g>
      <title>regex::regex::bytes::Regex::new (18 samples, 9.00%)</title>
      <rect x="66.5000%" y="869" width="9.0000%" height="15" fill="rgb(246,224,25)" fg:x="133" fg:w="18"/>
      <text x="66.7500%" y="879.50">regex::regex:..</text>
    </g>
    <g>
      <title>regex::builders::bytes::RegexBuilder::build (18 samples, 9.00%)</title>
      <rect x="66.5000%" y="853" width="9.0000%" height="15" fill="rgb(236,76,51)" fg:x="133" fg:w="18"/>
      <text x="66.7500%" y="863.50">regex::builde..</text>
    </g>
    <g>
      <title>regex::builders::Builder::build_one_bytes (18 samples, 9.00%)</title>
      <rect x="66.5000%" y="837" width="9.0000%" height="15" fill="rgb(233,102,7)" fg:x="133" fg:w="18"/>
      <text x="66.7500%" y="847.50">regex::builde..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build (18 samples, 9.00%)</title>
      <rect x="66.5000%" y="821" width="9.0000%" height="15" fill="rgb(212,33,22)" fg:x="133" fg:w="18"/>
      <text x="66.7500%" y="831.50">regex_automat..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many (18 samples, 9.00%)</title>
      <rect x="66.5000%" y="805" width="9.0000%" height="15" fill="rgb(236,25,32)" fg:x="133" fg:w="18"/>
      <text x="66.7500%" y="815.50">regex_automat..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many_from_hir (18 samples, 9.00%)</title>
      <rect x="66.5000%" y="789" width="9.0000%" height="15" fill="rgb(250,142,30)" fg:x="133" fg:w="18"/>
      <text x="66.7500%" y="799.50">regex_automat..</text>
    </g>
    <g>
      <title>regex_automata::meta::strategy::new (18 samples, 9.00%)</title>
      <rect x="66.5000%" y="773" width="9.0000%" height="15" fill="rgb(243,171,22)" fg:x="133" fg:w="18"/>
      <text x="66.7500%" y="783.50">regex_automat..</text>
    </g>
    <g>
      <title>regex_automata::meta::strategy::Core::new (17 samples, 8.50%)</title>
      <rect x="67.0000%" y="757" width="8.5000%" height="15" fill="rgb(222,69,27)" fg:x="134" fg:w="17"/>
      <text x="67.2500%" y="767.50">regex_automa..</text>
    </g>
    <g>
      <title>regex_automata::meta::wrappers::OnePass::new (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="741" width="1.0000%" height="15" fill="rgb(235,224,47)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="751.50"/>
    </g>
    <g>
      <title>regex_automata::meta::wrappers::OnePassEngine::new (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="725" width="1.0000%" height="15" fill="rgb(247,185,25)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="735.50"/>
    </g>
    <g>
      <title>regex_automata::dfa::onepass::Builder::build_from_nfa (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="709" width="1.0000%" height="15" fill="rgb(209,62,19)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="719.50"/>
    </g>
    <g>
      <title>regex_automata::dfa::onepass::InternalBuilder::build (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="693" width="1.0000%" height="15" fill="rgb(206,107,24)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="703.50"/>
    </g>
    <g>
      <title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="677" width="1.0000%" height="15" fill="rgb(230,62,50)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="687.50"/>
    </g>
    <g>
      <title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="661" width="1.0000%" height="15" fill="rgb(226,222,5)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="671.50"/>
    </g>
    <g>
      <title>regex_automata::dfa::onepass::InternalBuilder::add_empty_state (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="645" width="1.0000%" height="15" fill="rgb(249,155,54)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="655.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="629" width="1.0000%" height="15" fill="rgb(205,186,49)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="639.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="613" width="1.0000%" height="15" fill="rgb(232,211,42)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="623.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="597" width="1.0000%" height="15" fill="rgb(214,146,48)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="607.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="581" width="1.0000%" height="15" fill="rgb(212,159,3)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="591.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="565" width="1.0000%" height="15" fill="rgb(231,142,39)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="575.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="549" width="1.0000%" height="15" fill="rgb(249,2,22)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="559.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="533" width="1.0000%" height="15" fill="rgb(254,53,35)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="543.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::finish_grow (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="517" width="1.0000%" height="15" fill="rgb(237,133,22)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="527.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="501" width="1.0000%" height="15" fill="rgb(237,156,49)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="511.50"/>
    </g>
    <g>
      <title>alloc::alloc::Global::grow_impl (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="485" width="1.0000%" height="15" fill="rgb(214,150,36)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="495.50"/>
    </g>
    <g>
      <title>alloc::alloc::realloc (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="469" width="1.0000%" height="15" fill="rgb(254,47,34)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="479.50"/>
    </g>
    <g>
      <title>__GI___libc_realloc (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="453" width="1.0000%" height="15" fill="rgb(254,73,4)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="463.50"/>
    </g>
    <g>
      <title>_int_realloc (2 samples, 1.00%)</title>
      <rect x="74.5000%" y="437" width="1.0000%" height="15" fill="rgb(231,75,41)" fg:x="149" fg:w="2"/>
      <text x="74.7500%" y="447.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="75.0000%" y="421" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="150" fg:w="1"/>
      <text x="75.2500%" y="431.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="75.0000%" y="405" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="150" fg:w="1"/>
      <text x="75.2500%" y="415.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="75.0000%" y="389" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="150" fg:w="1"/>
      <text x="75.2500%" y="399.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::PreferenceTrie::root (1 samples, 0.50%)</title>
      <rect x="75.5000%" y="469" width="0.5000%" height="15" fill="rgb(249,191,47)" fg:x="151" fg:w="1"/>
      <text x="75.7500%" y="479.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::is_empty (1 samples, 0.50%)</title>
      <rect x="75.5000%" y="453" width="0.5000%" height="15" fill="rgb(242,223,10)" fg:x="151" fg:w="1"/>
      <text x="75.7500%" y="463.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::PreferenceTrie::minimize::{{closure}} (2 samples, 1.00%)</title>
      <rect x="75.5000%" y="501" width="1.0000%" height="15" fill="rgb(234,110,33)" fg:x="151" fg:w="2"/>
      <text x="75.7500%" y="511.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::PreferenceTrie::insert (2 samples, 1.00%)</title>
      <rect x="75.5000%" y="485" width="1.0000%" height="15" fill="rgb(208,38,45)" fg:x="151" fg:w="2"/>
      <text x="75.7500%" y="495.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::insert (1 samples, 0.50%)</title>
      <rect x="76.0000%" y="469" width="0.5000%" height="15" fill="rgb(222,129,7)" fg:x="152" fg:w="1"/>
      <text x="76.2500%" y="479.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.50%)</title>
      <rect x="76.0000%" y="453" width="0.5000%" height="15" fill="rgb(212,159,3)" fg:x="152" fg:w="1"/>
      <text x="76.2500%" y="463.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.50%)</title>
      <rect x="76.0000%" y="437" width="0.5000%" height="15" fill="rgb(231,142,39)" fg:x="152" fg:w="1"/>
      <text x="76.2500%" y="447.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.50%)</title>
      <rect x="76.0000%" y="421" width="0.5000%" height="15" fill="rgb(249,2,22)" fg:x="152" fg:w="1"/>
      <text x="76.2500%" y="431.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.50%)</title>
      <rect x="76.0000%" y="405" width="0.5000%" height="15" fill="rgb(254,53,35)" fg:x="152" fg:w="1"/>
      <text x="76.2500%" y="415.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::finish_grow (1 samples, 0.50%)</title>
      <rect x="76.0000%" y="389" width="0.5000%" height="15" fill="rgb(237,133,22)" fg:x="152" fg:w="1"/>
      <text x="76.2500%" y="399.50"/>
    </g>
    <g>
      <title>__GI___libc_malloc (1 samples, 0.50%)</title>
      <rect x="76.0000%" y="373" width="0.5000%" height="15" fill="rgb(206,112,53)" fg:x="152" fg:w="1"/>
      <text x="76.2500%" y="383.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;regex_syntax::hir::literal::Literal&gt; (1 samples, 0.50%)</title>
      <rect x="76.5000%" y="501" width="0.5000%" height="15" fill="rgb(229,58,2)" fg:x="153" fg:w="1"/>
      <text x="76.7500%" y="511.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="76.5000%" y="485" width="0.5000%" height="15" fill="rgb(248,33,49)" fg:x="153" fg:w="1"/>
      <text x="76.7500%" y="495.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="76.5000%" y="469" width="0.5000%" height="15" fill="rgb(208,40,33)" fg:x="153" fg:w="1"/>
      <text x="76.7500%" y="479.50"/>
    </g>
    <g>
      <title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.50%)</title>
      <rect x="76.5000%" y="453" width="0.5000%" height="15" fill="rgb(213,128,22)" fg:x="153" fg:w="1"/>
      <text x="76.7500%" y="463.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.50%)</title>
      <rect x="76.5000%" y="437" width="0.5000%" height="15" fill="rgb(238,77,31)" fg:x="153" fg:w="1"/>
      <text x="76.7500%" y="447.50"/>
    </g>
    <g>
      <title>alloc::alloc::dealloc (1 samples, 0.50%)</title>
      <rect x="76.5000%" y="421" width="0.5000%" height="15" fill="rgb(227,15,28)" fg:x="153" fg:w="1"/>
      <text x="76.7500%" y="431.50"/>
    </g>
    <g>
      <title>__GI___libc_free (1 samples, 0.50%)</title>
      <rect x="76.5000%" y="405" width="0.5000%" height="15" fill="rgb(247,8,17)" fg:x="153" fg:w="1"/>
      <text x="76.7500%" y="415.50"/>
    </g>
    <g>
      <title>_int_free (1 samples, 0.50%)</title>
      <rect x="76.5000%" y="389" width="0.5000%" height="15" fill="rgb(221,113,48)" fg:x="153" fg:w="1"/>
      <text x="76.7500%" y="399.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Seq::optimize_for_prefix_by_preference (4 samples, 2.00%)</title>
      <rect x="75.5000%" y="581" width="2.0000%" height="15" fill="rgb(206,179,34)" fg:x="151" fg:w="4"/>
      <text x="75.7500%" y="591.50">r..</text>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Seq::optimize_by_preference (4 samples, 2.00%)</title>
      <rect x="75.5000%" y="565" width="2.0000%" height="15" fill="rgb(208,121,1)" fg:x="151" fg:w="4"/>
      <text x="75.7500%" y="575.50">r..</text>
    </g>
    <g>
      <title>regex_syntax::hir::literal::PreferenceTrie::minimize (4 samples, 2.00%)</title>
      <rect x="75.5000%" y="549" width="2.0000%" height="15" fill="rgb(240,28,15)" fg:x="151" fg:w="4"/>
      <text x="75.7500%" y="559.50">r..</text>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (4 samples, 2.00%)</title>
      <rect x="75.5000%" y="533" width="2.0000%" height="15" fill="rgb(208,159,28)" fg:x="151" fg:w="4"/>
      <text x="75.7500%" y="543.50">a..</text>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (4 samples, 2.00%)</title>
      <rect x="75.5000%" y="517" width="2.0000%" height="15" fill="rgb(227,228,3)" fg:x="151" fg:w="4"/>
      <text x="75.7500%" y="527.50">a..</text>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract_concat (1 samples, 0.50%)</title>
      <rect x="77.5000%" y="533" width="0.5000%" height="15" fill="rgb(215,217,42)" fg:x="155" fg:w="1"/>
      <text x="77.7500%" y="543.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::cross (1 samples, 0.50%)</title>
      <rect x="77.5000%" y="517" width="0.5000%" height="15" fill="rgb(248,169,31)" fg:x="155" fg:w="1"/>
      <text x="77.7500%" y="527.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Seq::cross_forward (1 samples, 0.50%)</title>
      <rect x="77.5000%" y="501" width="0.5000%" height="15" fill="rgb(228,175,28)" fg:x="155" fg:w="1"/>
      <text x="77.7500%" y="511.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.50%)</title>
      <rect x="77.5000%" y="485" width="0.5000%" height="15" fill="rgb(253,154,22)" fg:x="155" fg:w="1"/>
      <text x="77.7500%" y="495.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.50%)</title>
      <rect x="77.5000%" y="469" width="0.5000%" height="15" fill="rgb(249,207,12)" fg:x="155" fg:w="1"/>
      <text x="77.7500%" y="479.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.50%)</title>
      <rect x="77.5000%" y="453" width="0.5000%" height="15" fill="rgb(224,194,14)" fg:x="155" fg:w="1"/>
      <text x="77.7500%" y="463.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.50%)</title>
      <rect x="77.5000%" y="437" width="0.5000%" height="15" fill="rgb(227,204,5)" fg:x="155" fg:w="1"/>
      <text x="77.7500%" y="447.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.50%)</title>
      <rect x="77.5000%" y="421" width="0.5000%" height="15" fill="rgb(231,114,21)" fg:x="155" fg:w="1"/>
      <text x="77.7500%" y="431.50"/>
    </g>
    <g>
      <title>alloc::alloc::Global::alloc_impl (1 samples, 0.50%)</title>
      <rect x="77.5000%" y="405" width="0.5000%" height="15" fill="rgb(238,209,2)" fg:x="155" fg:w="1"/>
      <text x="77.7500%" y="415.50"/>
    </g>
    <g>
      <title>alloc::alloc::alloc (1 samples, 0.50%)</title>
      <rect x="77.5000%" y="389" width="0.5000%" height="15" fill="rgb(253,135,41)" fg:x="155" fg:w="1"/>
      <text x="77.7500%" y="399.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract (2 samples, 1.00%)</title>
      <rect x="77.5000%" y="549" width="1.0000%" height="15" fill="rgb(242,28,8)" fg:x="155" fg:w="2"/>
      <text x="77.7500%" y="559.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract_alternation (1 samples, 0.50%)</title>
      <rect x="78.0000%" y="533" width="0.5000%" height="15" fill="rgb(236,31,24)" fg:x="156" fg:w="1"/>
      <text x="78.2500%" y="543.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;regex_syntax::hir::literal::Seq&gt; (1 samples, 0.50%)</title>
      <rect x="78.0000%" y="517" width="0.5000%" height="15" fill="rgb(205,156,42)" fg:x="156" fg:w="1"/>
      <text x="78.2500%" y="527.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;regex_syntax::hir::literal::Literal&gt;&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="78.0000%" y="501" width="0.5000%" height="15" fill="rgb(206,64,7)" fg:x="156" fg:w="1"/>
      <text x="78.2500%" y="511.50"/>
    </g>
    <g>
      <title>regex_automata::util::prefilter::prefixes (7 samples, 3.50%)</title>
      <rect x="75.5000%" y="597" width="3.5000%" height="15" fill="rgb(209,67,19)" fg:x="151" fg:w="7"/>
      <text x="75.7500%" y="607.50">reg..</text>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract (3 samples, 1.50%)</title>
      <rect x="77.5000%" y="581" width="1.5000%" height="15" fill="rgb(242,28,8)" fg:x="155" fg:w="3"/>
      <text x="77.7500%" y="591.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::extract_concat (3 samples, 1.50%)</title>
      <rect x="77.5000%" y="565" width="1.5000%" height="15" fill="rgb(215,217,42)" fg:x="155" fg:w="3"/>
      <text x="77.7500%" y="575.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Extractor::cross (1 samples, 0.50%)</title>
      <rect x="78.5000%" y="549" width="0.5000%" height="15" fill="rgb(248,169,31)" fg:x="157" fg:w="1"/>
      <text x="78.7500%" y="559.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::literal::Seq::cross_forward (1 samples, 0.50%)</title>
      <rect x="78.5000%" y="533" width="0.5000%" height="15" fill="rgb(228,175,28)" fg:x="157" fg:w="1"/>
      <text x="78.7500%" y="543.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.50%)</title>
      <rect x="78.5000%" y="517" width="0.5000%" height="15" fill="rgb(241,229,15)" fg:x="157" fg:w="1"/>
      <text x="78.7500%" y="527.50"/>
    </g>
    <g>
      <title>core::ptr::write (1 samples, 0.50%)</title>
      <rect x="78.5000%" y="501" width="0.5000%" height="15" fill="rgb(209,143,44)" fg:x="157" fg:w="1"/>
      <text x="78.7500%" y="511.50"/>
    </g>
    <g>
      <title>regex_automata::meta::strategy::ReverseInner::new (1 samples, 0.50%)</title>
      <rect x="79.0000%" y="597" width="0.5000%" height="15" fill="rgb(225,146,32)" fg:x="158" fg:w="1"/>
      <text x="79.2500%" y="607.50"/>
    </g>
    <g>
      <title>regex_automata::meta::reverse_inner::extract (1 samples, 0.50%)</title>
      <rect x="79.0000%" y="581" width="0.5000%" height="15" fill="rgb(209,78,45)" fg:x="158" fg:w="1"/>
      <text x="79.2500%" y="591.50"/>
    </g>
    <g>
      <title>regex_automata::meta::reverse_inner::top_concat (1 samples, 0.50%)</title>
      <rect x="79.0000%" y="565" width="0.5000%" height="15" fill="rgb(211,177,54)" fg:x="158" fg:w="1"/>
      <text x="79.2500%" y="575.50"/>
    </g>
    <g>
      <title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.50%)</title>
      <rect x="79.0000%" y="549" width="0.5000%" height="15" fill="rgb(222,213,17)" fg:x="158" fg:w="1"/>
      <text x="79.2500%" y="559.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.50%)</title>
      <rect x="79.0000%" y="533" width="0.5000%" height="15" fill="rgb(247,137,3)" fg:x="158" fg:w="1"/>
      <text x="79.2500%" y="543.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.50%)</title>
      <rect x="79.0000%" y="517" width="0.5000%" height="15" fill="rgb(227,158,43)" fg:x="158" fg:w="1"/>
      <text x="79.2500%" y="527.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.50%)</title>
      <rect x="79.0000%" y="501" width="0.5000%" height="15" fill="rgb(232,14,28)" fg:x="158" fg:w="1"/>
      <text x="79.2500%" y="511.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.50%)</title>
      <rect x="79.0000%" y="485" width="0.5000%" height="15" fill="rgb(232,211,42)" fg:x="158" fg:w="1"/>
      <text x="79.2500%" y="495.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.50%)</title>
      <rect x="79.0000%" y="469" width="0.5000%" height="15" fill="rgb(214,146,48)" fg:x="158" fg:w="1"/>
      <text x="79.2500%" y="479.50"/>
    </g>
    <g>
      <title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.50%)</title>
      <rect x="79.0000%" y="453" width="0.5000%" height="15" fill="rgb(245,181,4)" fg:x="158" fg:w="1"/>
      <text x="79.2500%" y="463.50"/>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.50%)</title>
      <rect x="79.0000%" y="437" width="0.5000%" height="15" fill="rgb(242,69,50)" fg:x="158" fg:w="1"/>
      <text x="79.2500%" y="447.50"/>
    </g>
    <g>
      <title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.50%)</title>
      <rect x="79.0000%" y="421" width="0.5000%" height="15" fill="rgb(214,12,39)" fg:x="158" fg:w="1"/>
      <text x="79.2500%" y="431.50"/>
    </g>
    <g>
      <title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.50%)</title>
      <rect x="79.0000%" y="405" width="0.5000%" height="15" fill="rgb(253,112,1)" fg:x="158" fg:w="1"/>
      <text x="79.2500%" y="415.50"/>
    </g>
    <g>
      <title>regex_automata::meta::reverse_inner::top_concat::{{closure}} (1 samples, 0.50%)</title>
      <rect x="79.0000%" y="389" width="0.5000%" height="15" fill="rgb(215,49,37)" fg:x="158" fg:w="1"/>
      <text x="79.2500%" y="399.50"/>
    </g>
    <g>
      <title>regex_automata::meta::reverse_inner::flatten (1 samples, 0.50%)</title>
      <rect x="79.0000%" y="373" width="0.5000%" height="15" fill="rgb(250,32,35)" fg:x="158" fg:w="1"/>
      <text x="79.2500%" y="383.50"/>
    </g>
    <g>
      <title>regex_syntax::hir::Hir::alternation (1 samples, 0.50%)</title>
      <rect x="79.0000%" y="357" width="0.5000%" height="15" fill="rgb(206,114,23)" fg:x="158" fg:w="1"/>
      <text x="79.2500%" y="367.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;regex_automata::nfa::thompson::builder::State&gt;&gt; (2 samples, 1.00%)</title>
      <rect x="79.5000%" y="501" width="1.0000%" height="15" fill="rgb(253,22,30)" fg:x="159" fg:w="2"/>
      <text x="79.7500%" y="511.50"/>
    </g>
    <g>
      <title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 1.00%)</title>
      <rect x="79.5000%" y="485" width="1.0000%" height="15" fill="rgb(213,128,22)" fg:x="159" fg:w="2"/>
      <text x="79.7500%" y="495.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 1.00%)</title>
      <rect x="79.5000%" y="469" width="1.0000%" height="15" fill="rgb(238,77,31)" fg:x="159" fg:w="2"/>
      <text x="79.7500%" y="479.50"/>
    </g>
    <g>
      <title>alloc::alloc::dealloc (2 samples, 1.00%)</title>
      <rect x="79.5000%" y="453" width="1.0000%" height="15" fill="rgb(227,15,28)" fg:x="159" fg:w="2"/>
      <text x="79.7500%" y="463.50"/>
    </g>
    <g>
      <title>__GI___libc_free (2 samples, 1.00%)</title>
      <rect x="79.5000%" y="437" width="1.0000%" height="15" fill="rgb(247,8,17)" fg:x="159" fg:w="2"/>
      <text x="79.7500%" y="447.50"/>
    </g>
    <g>
      <title>_int_free (2 samples, 1.00%)</title>
      <rect x="79.5000%" y="421" width="1.0000%" height="15" fill="rgb(221,113,48)" fg:x="159" fg:w="2"/>
      <text x="79.7500%" y="431.50"/>
    </g>
    <g>
      <title>malloc_consolidate (2 samples, 1.00%)</title>
      <rect x="79.5000%" y="405" width="1.0000%" height="15" fill="rgb(228,194,39)" fg:x="159" fg:w="2"/>
      <text x="79.7500%" y="415.50"/>
    </g>
    <g>
      <title>s4lib::readers::syslogprocessor::SyslogProcessor::process_stage1_blockzero_analysis (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="997" width="5.5000%" height="15" fill="rgb(214,107,3)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="1007.50">s4lib::..</text>
    </g>
    <g>
      <title>s4lib::readers::syslogprocessor::SyslogProcessor::blockzero_analysis (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="981" width="5.5000%" height="15" fill="rgb(228,176,28)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="991.50">s4lib::..</text>
    </g>
    <g>
      <title>s4lib::readers::syslogprocessor::SyslogProcessor::blockzero_analysis_syslines (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="965" width="5.5000%" height="15" fill="rgb(208,15,47)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="975.50">s4lib::..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::find_sysline_in_block (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="949" width="5.5000%" height="15" fill="rgb(243,65,52)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="959.50">s4lib::..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::find_sysline_in_block_year (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="933" width="5.5000%" height="15" fill="rgb(253,177,51)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="943.50">s4lib::..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::parse_datetime_in_line_cached (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="917" width="5.5000%" height="15" fill="rgb(231,75,50)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="927.50">s4lib::..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::parse_datetime_in_line (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="901" width="5.5000%" height="15" fill="rgb(234,54,15)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="911.50">s4lib::..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::find_datetime_in_line (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="885" width="5.5000%" height="15" fill="rgb(212,53,9)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="895.50">s4lib::..</text>
    </g>
    <g>
      <title>s4lib::data::datetime::bytes_to_regex_to_datetime (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="869" width="5.5000%" height="15" fill="rgb(252,84,36)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="879.50">s4lib::..</text>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="853" width="5.5000%" height="15" fill="rgb(217,15,43)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="863.50">&lt;s4lib:..</text>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref::__stability (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="837" width="5.5000%" height="15" fill="rgb(239,165,48)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="847.50">&lt;s4lib:..</text>
    </g>
    <g>
      <title>lazy_static::lazy::Lazy&lt;T&gt;::get (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="821" width="5.5000%" height="15" fill="rgb(235,175,8)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="831.50">lazy_st..</text>
    </g>
    <g>
      <title>std::sync::once::Once::call_once (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="805" width="5.5000%" height="15" fill="rgb(247,17,47)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="815.50">std::sy..</text>
    </g>
    <g>
      <title>std::sys_common::once::futex::Once::call (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="789" width="5.5000%" height="15" fill="rgb(246,168,49)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="799.50">std::sy..</text>
    </g>
    <g>
      <title>std::sync::once::Once::call_once::{{closure}} (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="773" width="5.5000%" height="15" fill="rgb(237,63,35)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="783.50">std::sy..</text>
    </g>
    <g>
      <title>lazy_static::lazy::Lazy&lt;T&gt;::get::{{closure}} (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="757" width="5.5000%" height="15" fill="rgb(238,7,51)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="767.50">lazy_st..</text>
    </g>
    <g>
      <title>core::ops::function::FnOnce::call_once (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="741" width="5.5000%" height="15" fill="rgb(210,80,10)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="751.50">core::o..</text>
    </g>
    <g>
      <title>&lt;s4lib::data::datetime::DATETIME_PARSE_DATAS_REGEX_VEC as core::ops::deref::Deref&gt;::deref::__static_ref_initialize (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="725" width="5.5000%" height="15" fill="rgb(205,24,29)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="735.50">&lt;s4lib:..</text>
    </g>
    <g>
      <title>regex::regex::bytes::Regex::new (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="709" width="5.5000%" height="15" fill="rgb(246,224,25)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="719.50">regex::..</text>
    </g>
    <g>
      <title>regex::builders::bytes::RegexBuilder::build (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="693" width="5.5000%" height="15" fill="rgb(236,76,51)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="703.50">regex::..</text>
    </g>
    <g>
      <title>regex::builders::Builder::build_one_bytes (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="677" width="5.5000%" height="15" fill="rgb(233,102,7)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="687.50">regex::..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="661" width="5.5000%" height="15" fill="rgb(212,33,22)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="671.50">regex_a..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="645" width="5.5000%" height="15" fill="rgb(236,25,32)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="655.50">regex_a..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many_from_hir (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="629" width="5.5000%" height="15" fill="rgb(250,142,30)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="639.50">regex_a..</text>
    </g>
    <g>
      <title>regex_automata::meta::strategy::new (11 samples, 5.50%)</title>
      <rect x="75.5000%" y="613" width="5.5000%" height="15" fill="rgb(243,171,22)" fg:x="151" fg:w="11"/>
      <text x="75.7500%" y="623.50">regex_a..</text>
    </g>
    <g>
      <title>regex_automata::meta::strategy::Core::new (3 samples, 1.50%)</title>
      <rect x="79.5000%" y="597" width="1.5000%" height="15" fill="rgb(222,69,27)" fg:x="159" fg:w="3"/>
      <text x="79.7500%" y="607.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 1.50%)</title>
      <rect x="79.5000%" y="581" width="1.5000%" height="15" fill="rgb(213,189,36)" fg:x="159" fg:w="3"/>
      <text x="79.7500%" y="591.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::builder::Builder&gt;&gt; (3 samples, 1.50%)</title>
      <rect x="79.5000%" y="565" width="1.5000%" height="15" fill="rgb(234,58,54)" fg:x="159" fg:w="3"/>
      <text x="79.7500%" y="575.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;regex_automata::nfa::thompson::builder::Builder&gt;&gt; (3 samples, 1.50%)</title>
      <rect x="79.5000%" y="549" width="1.5000%" height="15" fill="rgb(211,168,54)" fg:x="159" fg:w="3"/>
      <text x="79.7500%" y="559.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::builder::Builder&gt; (3 samples, 1.50%)</title>
      <rect x="79.5000%" y="533" width="1.5000%" height="15" fill="rgb(236,9,46)" fg:x="159" fg:w="3"/>
      <text x="79.7500%" y="543.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;regex_automata::nfa::thompson::builder::State&gt;&gt; (3 samples, 1.50%)</title>
      <rect x="79.5000%" y="517" width="1.5000%" height="15" fill="rgb(209,117,28)" fg:x="159" fg:w="3"/>
      <text x="79.7500%" y="527.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.50%)</title>
      <rect x="80.5000%" y="501" width="0.5000%" height="15" fill="rgb(249,14,2)" fg:x="161" fg:w="1"/>
      <text x="80.7500%" y="511.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;[regex_automata::nfa::thompson::builder::State]&gt; (1 samples, 0.50%)</title>
      <rect x="80.5000%" y="485" width="0.5000%" height="15" fill="rgb(227,197,38)" fg:x="161" fg:w="1"/>
      <text x="80.7500%" y="495.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::builder::State&gt; (1 samples, 0.50%)</title>
      <rect x="80.5000%" y="469" width="0.5000%" height="15" fill="rgb(207,220,38)" fg:x="161" fg:w="1"/>
      <text x="80.7500%" y="479.50"/>
    </g>
    <g>
      <title>__GI___libc_free (1 samples, 0.50%)</title>
      <rect x="80.5000%" y="453" width="0.5000%" height="15" fill="rgb(247,8,17)" fg:x="161" fg:w="1"/>
      <text x="80.7500%" y="463.50"/>
    </g>
    <g>
      <title>_int_free (1 samples, 0.50%)</title>
      <rect x="80.5000%" y="437" width="0.5000%" height="15" fill="rgb(221,113,48)" fg:x="161" fg:w="1"/>
      <text x="80.7500%" y="447.50"/>
    </g>
    <g>
      <title>lzma_rs::xz::header::StreamHeader::parse (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="901" width="0.5000%" height="15" fill="rgb(250,1,6)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="911.50"/>
    </g>
    <g>
      <title>lzma_rs::decode::util::read_tag (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="885" width="0.5000%" height="15" fill="rgb(209,7,33)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="895.50"/>
    </g>
    <g>
      <title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="869" width="0.5000%" height="15" fill="rgb(231,155,33)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="879.50"/>
    </g>
    <g>
      <title>std::io::default_read_exact (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="853" width="0.5000%" height="15" fill="rgb(223,139,4)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="863.50"/>
    </g>
    <g>
      <title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="837" width="0.5000%" height="15" fill="rgb(248,29,38)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="847.50"/>
    </g>
    <g>
      <title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="821" width="0.5000%" height="15" fill="rgb(223,114,29)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="831.50"/>
    </g>
    <g>
      <title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="805" width="0.5000%" height="15" fill="rgb(246,87,35)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="815.50"/>
    </g>
    <g>
      <title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="789" width="0.5000%" height="15" fill="rgb(211,45,31)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="799.50"/>
    </g>
    <g>
      <title>&lt;std::fs::File as std::io::Read&gt;::read_buf (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="773" width="0.5000%" height="15" fill="rgb(231,30,27)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="783.50"/>
    </g>
    <g>
      <title>std::sys::unix::fs::File::read_buf (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="757" width="0.5000%" height="15" fill="rgb(240,23,8)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="767.50"/>
    </g>
    <g>
      <title>std::sys::unix::fd::FileDesc::read_buf (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="741" width="0.5000%" height="15" fill="rgb(233,98,11)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="751.50"/>
    </g>
    <g>
      <title>__GI___libc_read (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="725" width="0.5000%" height="15" fill="rgb(206,204,24)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="735.50"/>
    </g>
    <g>
      <title>__GI___libc_read (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="709" width="0.5000%" height="15" fill="rgb(206,204,24)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="719.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="693" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="703.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="677" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="687.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="661" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="671.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="645" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="655.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="629" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="639.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="613" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="623.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="597" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="607.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="581" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="591.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="565" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="575.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="549" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="559.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="533" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="543.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="517" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="527.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="501" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="511.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="81.0000%" y="485" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="162" fg:w="1"/>
      <text x="81.2500%" y="495.50"/>
    </g>
    <g>
      <title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.50%)</title>
      <rect x="81.5000%" y="885" width="0.5000%" height="15" fill="rgb(231,96,28)" fg:x="163" fg:w="1"/>
      <text x="81.7500%" y="895.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.50%)</title>
      <rect x="81.5000%" y="869" width="0.5000%" height="15" fill="rgb(243,52,34)" fg:x="163" fg:w="1"/>
      <text x="81.7500%" y="879.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.50%)</title>
      <rect x="81.5000%" y="853" width="0.5000%" height="15" fill="rgb(224,207,30)" fg:x="163" fg:w="1"/>
      <text x="81.7500%" y="863.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.50%)</title>
      <rect x="81.5000%" y="837" width="0.5000%" height="15" fill="rgb(251,49,54)" fg:x="163" fg:w="1"/>
      <text x="81.7500%" y="847.50"/>
    </g>
    <g>
      <title>core::intrinsics::copy_nonoverlapping (1 samples, 0.50%)</title>
      <rect x="81.5000%" y="821" width="0.5000%" height="15" fill="rgb(214,20,35)" fg:x="163" fg:w="1"/>
      <text x="81.7500%" y="831.50"/>
    </g>
    <g>
      <title>__memmove_avx512_unaligned_erms (1 samples, 0.50%)</title>
      <rect x="81.5000%" y="805" width="0.5000%" height="15" fill="rgb(217,126,36)" fg:x="163" fg:w="1"/>
      <text x="81.7500%" y="815.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="81.5000%" y="789" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="163" fg:w="1"/>
      <text x="81.7500%" y="799.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="81.5000%" y="773" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="163" fg:w="1"/>
      <text x="81.7500%" y="783.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="81.5000%" y="757" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="163" fg:w="1"/>
      <text x="81.7500%" y="767.50"/>
    </g>
    <g>
      <title>lzma_rs::decode::xz::validate_block_check (9 samples, 4.50%)</title>
      <rect x="82.0000%" y="885" width="4.5000%" height="15" fill="rgb(250,224,34)" fg:x="164" fg:w="9"/>
      <text x="82.2500%" y="895.50">lzma_..</text>
    </g>
    <g>
      <title>crc::crc64::&lt;impl crc::Crc&lt;u64&gt;&gt;::checksum (9 samples, 4.50%)</title>
      <rect x="82.0000%" y="869" width="4.5000%" height="15" fill="rgb(221,6,1)" fg:x="164" fg:w="9"/>
      <text x="82.2500%" y="879.50">crc::..</text>
    </g>
    <g>
      <title>crc::crc64::&lt;impl crc::Crc&lt;u64&gt;&gt;::update (9 samples, 4.50%)</title>
      <rect x="82.0000%" y="853" width="4.5000%" height="15" fill="rgb(240,176,23)" fg:x="164" fg:w="9"/>
      <text x="82.2500%" y="863.50">crc::..</text>
    </g>
    <g>
      <title>lzma_rs::decode::lzma::DecoderState::decode_distance (1 samples, 0.50%)</title>
      <rect x="86.5000%" y="773" width="0.5000%" height="15" fill="rgb(235,190,43)" fg:x="173" fg:w="1"/>
      <text x="86.7500%" y="783.50"/>
    </g>
    <g>
      <title>lzma_rs::decode::rangecoder::BitTree::parse_reverse (1 samples, 0.50%)</title>
      <rect x="86.5000%" y="757" width="0.5000%" height="15" fill="rgb(233,45,10)" fg:x="173" fg:w="1"/>
      <text x="86.7500%" y="767.50"/>
    </g>
    <g>
      <title>lzma_rs::decode::rangecoder::RangeDecoder&lt;R&gt;::parse_reverse_bit_tree (1 samples, 0.50%)</title>
      <rect x="86.5000%" y="741" width="0.5000%" height="15" fill="rgb(231,45,1)" fg:x="173" fg:w="1"/>
      <text x="86.7500%" y="751.50"/>
    </g>
    <g>
      <title>lzma_rs::decode::rangecoder::RangeDecoder&lt;R&gt;::decode_bit (1 samples, 0.50%)</title>
      <rect x="86.5000%" y="725" width="0.5000%" height="15" fill="rgb(252,202,43)" fg:x="173" fg:w="1"/>
      <text x="86.7500%" y="735.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 1.00%)</title>
      <rect x="87.0000%" y="757" width="1.0000%" height="15" fill="rgb(241,229,15)" fg:x="174" fg:w="2"/>
      <text x="87.2500%" y="767.50"/>
    </g>
    <g>
      <title>lzma_rs::decode::lzma2::Lzma2Decoder::parse_lzma (4 samples, 2.00%)</title>
      <rect x="86.5000%" y="853" width="2.0000%" height="15" fill="rgb(232,23,40)" fg:x="173" fg:w="4"/>
      <text x="86.7500%" y="863.50">l..</text>
    </g>
    <g>
      <title>lzma_rs::decode::lzma::DecoderState::process (4 samples, 2.00%)</title>
      <rect x="86.5000%" y="837" width="2.0000%" height="15" fill="rgb(212,205,4)" fg:x="173" fg:w="4"/>
      <text x="86.7500%" y="847.50">l..</text>
    </g>
    <g>
      <title>lzma_rs::decode::lzma::DecoderState::process_mode (4 samples, 2.00%)</title>
      <rect x="86.5000%" y="821" width="2.0000%" height="15" fill="rgb(237,97,11)" fg:x="173" fg:w="4"/>
      <text x="86.7500%" y="831.50">l..</text>
    </g>
    <g>
      <title>lzma_rs::decode::lzma::DecoderState::process_next (4 samples, 2.00%)</title>
      <rect x="86.5000%" y="805" width="2.0000%" height="15" fill="rgb(227,197,53)" fg:x="173" fg:w="4"/>
      <text x="86.7500%" y="815.50">l..</text>
    </g>
    <g>
      <title>lzma_rs::decode::lzma::DecoderState::process_next_inner (4 samples, 2.00%)</title>
      <rect x="86.5000%" y="789" width="2.0000%" height="15" fill="rgb(233,124,28)" fg:x="173" fg:w="4"/>
      <text x="86.7500%" y="799.50">l..</text>
    </g>
    <g>
      <title>&lt;lzma_rs::decode::lzbuffer::LzAccumBuffer&lt;W&gt; as lzma_rs::decode::lzbuffer::LzBuffer&lt;W&gt;&gt;::append_lz (3 samples, 1.50%)</title>
      <rect x="87.0000%" y="773" width="1.5000%" height="15" fill="rgb(245,174,38)" fg:x="174" fg:w="3"/>
      <text x="87.2500%" y="783.50"/>
    </g>
    <g>
      <title>lzma_rs::xz_decompress (16 samples, 8.00%)</title>
      <rect x="81.0000%" y="933" width="8.0000%" height="15" fill="rgb(219,30,48)" fg:x="162" fg:w="16"/>
      <text x="81.2500%" y="943.50">lzma_rs::xz..</text>
    </g>
    <g>
      <title>lzma_rs::decode::xz::decode_stream (16 samples, 8.00%)</title>
      <rect x="81.0000%" y="917" width="8.0000%" height="15" fill="rgb(229,135,23)" fg:x="162" fg:w="16"/>
      <text x="81.2500%" y="927.50">lzma_rs::de..</text>
    </g>
    <g>
      <title>lzma_rs::decode::xz::read_block (15 samples, 7.50%)</title>
      <rect x="81.5000%" y="901" width="7.5000%" height="15" fill="rgb(206,79,15)" fg:x="163" fg:w="15"/>
      <text x="81.7500%" y="911.50">lzma_rs::d..</text>
    </g>
    <g>
      <title>lzma_rs::decode::xz::decode_filter (5 samples, 2.50%)</title>
      <rect x="86.5000%" y="885" width="2.5000%" height="15" fill="rgb(207,132,32)" fg:x="173" fg:w="5"/>
      <text x="86.7500%" y="895.50">lz..</text>
    </g>
    <g>
      <title>lzma_rs::decode::lzma2::Lzma2Decoder::decompress (5 samples, 2.50%)</title>
      <rect x="86.5000%" y="869" width="2.5000%" height="15" fill="rgb(208,195,50)" fg:x="173" fg:w="5"/>
      <text x="86.7500%" y="879.50">lz..</text>
    </g>
    <g>
      <title>&lt;lzma_rs::decode::lzbuffer::LzAccumBuffer&lt;W&gt; as lzma_rs::decode::lzbuffer::LzBuffer&lt;W&gt;&gt;::finish (1 samples, 0.50%)</title>
      <rect x="88.5000%" y="853" width="0.5000%" height="15" fill="rgb(212,115,20)" fg:x="177" fg:w="1"/>
      <text x="88.7500%" y="863.50"/>
    </g>
    <g>
      <title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (1 samples, 0.50%)</title>
      <rect x="88.5000%" y="837" width="0.5000%" height="15" fill="rgb(230,53,11)" fg:x="177" fg:w="1"/>
      <text x="88.7500%" y="847.50"/>
    </g>
    <g>
      <title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (1 samples, 0.50%)</title>
      <rect x="88.5000%" y="821" width="0.5000%" height="15" fill="rgb(231,96,28)" fg:x="177" fg:w="1"/>
      <text x="88.7500%" y="831.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.50%)</title>
      <rect x="88.5000%" y="805" width="0.5000%" height="15" fill="rgb(243,52,34)" fg:x="177" fg:w="1"/>
      <text x="88.7500%" y="815.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.50%)</title>
      <rect x="88.5000%" y="789" width="0.5000%" height="15" fill="rgb(224,207,30)" fg:x="177" fg:w="1"/>
      <text x="88.7500%" y="799.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.50%)</title>
      <rect x="88.5000%" y="773" width="0.5000%" height="15" fill="rgb(251,49,54)" fg:x="177" fg:w="1"/>
      <text x="88.7500%" y="783.50"/>
    </g>
    <g>
      <title>core::intrinsics::copy_nonoverlapping (1 samples, 0.50%)</title>
      <rect x="88.5000%" y="757" width="0.5000%" height="15" fill="rgb(214,20,35)" fg:x="177" fg:w="1"/>
      <text x="88.7500%" y="767.50"/>
    </g>
    <g>
      <title>__memmove_avx512_unaligned_erms (1 samples, 0.50%)</title>
      <rect x="88.5000%" y="741" width="0.5000%" height="15" fill="rgb(217,126,36)" fg:x="177" fg:w="1"/>
      <text x="88.7500%" y="751.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="88.5000%" y="725" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="177" fg:w="1"/>
      <text x="88.7500%" y="735.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="88.5000%" y="709" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="177" fg:w="1"/>
      <text x="88.7500%" y="719.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="88.5000%" y="693" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="177" fg:w="1"/>
      <text x="88.7500%" y="703.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="88.5000%" y="677" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="177" fg:w="1"/>
      <text x="88.7500%" y="687.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="88.5000%" y="661" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="177" fg:w="1"/>
      <text x="88.7500%" y="671.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="88.5000%" y="645" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="177" fg:w="1"/>
      <text x="88.7500%" y="655.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="88.5000%" y="629" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="177" fg:w="1"/>
      <text x="88.7500%" y="639.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="88.5000%" y="613" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="177" fg:w="1"/>
      <text x="88.7500%" y="623.50"/>
    </g>
    <g>
      <title>s4::exec_fileprocessor_thread (28 samples, 14.00%)</title>
      <rect x="75.5000%" y="1029" width="14.0000%" height="15" fill="rgb(245,49,27)" fg:x="151" fg:w="28"/>
      <text x="75.7500%" y="1039.50">s4::exec_fileprocesso..</text>
    </g>
    <g>
      <title>s4::exec_syslogprocessor (28 samples, 14.00%)</title>
      <rect x="75.5000%" y="1013" width="14.0000%" height="15" fill="rgb(229,116,34)" fg:x="151" fg:w="28"/>
      <text x="75.7500%" y="1023.50">s4::exec_syslogproces..</text>
    </g>
    <g>
      <title>s4lib::readers::syslogprocessor::SyslogProcessor::new (17 samples, 8.50%)</title>
      <rect x="81.0000%" y="997" width="8.5000%" height="15" fill="rgb(223,11,33)" fg:x="162" fg:w="17"/>
      <text x="81.2500%" y="1007.50">s4lib::reade..</text>
    </g>
    <g>
      <title>s4lib::readers::syslinereader::SyslineReader::new (17 samples, 8.50%)</title>
      <rect x="81.0000%" y="981" width="8.5000%" height="15" fill="rgb(247,92,42)" fg:x="162" fg:w="17"/>
      <text x="81.2500%" y="991.50">s4lib::reade..</text>
    </g>
    <g>
      <title>s4lib::readers::linereader::LineReader::new (17 samples, 8.50%)</title>
      <rect x="81.0000%" y="965" width="8.5000%" height="15" fill="rgb(243,188,25)" fg:x="162" fg:w="17"/>
      <text x="81.2500%" y="975.50">s4lib::reade..</text>
    </g>
    <g>
      <title>s4lib::readers::blockreader::BlockReader::new (17 samples, 8.50%)</title>
      <rect x="81.0000%" y="949" width="8.5000%" height="15" fill="rgb(233,2,13)" fg:x="162" fg:w="17"/>
      <text x="81.2500%" y="959.50">s4lib::reade..</text>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.50%)</title>
      <rect x="89.0000%" y="933" width="0.5000%" height="15" fill="rgb(243,52,34)" fg:x="178" fg:w="1"/>
      <text x="89.2500%" y="943.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.50%)</title>
      <rect x="89.0000%" y="917" width="0.5000%" height="15" fill="rgb(224,207,30)" fg:x="178" fg:w="1"/>
      <text x="89.2500%" y="927.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.50%)</title>
      <rect x="89.0000%" y="901" width="0.5000%" height="15" fill="rgb(251,49,54)" fg:x="178" fg:w="1"/>
      <text x="89.2500%" y="911.50"/>
    </g>
    <g>
      <title>core::intrinsics::copy_nonoverlapping (1 samples, 0.50%)</title>
      <rect x="89.0000%" y="885" width="0.5000%" height="15" fill="rgb(214,20,35)" fg:x="178" fg:w="1"/>
      <text x="89.2500%" y="895.50"/>
    </g>
    <g>
      <title>__memmove_avx512_unaligned_erms (1 samples, 0.50%)</title>
      <rect x="89.0000%" y="869" width="0.5000%" height="15" fill="rgb(217,126,36)" fg:x="178" fg:w="1"/>
      <text x="89.2500%" y="879.50"/>
    </g>
    <g>
      <title>regex_automata::meta::strategy::new (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="1029" width="0.5000%" height="15" fill="rgb(243,171,22)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="1039.50"/>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="1013" width="0.5000%" height="15" fill="rgb(225,8,7)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="1023.50"/>
    </g>
    <g>
      <title>regex_automata::meta::strategy::new::{{closure}} (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="997" width="0.5000%" height="15" fill="rgb(238,100,15)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="1007.50"/>
    </g>
    <g>
      <title>regex_automata::util::prefilter::Prefilter::new (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="981" width="0.5000%" height="15" fill="rgb(227,199,27)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="991.50"/>
    </g>
    <g>
      <title>regex_automata::util::prefilter::Choice::new (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="965" width="0.5000%" height="15" fill="rgb(243,64,33)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="975.50"/>
    </g>
    <g>
      <title>regex_automata::util::prefilter::teddy::Teddy::new (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="949" width="0.5000%" height="15" fill="rgb(207,155,0)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="959.50"/>
    </g>
    <g>
      <title>aho_corasick::dfa::Builder::build (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="933" width="0.5000%" height="15" fill="rgb(212,91,25)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="943.50"/>
    </g>
    <g>
      <title>aho_corasick::nfa::noncontiguous::Builder::build (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="917" width="0.5000%" height="15" fill="rgb(235,33,22)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="927.50"/>
    </g>
    <g>
      <title>aho_corasick::nfa::noncontiguous::Compiler::compile (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="901" width="0.5000%" height="15" fill="rgb(253,203,15)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="911.50"/>
    </g>
    <g>
      <title>aho_corasick::nfa::noncontiguous::Compiler::init_unanchored_start_state (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="885" width="0.5000%" height="15" fill="rgb(218,74,0)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="895.50"/>
    </g>
    <g>
      <title>aho_corasick::nfa::noncontiguous::NFA::init_full_state (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="869" width="0.5000%" height="15" fill="rgb(245,136,4)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="879.50"/>
    </g>
    <g>
      <title>aho_corasick::nfa::noncontiguous::NFA::alloc_transition (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="853" width="0.5000%" height="15" fill="rgb(232,168,37)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="863.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="837" width="0.5000%" height="15" fill="rgb(241,229,15)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="847.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="821" width="0.5000%" height="15" fill="rgb(254,103,39)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="831.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="805" width="0.5000%" height="15" fill="rgb(254,53,35)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="815.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::finish_grow (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="789" width="0.5000%" height="15" fill="rgb(237,133,22)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="799.50"/>
    </g>
    <g>
      <title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="773" width="0.5000%" height="15" fill="rgb(237,156,49)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="783.50"/>
    </g>
    <g>
      <title>alloc::alloc::Global::grow_impl (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="757" width="0.5000%" height="15" fill="rgb(214,150,36)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="767.50"/>
    </g>
    <g>
      <title>alloc::alloc::realloc (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="741" width="0.5000%" height="15" fill="rgb(254,47,34)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="751.50"/>
    </g>
    <g>
      <title>__GI___libc_realloc (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="725" width="0.5000%" height="15" fill="rgb(254,73,4)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="735.50"/>
    </g>
    <g>
      <title>_int_realloc (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="709" width="0.5000%" height="15" fill="rgb(231,75,41)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="719.50"/>
    </g>
    <g>
      <title>__memmove_avx512_unaligned_erms (1 samples, 0.50%)</title>
      <rect x="89.5000%" y="693" width="0.5000%" height="15" fill="rgb(217,126,36)" fg:x="179" fg:w="1"/>
      <text x="89.7500%" y="703.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="90.0000%" y="357" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="180" fg:w="1"/>
      <text x="90.2500%" y="367.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="90.0000%" y="341" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="180" fg:w="1"/>
      <text x="90.2500%" y="351.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="90.0000%" y="325" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="180" fg:w="1"/>
      <text x="90.2500%" y="335.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="90.0000%" y="309" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="180" fg:w="1"/>
      <text x="90.2500%" y="319.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="90.0000%" y="293" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="180" fg:w="1"/>
      <text x="90.2500%" y="303.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="90.0000%" y="277" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="180" fg:w="1"/>
      <text x="90.2500%" y="287.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="90.0000%" y="261" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="180" fg:w="1"/>
      <text x="90.2500%" y="271.50"/>
    </g>
    <g>
      <title>core::ptr::write (2 samples, 1.00%)</title>
      <rect x="90.0000%" y="373" width="1.0000%" height="15" fill="rgb(209,143,44)" fg:x="180" fg:w="2"/>
      <text x="90.2500%" y="383.50"/>
    </g>
    <g>
      <title>regex_automata::meta::strategy::Core::new (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="965" width="2.0000%" height="15" fill="rgb(222,69,27)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="975.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="949" width="2.0000%" height="15" fill="rgb(226,42,16)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="959.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="933" width="2.0000%" height="15" fill="rgb(242,129,17)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="943.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="917" width="2.0000%" height="15" fill="rgb(247,137,3)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="927.50">r..</text>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="901" width="2.0000%" height="15" fill="rgb(214,109,53)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="911.50">&lt;..</text>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="885" width="2.0000%" height="15" fill="rgb(254,35,30)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="895.50">c..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="869" width="2.0000%" height="15" fill="rgb(226,169,23)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="879.50">c..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="853" width="2.0000%" height="15" fill="rgb(218,216,52)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="863.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="837" width="2.0000%" height="15" fill="rgb(235,200,16)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="847.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="821" width="2.0000%" height="15" fill="rgb(213,34,18)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="831.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="805" width="2.0000%" height="15" fill="rgb(210,105,37)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="815.50">r..</text>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="789" width="2.0000%" height="15" fill="rgb(214,109,53)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="799.50">&lt;..</text>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="773" width="2.0000%" height="15" fill="rgb(254,35,30)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="783.50">c..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="757" width="2.0000%" height="15" fill="rgb(226,169,23)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="767.50">c..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="741" width="2.0000%" height="15" fill="rgb(205,130,14)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="751.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="725" width="2.0000%" height="15" fill="rgb(235,200,16)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="735.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="709" width="2.0000%" height="15" fill="rgb(213,34,18)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="719.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="693" width="2.0000%" height="15" fill="rgb(253,35,22)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="703.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="677" width="2.0000%" height="15" fill="rgb(247,137,3)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="687.50">r..</text>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="661" width="2.0000%" height="15" fill="rgb(214,109,53)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="671.50">&lt;..</text>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="645" width="2.0000%" height="15" fill="rgb(254,35,30)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="655.50">c..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="629" width="2.0000%" height="15" fill="rgb(226,169,23)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="639.50">c..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice::{{closure}} (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="613" width="2.0000%" height="15" fill="rgb(223,145,12)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="623.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="597" width="2.0000%" height="15" fill="rgb(213,34,18)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="607.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="581" width="2.0000%" height="15" fill="rgb(210,105,37)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="591.50">r..</text>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="565" width="2.0000%" height="15" fill="rgb(214,109,53)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="575.50">&lt;..</text>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="549" width="2.0000%" height="15" fill="rgb(254,35,30)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="559.50">c..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="533" width="2.0000%" height="15" fill="rgb(226,169,23)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="543.50">c..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="517" width="2.0000%" height="15" fill="rgb(205,130,14)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="527.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="501" width="2.0000%" height="15" fill="rgb(213,34,18)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="511.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="485" width="2.0000%" height="15" fill="rgb(246,38,12)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="495.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="469" width="2.0000%" height="15" fill="rgb(211,200,20)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="479.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Utf8State::clear (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="453" width="2.0000%" height="15" fill="rgb(241,127,0)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="463.50">r..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="437" width="2.0000%" height="15" fill="rgb(207,86,25)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="447.50">r..</text>
    </g>
    <g>
      <title>alloc::vec::from_elem (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="421" width="2.0000%" height="15" fill="rgb(208,109,54)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="431.50">a..</text>
    </g>
    <g>
      <title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="405" width="2.0000%" height="15" fill="rgb(228,177,24)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="415.50">&lt;..</text>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::extend_with (4 samples, 2.00%)</title>
      <rect x="90.0000%" y="389" width="2.0000%" height="15" fill="rgb(216,52,5)" fg:x="180" fg:w="4"/>
      <text x="90.2500%" y="399.50">a..</text>
    </g>
    <g>
      <title>&lt;alloc::vec::ExtendElement&lt;T&gt; as alloc::vec::ExtendWith&lt;T&gt;&gt;::next (2 samples, 1.00%)</title>
      <rect x="91.0000%" y="373" width="1.0000%" height="15" fill="rgb(216,123,15)" fg:x="182" fg:w="2"/>
      <text x="91.2500%" y="383.50"/>
    </g>
    <g>
      <title>&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry as core::clone::Clone&gt;::clone (2 samples, 1.00%)</title>
      <rect x="91.0000%" y="357" width="1.0000%" height="15" fill="rgb(211,18,41)" fg:x="182" fg:w="2"/>
      <text x="91.2500%" y="367.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 1.00%)</title>
      <rect x="91.0000%" y="341" width="1.0000%" height="15" fill="rgb(239,104,10)" fg:x="182" fg:w="2"/>
      <text x="91.2500%" y="351.50"/>
    </g>
    <g>
      <title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 1.00%)</title>
      <rect x="91.0000%" y="325" width="1.0000%" height="15" fill="rgb(229,121,46)" fg:x="182" fg:w="2"/>
      <text x="91.2500%" y="335.50"/>
    </g>
    <g>
      <title>alloc::slice::hack::to_vec (2 samples, 1.00%)</title>
      <rect x="91.0000%" y="309" width="1.0000%" height="15" fill="rgb(221,172,50)" fg:x="182" fg:w="2"/>
      <text x="91.2500%" y="319.50"/>
    </g>
    <g>
      <title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 1.00%)</title>
      <rect x="91.0000%" y="293" width="1.0000%" height="15" fill="rgb(216,42,52)" fg:x="182" fg:w="2"/>
      <text x="91.2500%" y="303.50"/>
    </g>
    <g>
      <title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 1.00%)</title>
      <rect x="91.0000%" y="277" width="1.0000%" height="15" fill="rgb(222,107,1)" fg:x="182" fg:w="2"/>
      <text x="91.2500%" y="287.50"/>
    </g>
    <g>
      <title>core::intrinsics::copy_nonoverlapping (2 samples, 1.00%)</title>
      <rect x="91.0000%" y="261" width="1.0000%" height="15" fill="rgb(214,20,35)" fg:x="182" fg:w="2"/>
      <text x="91.2500%" y="271.50"/>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build (5 samples, 2.50%)</title>
      <rect x="90.0000%" y="1029" width="2.5000%" height="15" fill="rgb(212,33,22)" fg:x="180" fg:w="5"/>
      <text x="90.2500%" y="1039.50">re..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many (5 samples, 2.50%)</title>
      <rect x="90.0000%" y="1013" width="2.5000%" height="15" fill="rgb(236,25,32)" fg:x="180" fg:w="5"/>
      <text x="90.2500%" y="1023.50">re..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many_from_hir (5 samples, 2.50%)</title>
      <rect x="90.0000%" y="997" width="2.5000%" height="15" fill="rgb(250,142,30)" fg:x="180" fg:w="5"/>
      <text x="90.2500%" y="1007.50">re..</text>
    </g>
    <g>
      <title>regex_automata::meta::strategy::new (5 samples, 2.50%)</title>
      <rect x="90.0000%" y="981" width="2.5000%" height="15" fill="rgb(243,171,22)" fg:x="180" fg:w="5"/>
      <text x="90.2500%" y="991.50">re..</text>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="965" width="0.5000%" height="15" fill="rgb(225,8,7)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="975.50"/>
    </g>
    <g>
      <title>regex_automata::meta::strategy::new::{{closure}} (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="949" width="0.5000%" height="15" fill="rgb(238,100,15)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="959.50"/>
    </g>
    <g>
      <title>regex_automata::util::prefilter::Prefilter::new (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="933" width="0.5000%" height="15" fill="rgb(227,199,27)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="943.50"/>
    </g>
    <g>
      <title>regex_automata::util::prefilter::Choice::new (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="917" width="0.5000%" height="15" fill="rgb(243,64,33)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="927.50"/>
    </g>
    <g>
      <title>regex_automata::util::prefilter::teddy::Teddy::new (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="901" width="0.5000%" height="15" fill="rgb(207,155,0)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="911.50"/>
    </g>
    <g>
      <title>aho_corasick::packed::api::Builder::build (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="885" width="0.5000%" height="15" fill="rgb(245,1,41)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="895.50"/>
    </g>
    <g>
      <title>aho_corasick::packed::api::Builder::build_teddy (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="869" width="0.5000%" height="15" fill="rgb(225,159,12)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="879.50"/>
    </g>
    <g>
      <title>aho_corasick::packed::teddy::builder::Builder::build (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="853" width="0.5000%" height="15" fill="rgb(235,121,30)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="863.50"/>
    </g>
    <g>
      <title>aho_corasick::packed::teddy::builder::Builder::build_imp (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="837" width="0.5000%" height="15" fill="rgb(237,147,11)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="847.50"/>
    </g>
    <g>
      <title>aho_corasick::packed::teddy::builder::x86_64::SlimAVX2&lt;1_usize&gt;::new (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="821" width="0.5000%" height="15" fill="rgb(221,42,51)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="831.50"/>
    </g>
    <g>
      <title>aho_corasick::packed::teddy::builder::x86_64::SlimAVX2&lt;1_usize&gt;::new_unchecked (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="805" width="0.5000%" height="15" fill="rgb(252,193,13)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="815.50"/>
    </g>
    <g>
      <title>aho_corasick::packed::teddy::generic::Slim&lt;V,_&gt;::new (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="789" width="0.5000%" height="15" fill="rgb(210,112,54)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="799.50"/>
    </g>
    <g>
      <title>aho_corasick::packed::teddy::generic::Teddy&lt;_&gt;::new (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="773" width="0.5000%" height="15" fill="rgb(246,138,28)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="783.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::boxed::Box&lt;[u8]&gt;,usize&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="757" width="0.5000%" height="15" fill="rgb(248,116,8)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="767.50"/>
    </g>
    <g>
      <title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="741" width="0.5000%" height="15" fill="rgb(225,171,22)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="751.50"/>
    </g>
    <g>
      <title>core::mem::drop (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="725" width="0.5000%" height="15" fill="rgb(253,152,51)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="735.50"/>
    </g>
    <g>
      <title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::boxed::Box&lt;[u8]&gt;,usize&gt;&gt; (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="709" width="0.5000%" height="15" fill="rgb(235,122,40)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="719.50"/>
    </g>
    <g>
      <title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="693" width="0.5000%" height="15" fill="rgb(240,72,17)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="703.50"/>
    </g>
    <g>
      <title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.50%)</title>
      <rect x="92.0000%" y="677" width="0.5000%" height="15" fill="rgb(205,132,33)" fg:x="184" fg:w="1"/>
      <text x="92.2500%" y="687.50"/>
    </g>
    <g>
      <title>regex::regex::bytes::Regex::new (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="1029" width="0.5000%" height="15" fill="rgb(246,224,25)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="1039.50"/>
    </g>
    <g>
      <title>regex::builders::bytes::RegexBuilder::build (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="1013" width="0.5000%" height="15" fill="rgb(236,76,51)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="1023.50"/>
    </g>
    <g>
      <title>regex::builders::Builder::build_one_bytes (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="997" width="0.5000%" height="15" fill="rgb(233,102,7)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="1007.50"/>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="981" width="0.5000%" height="15" fill="rgb(212,33,22)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="991.50"/>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="965" width="0.5000%" height="15" fill="rgb(236,25,32)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="975.50"/>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many_from_hir (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="949" width="0.5000%" height="15" fill="rgb(250,142,30)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="959.50"/>
    </g>
    <g>
      <title>regex_automata::meta::strategy::new (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="933" width="0.5000%" height="15" fill="rgb(243,171,22)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="943.50"/>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="917" width="0.5000%" height="15" fill="rgb(225,8,7)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="927.50"/>
    </g>
    <g>
      <title>regex_automata::meta::strategy::new::{{closure}} (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="901" width="0.5000%" height="15" fill="rgb(238,100,15)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="911.50"/>
    </g>
    <g>
      <title>regex_automata::util::prefilter::Prefilter::new (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="885" width="0.5000%" height="15" fill="rgb(227,199,27)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="895.50"/>
    </g>
    <g>
      <title>regex_automata::util::prefilter::Choice::new (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="869" width="0.5000%" height="15" fill="rgb(243,64,33)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="879.50"/>
    </g>
    <g>
      <title>regex_automata::util::prefilter::teddy::Teddy::new (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="853" width="0.5000%" height="15" fill="rgb(207,155,0)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="863.50"/>
    </g>
    <g>
      <title>aho_corasick::packed::api::Builder::build (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="837" width="0.5000%" height="15" fill="rgb(245,1,41)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="847.50"/>
    </g>
    <g>
      <title>aho_corasick::packed::rabinkarp::RabinKarp::new (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="821" width="0.5000%" height="15" fill="rgb(252,179,19)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="831.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="805" width="0.5000%" height="15" fill="rgb(241,229,15)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="815.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="789" width="0.5000%" height="15" fill="rgb(254,103,39)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="799.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="773" width="0.5000%" height="15" fill="rgb(254,53,35)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="783.50"/>
    </g>
    <g>
      <title>alloc::raw_vec::finish_grow (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="757" width="0.5000%" height="15" fill="rgb(237,133,22)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="767.50"/>
    </g>
    <g>
      <title>__GI___libc_malloc (1 samples, 0.50%)</title>
      <rect x="92.5000%" y="741" width="0.5000%" height="15" fill="rgb(206,112,53)" fg:x="185" fg:w="1"/>
      <text x="92.7500%" y="751.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="93.0000%" y="405" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="186" fg:w="1"/>
      <text x="93.2500%" y="415.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="93.0000%" y="389" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="186" fg:w="1"/>
      <text x="93.2500%" y="399.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="93.0000%" y="373" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="186" fg:w="1"/>
      <text x="93.2500%" y="383.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="93.0000%" y="357" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="186" fg:w="1"/>
      <text x="93.2500%" y="367.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="93.0000%" y="341" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="186" fg:w="1"/>
      <text x="93.2500%" y="351.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="93.0000%" y="325" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="186" fg:w="1"/>
      <text x="93.2500%" y="335.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (2 samples, 1.00%)</title>
      <rect x="93.0000%" y="453" width="1.0000%" height="15" fill="rgb(210,204,4)" fg:x="186" fg:w="2"/>
      <text x="93.2500%" y="463.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (2 samples, 1.00%)</title>
      <rect x="93.0000%" y="437" width="1.0000%" height="15" fill="rgb(210,204,4)" fg:x="186" fg:w="2"/>
      <text x="93.2500%" y="447.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (2 samples, 1.00%)</title>
      <rect x="93.0000%" y="421" width="1.0000%" height="15" fill="rgb(210,204,4)" fg:x="186" fg:w="2"/>
      <text x="93.2500%" y="431.50"/>
    </g>
    <g>
      <title>core::ptr::write (3 samples, 1.50%)</title>
      <rect x="93.0000%" y="469" width="1.5000%" height="15" fill="rgb(209,143,44)" fg:x="186" fg:w="3"/>
      <text x="93.2500%" y="479.50"/>
    </g>
    <g>
      <title>&lt;regex_automata::util::primitives::StateID as core::clone::Clone&gt;::clone (1 samples, 0.50%)</title>
      <rect x="94.5000%" y="437" width="0.5000%" height="15" fill="rgb(234,185,22)" fg:x="189" fg:w="1"/>
      <text x="94.7500%" y="447.50"/>
    </g>
    <g>
      <title>__memmove_avx512_unaligned_erms (3 samples, 1.50%)</title>
      <rect x="95.0000%" y="341" width="1.5000%" height="15" fill="rgb(217,126,36)" fg:x="190" fg:w="3"/>
      <text x="95.2500%" y="351.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (9 samples, 4.50%)</title>
      <rect x="93.0000%" y="677" width="4.5000%" height="15" fill="rgb(210,105,37)" fg:x="186" fg:w="9"/>
      <text x="93.2500%" y="687.50">regex..</text>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 4.50%)</title>
      <rect x="93.0000%" y="661" width="4.5000%" height="15" fill="rgb(214,109,53)" fg:x="186" fg:w="9"/>
      <text x="93.2500%" y="671.50">&lt;core..</text>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (9 samples, 4.50%)</title>
      <rect x="93.0000%" y="645" width="4.5000%" height="15" fill="rgb(254,35,30)" fg:x="186" fg:w="9"/>
      <text x="93.2500%" y="655.50">core:..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (9 samples, 4.50%)</title>
      <rect x="93.0000%" y="629" width="4.5000%" height="15" fill="rgb(226,169,23)" fg:x="186" fg:w="9"/>
      <text x="93.2500%" y="639.50">core:..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (9 samples, 4.50%)</title>
      <rect x="93.0000%" y="613" width="4.5000%" height="15" fill="rgb(205,130,14)" fg:x="186" fg:w="9"/>
      <text x="93.2500%" y="623.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (9 samples, 4.50%)</title>
      <rect x="93.0000%" y="597" width="4.5000%" height="15" fill="rgb(213,34,18)" fg:x="186" fg:w="9"/>
      <text x="93.2500%" y="607.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (9 samples, 4.50%)</title>
      <rect x="93.0000%" y="581" width="4.5000%" height="15" fill="rgb(246,38,12)" fg:x="186" fg:w="9"/>
      <text x="93.2500%" y="591.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (9 samples, 4.50%)</title>
      <rect x="93.0000%" y="565" width="4.5000%" height="15" fill="rgb(211,200,20)" fg:x="186" fg:w="9"/>
      <text x="93.2500%" y="575.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Utf8State::clear (9 samples, 4.50%)</title>
      <rect x="93.0000%" y="549" width="4.5000%" height="15" fill="rgb(241,127,0)" fg:x="186" fg:w="9"/>
      <text x="93.2500%" y="559.50">regex..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (9 samples, 4.50%)</title>
      <rect x="93.0000%" y="533" width="4.5000%" height="15" fill="rgb(207,86,25)" fg:x="186" fg:w="9"/>
      <text x="93.2500%" y="543.50">regex..</text>
    </g>
    <g>
      <title>alloc::vec::from_elem (9 samples, 4.50%)</title>
      <rect x="93.0000%" y="517" width="4.5000%" height="15" fill="rgb(208,109,54)" fg:x="186" fg:w="9"/>
      <text x="93.2500%" y="527.50">alloc..</text>
    </g>
    <g>
      <title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (9 samples, 4.50%)</title>
      <rect x="93.0000%" y="501" width="4.5000%" height="15" fill="rgb(228,177,24)" fg:x="186" fg:w="9"/>
      <text x="93.2500%" y="511.50">&lt;T as..</text>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::extend_with (9 samples, 4.50%)</title>
      <rect x="93.0000%" y="485" width="4.5000%" height="15" fill="rgb(216,52,5)" fg:x="186" fg:w="9"/>
      <text x="93.2500%" y="495.50">alloc..</text>
    </g>
    <g>
      <title>&lt;alloc::vec::ExtendElement&lt;T&gt; as alloc::vec::ExtendWith&lt;T&gt;&gt;::next (6 samples, 3.00%)</title>
      <rect x="94.5000%" y="469" width="3.0000%" height="15" fill="rgb(216,123,15)" fg:x="189" fg:w="6"/>
      <text x="94.7500%" y="479.50">&lt;al..</text>
    </g>
    <g>
      <title>&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry as core::clone::Clone&gt;::clone (6 samples, 3.00%)</title>
      <rect x="94.5000%" y="453" width="3.0000%" height="15" fill="rgb(211,18,41)" fg:x="189" fg:w="6"/>
      <text x="94.7500%" y="463.50">&lt;re..</text>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 2.50%)</title>
      <rect x="95.0000%" y="437" width="2.5000%" height="15" fill="rgb(239,104,10)" fg:x="190" fg:w="5"/>
      <text x="95.2500%" y="447.50">&lt;a..</text>
    </g>
    <g>
      <title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 2.50%)</title>
      <rect x="95.0000%" y="421" width="2.5000%" height="15" fill="rgb(229,121,46)" fg:x="190" fg:w="5"/>
      <text x="95.2500%" y="431.50">al..</text>
    </g>
    <g>
      <title>alloc::slice::hack::to_vec (5 samples, 2.50%)</title>
      <rect x="95.0000%" y="405" width="2.5000%" height="15" fill="rgb(221,172,50)" fg:x="190" fg:w="5"/>
      <text x="95.2500%" y="415.50">al..</text>
    </g>
    <g>
      <title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 2.50%)</title>
      <rect x="95.0000%" y="389" width="2.5000%" height="15" fill="rgb(216,42,52)" fg:x="190" fg:w="5"/>
      <text x="95.2500%" y="399.50">&lt;T..</text>
    </g>
    <g>
      <title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5 samples, 2.50%)</title>
      <rect x="95.0000%" y="373" width="2.5000%" height="15" fill="rgb(222,107,1)" fg:x="190" fg:w="5"/>
      <text x="95.2500%" y="383.50">co..</text>
    </g>
    <g>
      <title>core::intrinsics::copy_nonoverlapping (5 samples, 2.50%)</title>
      <rect x="95.0000%" y="357" width="2.5000%" height="15" fill="rgb(214,20,35)" fg:x="190" fg:w="5"/>
      <text x="95.2500%" y="367.50">co..</text>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="97.5000%" y="421" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="195" fg:w="1"/>
      <text x="97.7500%" y="431.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="97.5000%" y="405" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="195" fg:w="1"/>
      <text x="97.7500%" y="415.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="97.5000%" y="389" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="195" fg:w="1"/>
      <text x="97.7500%" y="399.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="97.5000%" y="373" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="195" fg:w="1"/>
      <text x="97.7500%" y="383.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="97.5000%" y="357" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="195" fg:w="1"/>
      <text x="97.7500%" y="367.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="97.5000%" y="341" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="195" fg:w="1"/>
      <text x="97.7500%" y="351.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="97.5000%" y="325" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="195" fg:w="1"/>
      <text x="97.7500%" y="335.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (1 samples, 0.50%)</title>
      <rect x="97.5000%" y="309" width="0.5000%" height="15" fill="rgb(210,204,4)" fg:x="195" fg:w="1"/>
      <text x="97.7500%" y="319.50"/>
    </g>
    <g>
      <title>core::ptr::write (2 samples, 1.00%)</title>
      <rect x="97.5000%" y="453" width="1.0000%" height="15" fill="rgb(209,143,44)" fg:x="195" fg:w="2"/>
      <text x="97.7500%" y="463.50"/>
    </g>
    <g>
      <title>[[kernel.kallsyms]] (2 samples, 1.00%)</title>
      <rect x="97.5000%" y="437" width="1.0000%" height="15" fill="rgb(210,204,4)" fg:x="195" fg:w="2"/>
      <text x="97.7500%" y="447.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (3 samples, 1.50%)</title>
      <rect x="97.5000%" y="549" width="1.5000%" height="15" fill="rgb(211,200,20)" fg:x="195" fg:w="3"/>
      <text x="97.7500%" y="559.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Utf8State::clear (3 samples, 1.50%)</title>
      <rect x="97.5000%" y="533" width="1.5000%" height="15" fill="rgb(241,127,0)" fg:x="195" fg:w="3"/>
      <text x="97.7500%" y="543.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (3 samples, 1.50%)</title>
      <rect x="97.5000%" y="517" width="1.5000%" height="15" fill="rgb(207,86,25)" fg:x="195" fg:w="3"/>
      <text x="97.7500%" y="527.50"/>
    </g>
    <g>
      <title>alloc::vec::from_elem (3 samples, 1.50%)</title>
      <rect x="97.5000%" y="501" width="1.5000%" height="15" fill="rgb(208,109,54)" fg:x="195" fg:w="3"/>
      <text x="97.7500%" y="511.50"/>
    </g>
    <g>
      <title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (3 samples, 1.50%)</title>
      <rect x="97.5000%" y="485" width="1.5000%" height="15" fill="rgb(228,177,24)" fg:x="195" fg:w="3"/>
      <text x="97.7500%" y="495.50"/>
    </g>
    <g>
      <title>alloc::vec::Vec&lt;T,A&gt;::extend_with (3 samples, 1.50%)</title>
      <rect x="97.5000%" y="469" width="1.5000%" height="15" fill="rgb(216,52,5)" fg:x="195" fg:w="3"/>
      <text x="97.7500%" y="479.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::ExtendElement&lt;T&gt; as alloc::vec::ExtendWith&lt;T&gt;&gt;::next (1 samples, 0.50%)</title>
      <rect x="98.5000%" y="453" width="0.5000%" height="15" fill="rgb(216,123,15)" fg:x="197" fg:w="1"/>
      <text x="98.7500%" y="463.50"/>
    </g>
    <g>
      <title>&lt;regex_automata::nfa::thompson::map::Utf8BoundedEntry as core::clone::Clone&gt;::clone (1 samples, 0.50%)</title>
      <rect x="98.5000%" y="437" width="0.5000%" height="15" fill="rgb(211,18,41)" fg:x="197" fg:w="1"/>
      <text x="98.7500%" y="447.50"/>
    </g>
    <g>
      <title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.50%)</title>
      <rect x="98.5000%" y="421" width="0.5000%" height="15" fill="rgb(239,104,10)" fg:x="197" fg:w="1"/>
      <text x="98.7500%" y="431.50"/>
    </g>
    <g>
      <title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.50%)</title>
      <rect x="98.5000%" y="405" width="0.5000%" height="15" fill="rgb(229,121,46)" fg:x="197" fg:w="1"/>
      <text x="98.7500%" y="415.50"/>
    </g>
    <g>
      <title>alloc::slice::hack::to_vec (1 samples, 0.50%)</title>
      <rect x="98.5000%" y="389" width="0.5000%" height="15" fill="rgb(221,172,50)" fg:x="197" fg:w="1"/>
      <text x="98.7500%" y="399.50"/>
    </g>
    <g>
      <title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.50%)</title>
      <rect x="98.5000%" y="373" width="0.5000%" height="15" fill="rgb(216,42,52)" fg:x="197" fg:w="1"/>
      <text x="98.7500%" y="383.50"/>
    </g>
    <g>
      <title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.50%)</title>
      <rect x="98.5000%" y="357" width="0.5000%" height="15" fill="rgb(222,107,1)" fg:x="197" fg:w="1"/>
      <text x="98.7500%" y="367.50"/>
    </g>
    <g>
      <title>core::intrinsics::copy_nonoverlapping (1 samples, 0.50%)</title>
      <rect x="98.5000%" y="341" width="0.5000%" height="15" fill="rgb(214,20,35)" fg:x="197" fg:w="1"/>
      <text x="98.7500%" y="351.50"/>
    </g>
    <g>
      <title>__memmove_avx512_unaligned_erms (1 samples, 0.50%)</title>
      <rect x="98.5000%" y="325" width="0.5000%" height="15" fill="rgb(217,126,36)" fg:x="197" fg:w="1"/>
      <text x="98.7500%" y="335.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (4 samples, 2.00%)</title>
      <rect x="97.5000%" y="565" width="2.0000%" height="15" fill="rgb(246,38,12)" fg:x="195" fg:w="4"/>
      <text x="97.7500%" y="575.50">r..</text>
    </g>
    <g>
      <title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.50%)</title>
      <rect x="99.0000%" y="549" width="0.5000%" height="15" fill="rgb(206,221,29)" fg:x="198" fg:w="1"/>
      <text x="99.2500%" y="559.50"/>
    </g>
    <g>
      <title>all (200 samples, 100%)</title>
      <rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(206,183,37)" fg:x="0" fg:w="200"/>
      <text x="0.2500%" y="1087.50"/>
    </g>
    <g>
      <title>gen-1000-3-foob (164 samples, 82.00%)</title>
      <rect x="18.0000%" y="1061" width="82.0000%" height="15" fill="rgb(214,224,18)" fg:x="36" fg:w="164"/>
      <text x="18.2500%" y="1071.50">gen-1000-3-foob</text>
    </g>
    <g>
      <title>[unknown] (93 samples, 46.50%)</title>
      <rect x="53.5000%" y="1045" width="46.5000%" height="15" fill="rgb(227,28,50)" fg:x="107" fg:w="93"/>
      <text x="53.7500%" y="1055.50">[unknown]</text>
    </g>
    <g>
      <title>regex::builders::Builder::build_one_bytes (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="1029" width="7.0000%" height="15" fill="rgb(233,102,7)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="1039.50">regex::bu..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="1013" width="7.0000%" height="15" fill="rgb(212,33,22)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="1023.50">regex_aut..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="997" width="7.0000%" height="15" fill="rgb(236,25,32)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="1007.50">regex_aut..</text>
    </g>
    <g>
      <title>regex_automata::meta::regex::Builder::build_many_from_hir (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="981" width="7.0000%" height="15" fill="rgb(250,142,30)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="991.50">regex_aut..</text>
    </g>
    <g>
      <title>regex_automata::meta::strategy::new (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="965" width="7.0000%" height="15" fill="rgb(243,171,22)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="975.50">regex_aut..</text>
    </g>
    <g>
      <title>regex_automata::meta::strategy::Core::new (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="949" width="7.0000%" height="15" fill="rgb(222,69,27)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="959.50">regex_aut..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="933" width="7.0000%" height="15" fill="rgb(226,42,16)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="943.50">regex_aut..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::compile (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="917" width="7.0000%" height="15" fill="rgb(242,129,17)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="927.50">regex_aut..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="901" width="7.0000%" height="15" fill="rgb(247,137,3)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="911.50">regex_aut..</text>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="885" width="7.0000%" height="15" fill="rgb(214,109,53)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="895.50">&lt;core::it..</text>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="869" width="7.0000%" height="15" fill="rgb(254,35,30)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="879.50">core::opt..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="853" width="7.0000%" height="15" fill="rgb(226,169,23)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="863.50">core::ops..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::compile::{{closure}} (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="837" width="7.0000%" height="15" fill="rgb(218,216,52)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="847.50">regex_aut..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="821" width="7.0000%" height="15" fill="rgb(235,200,16)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="831.50">regex_aut..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="805" width="7.0000%" height="15" fill="rgb(213,34,18)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="815.50">regex_aut..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="789" width="7.0000%" height="15" fill="rgb(210,105,37)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="799.50">regex_aut..</text>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="773" width="7.0000%" height="15" fill="rgb(214,109,53)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="783.50">&lt;core::it..</text>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="757" width="7.0000%" height="15" fill="rgb(254,35,30)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="767.50">core::opt..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="741" width="7.0000%" height="15" fill="rgb(226,169,23)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="751.50">core::ops..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="725" width="7.0000%" height="15" fill="rgb(205,130,14)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="735.50">regex_aut..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="709" width="7.0000%" height="15" fill="rgb(235,200,16)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="719.50">regex_aut..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (14 samples, 7.00%)</title>
      <rect x="93.0000%" y="693" width="7.0000%" height="15" fill="rgb(213,34,18)" fg:x="186" fg:w="14"/>
      <text x="93.2500%" y="703.50">regex_aut..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (5 samples, 2.50%)</title>
      <rect x="97.5000%" y="677" width="2.5000%" height="15" fill="rgb(253,35,22)" fg:x="195" fg:w="5"/>
      <text x="97.7500%" y="687.50">re..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (5 samples, 2.50%)</title>
      <rect x="97.5000%" y="661" width="2.5000%" height="15" fill="rgb(247,137,3)" fg:x="195" fg:w="5"/>
      <text x="97.7500%" y="671.50">re..</text>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 2.50%)</title>
      <rect x="97.5000%" y="645" width="2.5000%" height="15" fill="rgb(214,109,53)" fg:x="195" fg:w="5"/>
      <text x="97.7500%" y="655.50">&lt;c..</text>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (5 samples, 2.50%)</title>
      <rect x="97.5000%" y="629" width="2.5000%" height="15" fill="rgb(254,35,30)" fg:x="195" fg:w="5"/>
      <text x="97.7500%" y="639.50">co..</text>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (5 samples, 2.50%)</title>
      <rect x="97.5000%" y="613" width="2.5000%" height="15" fill="rgb(226,169,23)" fg:x="195" fg:w="5"/>
      <text x="97.7500%" y="623.50">co..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice::{{closure}} (5 samples, 2.50%)</title>
      <rect x="97.5000%" y="597" width="2.5000%" height="15" fill="rgb(223,145,12)" fg:x="195" fg:w="5"/>
      <text x="97.7500%" y="607.50">re..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (5 samples, 2.50%)</title>
      <rect x="97.5000%" y="581" width="2.5000%" height="15" fill="rgb(213,34,18)" fg:x="195" fg:w="5"/>
      <text x="97.7500%" y="591.50">re..</text>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (1 samples, 0.50%)</title>
      <rect x="99.5000%" y="565" width="0.5000%" height="15" fill="rgb(210,105,37)" fg:x="199" fg:w="1"/>
      <text x="99.7500%" y="575.50"/>
    </g>
    <g>
      <title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.50%)</title>
      <rect x="99.5000%" y="549" width="0.5000%" height="15" fill="rgb(214,109,53)" fg:x="199" fg:w="1"/>
      <text x="99.7500%" y="559.50"/>
    </g>
    <g>
      <title>core::option::Option&lt;T&gt;::map (1 samples, 0.50%)</title>
      <rect x="99.5000%" y="533" width="0.5000%" height="15" fill="rgb(254,35,30)" fg:x="199" fg:w="1"/>
      <text x="99.7500%" y="543.50"/>
    </g>
    <g>
      <title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (1 samples, 0.50%)</title>
      <rect x="99.5000%" y="517" width="0.5000%" height="15" fill="rgb(226,169,23)" fg:x="199" fg:w="1"/>
      <text x="99.7500%" y="527.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c::{{closure}} (1 samples, 0.50%)</title>
      <rect x="99.5000%" y="501" width="0.5000%" height="15" fill="rgb(205,130,14)" fg:x="199" fg:w="1"/>
      <text x="99.7500%" y="511.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.50%)</title>
      <rect x="99.5000%" y="485" width="0.5000%" height="15" fill="rgb(213,34,18)" fg:x="199" fg:w="1"/>
      <text x="99.7500%" y="495.50"/>
    </g>
    <g>
      <title>regex_automata::nfa::thompson::compiler::Compiler::c_unicode_class (1 samples, 0.50%)</title>
      <rect x="99.5000%" y="469" width="0.5000%" height="15" fill="rgb(246,38,12)" fg:x="199" fg:w="1"/>
      <text x="99.7500%" y="479.50"/>
    </g>
    <g>
      <title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.50%)</title>
      <rect x="99.5000%" y="453" width="0.5000%" height="15" fill="rgb(210,72,9)" fg:x="199" fg:w="1"/>
      <text x="99.7500%" y="463.50"/>
    </g>
    <g>
      <title>&lt;regex_syntax::hir::interval::IntervalSetIter&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.50%)</title>
      <rect x="99.5000%" y="437" width="0.5000%" height="15" fill="rgb(217,107,26)" fg:x="199" fg:w="1"/>
      <text x="99.7500%" y="447.50"/>
    </g>
    <g>
      <title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.50%)</title>
      <rect x="99.5000%" y="421" width="0.5000%" height="15" fill="rgb(236,210,2)" fg:x="199" fg:w="1"/>
      <text x="99.7500%" y="431.50"/>
    </g>
  </svg>
</svg>
