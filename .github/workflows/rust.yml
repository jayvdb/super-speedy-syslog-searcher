# github workflows action file for super-speedy-syslog-searcher
---
name: Rust
on:
  push:
  pull_request:
env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # run options for debug
  S4_ARGSD: -z 0x2 -s
  # run options for release
  S4_ARGSR: -z 0x40 -s
  # run files
  S4_TEST_FILES: ./logs/other/tests/dtf2-2.log
                 ./logs/other/tests/dtf3-2a.log
                 ./logs/other/tests/dtf5-6a.log.gz
                 ./logs/other/tests/dtf7-20-LEVELS.log.xz
                 ./logs/other/tests/gen-2-1.tar
                 ./logs/other/tests/gen-20-1-faces.log
                 ./logs/other/tests/gen-20-1-⚀⚁⚂⚃⚄⚅.log
jobs:
  job_build_debug_release_test:
    name: check, clippy, build debug, build release, test
    runs-on: ubuntu-latest
    steps:
      # build & upload debug
      - name: git checkout
        uses: actions/checkout@v2
      - name: Check (cargo check)
        # `cargo check` builds dependences and other things but skips
        # final code generation
        run: |
          set -eux
          cargo check --verbose --all-targets
          cargo check --verbose --all-targets --release
      - name: Check clippy
        run: |
          set -eux
          cargo clippy --no-deps --verbose --all-targets --all-features
      - name: Build Debug
        run: |
          set -eux
          cargo build --verbose
          cp -av ./target/debug/s4 ./s4_debug
      - name: Upload debug binary
        uses: actions/upload-artifact@v3
        with:
          name: s4_debug
          path: ./s4_debug
      # build & upload release
      - name: Build Release
        run: |
          set -eux
          cargo build --release --verbose
          cp -av ./target/release/s4 ./s4_release
      - name: Upload release binary
        uses: actions/upload-artifact@v3
        with:
          name: s4_release
          path: ./s4_release
      # - name: Bench
      #   run: cargo bench --no-run
      #  tests
      - name: Run Tests
        run: cargo test --verbose
      - name: Build documentation
        run: cargo doc --locked --release --frozen --no-deps -v
  job_runs:
    name: run s4
    needs: job_build_debug_release_test
    runs-on: ubuntu-latest
    steps:
      # checkout for the log files
      - name: git checkout
        uses: actions/checkout@v2
      # download & run debug
      - name: Download debug binary
        uses: actions/download-artifact@v3
        with:
          name: s4_debug
      - name: Run Program Debug
        run: |
          set -eux
          S4=./s4_debug
          chmod -v +x -- ${S4}
          ${S4} --help
          ${S4} --color=never ${S4_TEST_FILES} 2>/dev/null
          ${S4} ${S4_ARGSD} --color=never ${S4_TEST_FILES} 2>/dev/null
          ${S4} ${S4_ARGSD} --color=never -l -n -w ${S4_TEST_FILES} 2>/dev/null
          ${S4} ${S4_ARGSD} --color=never -l -p -w ${S4_TEST_FILES} 2>/dev/null
          ${S4} ${S4_ARGSD} --color=never -u -n -w ${S4_TEST_FILES} 2>/dev/null
          ${S4} ${S4_ARGSD} --color=never -u -p -w ${S4_TEST_FILES} 2>/dev/null
          ${S4} ${S4_ARGSD} --color=always -l -n -w ${S4_TEST_FILES} 2>/dev/null
          ${S4} ${S4_ARGSD} --color=always -l -p -w ${S4_TEST_FILES} 2>/dev/null
          ${S4} ${S4_ARGSD} --color=always -u -n -w ${S4_TEST_FILES} 2>/dev/null
          ${S4} ${S4_ARGSD} --color=always -u -p -w ${S4_TEST_FILES} 2>/dev/null
      # download & run release
      - name: Download release binary
        uses: actions/download-artifact@v3
        with:
          name: s4_release
      - name: Run Program Release
        run: |
          set -eux
          S4=./s4_release
          chmod -v +x -- ${S4}
          ${S4} --help
          ${S4} --color=never ${S4_TEST_FILES}
          ${S4} ${S4_ARGSR} --color=never ${S4_TEST_FILES}
          ${S4} ${S4_ARGSR} --color=never -l -n -w ${S4_TEST_FILES}
          ${S4} ${S4_ARGSR} --color=never -l -p -w ${S4_TEST_FILES}
          ${S4} ${S4_ARGSR} --color=never -u -n -w ${S4_TEST_FILES}
          ${S4} ${S4_ARGSR} --color=never -u -p -w ${S4_TEST_FILES}
          ${S4} ${S4_ARGSR} --color=always -l -n -w ${S4_TEST_FILES}
          ${S4} ${S4_ARGSR} --color=always -l -p -w ${S4_TEST_FILES}
          ${S4} ${S4_ARGSR} --color=always -u -n -w ${S4_TEST_FILES}
          ${S4} ${S4_ARGSR} --color=always -u -p -w ${S4_TEST_FILES}
      - name: Compare Runs of Debug and Release
        run: |
          set -eu
          S4R=./s4_release
          S4D=./s4_debug
          OUTR=output-release.txt
          OUTD=output-debug.txt
          chmod -v +x -- "${S4R}" "${S4D}"
          set -x
          time ${S4R} --version
          time ${S4D} --version
          ${S4R} ${S4_ARGSR} --color=never ${S4_TEST_FILES} | tee "${OUTR}"
          ${S4D} ${S4_ARGSR} --color=never ${S4_TEST_FILES} 2>/dev/null | tee "${OUTD}"
          diff --version
          diff -y --suppress-common-lines --minimal "${OUTR}" "${OUTD}"
      - name: Run Script compare-grep-sort
        run: |
          set -eux
          export PROGRAM=./s4_release
          SCRIPT=./tools/compare-grep-sort.sh
          chmod -v +x "${PROGRAM}" "${SCRIPT}"
          "${SCRIPT}"
  # Run code coverage with rust "nightly" (necessary for some `-Z` features)
  # then upload code coverage result to codecov.io
  # Help from:
  # - https://github.com/marketplace/actions/rust-grcov
  # - https://eipi.xyz/blog/rust-code-coverage-with-github-workflows/
  # - https://github.com/mozilla/grcov#lcov-output
  job_grcov:
    name: grcov
    runs-on: ubuntu-latest
    needs: job_runs
    steps:
      - name: git checkout
        uses: actions/checkout@v1
      - name: get toolchain nightly
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - name: cargo install
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --verbose -- rustfilt grcov
      - name: cargo build with special profiling
        uses: actions-rs/cargo@v1
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: -Zprofile
                     -Ccodegen-units=1 -Cinline-threshold=0
                     -Clink-dead-code -Coverflow-checks=off
                     -Cpanic=abort -Zpanic_abort_tests
        with:
          command: build
          args: --verbose
      - name: cargo test with special profiling
        uses: actions-rs/cargo@v1
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: -Zprofile
                     -Ccodegen-units=1 -Cinline-threshold=0
                     -Clink-dead-code -Coverflow-checks=off
                     -Cpanic=abort -Zpanic_abort_tests
        with:
          command: test
          args: --lib --no-fail-fast
      - name: grcov
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: -Zprofile
                     -Ccodegen-units=1 -Cinline-threshold=0
                     -Clink-dead-code -Coverflow-checks=off
                     -Cpanic=abort -Zpanic_abort_tests
        run: |
          set -eux
          grcov \
              . \
              --source-dir ./src \
              --log-level DEBUG \
              --llvm \
              --binary-path ./target/debug/ \
              --branch \
              --ignore-not-existing \
              --output-type lcov \
              --output-path lcov.info
          ls -l
          head lcov.info
      # action from https://github.com/codecov/codecov-action
      - name: upload codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          verbose: true
          fail_ci_if_error: true
          # public repository does not need secret section `with: token`
          # see
          # https://about.codecov.io/blog/javascript-code-coverage-using-github-actions-and-codecov/
          #
          # list of acceptable formats:
          # https://docs.codecov.com/docs/supported-report-formats
